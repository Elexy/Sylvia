<?php


/**
 * This class adds structure of 'current_product_list' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:36 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class CurrentProductListMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.CurrentProductListMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(CurrentProductListPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(CurrentProductListPeer::TABLE_NAME);
		$tMap->setPhpName('CurrentProductList');
		$tMap->setClassname('CurrentProductList');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('PRODUCTID', 'Productid', 'INTEGER', true, 10);

		$tMap->addColumn('CATEGORYID', 'Categoryid', 'TINYINT', false, 2);

		$tMap->addColumn('SUBCATEGORYID', 'Subcategoryid', 'INTEGER', true, 10);

		$tMap->addColumn('PRODUCTNAME', 'Productname', 'VARCHAR', false, 255);

		$tMap->addColumn('PRODUCTDESCRIPTION', 'Productdescription', 'LONGVARCHAR', false, null);

		$tMap->addColumn('PURCHASE_PRICE_FOREIGN', 'PurchasePriceForeign', 'DECIMAL', true, 10);

		$tMap->addColumn('PURCHASE_PRICE_HOME', 'PurchasePriceHome', 'DECIMAL', true, 10);

		$tMap->addColumn('EXTRA_COST', 'ExtraCost', 'DECIMAL', true, 6);

		$tMap->addColumn('MARGIN_CORRECTION', 'MarginCorrection', 'DECIMAL', true, 6);

		$tMap->addColumn('PRICE_DISCOVERY', 'PriceDiscovery', 'DECIMAL', false, 10);

		$tMap->addColumn('PRICE_DISCOVERY_10', 'PriceDiscovery10', 'DECIMAL', false, 10);

		$tMap->addColumn('PRICE_DISCOVERY_100', 'PriceDiscovery100', 'DECIMAL', false, 10);

		$tMap->addColumn('SELLING_PRICE', 'SellingPrice', 'DECIMAL', true, 10);

		$tMap->addColumn('SELLING_PRICE_10', 'SellingPrice10', 'DECIMAL', true, 10);

		$tMap->addColumn('SELLING_PRICE_50', 'SellingPrice50', 'DECIMAL', false, 10);

		$tMap->addColumn('SELLING_PRICE_100', 'SellingPrice100', 'DECIMAL', false, 10);

		$tMap->addColumn('RETAIL_PRICE_EX', 'RetailPriceEx', 'DECIMAL', true, 10);

		$tMap->addColumn('BTW_CLASS', 'BtwClass', 'TINYINT', false, 1);

		$tMap->addColumn('EUPRODUCTCODE', 'Euproductcode', 'INTEGER', false, 8);

		$tMap->addColumn('OLD_STOCK', 'OldStock', 'INTEGER', false, 11);

		$tMap->addColumn('LAST_EXP', 'LastExp', 'DATE', false, null);

		$tMap->addColumn('EXP_RATING', 'ExpRating', 'TINYINT', false, 3);

		$tMap->addColumn('TARIC', 'Taric', 'INTEGER', false, 2);

		$tMap->addColumn('EAN', 'Ean', 'BIGINT', false, 13);

		$tMap->addColumn('REORDER_Q', 'ReorderQ', 'SMALLINT', true, 6);

		$tMap->addColumn('REORDERLEVEL', 'Reorderlevel', 'SMALLINT', false, 8);

		$tMap->addColumn('LEADTIME', 'Leadtime', 'TINYINT', false, 3);

		$tMap->addColumn('SUPPLIER', 'Supplier', 'INTEGER', true, 8);

		$tMap->addColumn('MERK', 'Merk', 'VARCHAR', true, 35);

		$tMap->addColumn('MERKID', 'Merkid', 'TINYINT', true, 3);

		$tMap->addColumn('PRICELIST_YN', 'PricelistYn', 'INTEGER', false, 1);

		$tMap->addColumn('ROADKING', 'Roadking', 'TINYINT', true, 1);

		$tMap->addColumn('NEPTUNE', 'Neptune', 'TINYINT', false, 1);

		$tMap->addColumn('OUTDOOR', 'Outdoor', 'TINYINT', false, 1);

		$tMap->addColumn('DISCONTINUED_YN', 'DiscontinuedYn', 'TINYINT', true, 1);

		$tMap->addColumn('EXTERNALID', 'Externalid', 'VARCHAR', true, 30);

		$tMap->addColumn('CURRENCY', 'Currency', 'INTEGER', true, 3);

		$tMap->addColumn('WEIGHT_CORR', 'WeightCorr', 'DECIMAL', false, 10);

		$tMap->addColumn('SKU', 'Sku', 'TINYINT', true, 1);

		$tMap->addColumn('OLD_LOCATION_ID', 'OldLocationId', 'SMALLINT', false, 1);

		$tMap->addColumn('SPECIAL', 'Special', 'TINYINT', true, 1);

		$tMap->addColumn('PUBLISH', 'Publish', 'TINYINT', true, 1);

		$tMap->addColumn('STORE_SERIAL_YN', 'StoreSerialYn', 'TINYINT', true, 1);

		$tMap->addColumn('IMAGE', 'Image', 'VARCHAR', false, 10);

	} // doBuild()

} // CurrentProductListMapBuilder
