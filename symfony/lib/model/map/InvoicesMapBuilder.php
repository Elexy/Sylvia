<?php


/**
 * This class adds structure of 'invoices' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:38 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class InvoicesMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.InvoicesMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(InvoicesPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(InvoicesPeer::TABLE_NAME);
		$tMap->setPhpName('Invoices');
		$tMap->setClassname('Invoices');

		$tMap->setUseIdGenerator(true);

		$tMap->addColumn('SHIPNAME', 'Shipname', 'VARCHAR', false, 100);

		$tMap->addColumn('SHIPADDRESS', 'Shipaddress', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPCITY', 'Shipcity', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPREGION', 'Shipregion', 'VARCHAR', false, 40);

		$tMap->addColumn('SHIPPOSTALCODE', 'Shippostalcode', 'VARCHAR', false, 15);

		$tMap->addColumn('SHIPCOUNTRY', 'Shipcountry', 'VARCHAR', false, 50);

		$tMap->addColumn('CUSTOMERID', 'Customerid', 'INTEGER', false, 8);

		$tMap->addColumn('COMPANYNAME', 'Companyname', 'VARCHAR', false, 100);

		$tMap->addColumn('ADDRESS', 'Address', 'VARCHAR', false, 50);

		$tMap->addColumn('CITY', 'City', 'VARCHAR', false, 50);

		$tMap->addColumn('REGION', 'Region', 'VARCHAR', false, 40);

		$tMap->addColumn('POSTALCODE', 'Postalcode', 'VARCHAR', false, 15);

		$tMap->addColumn('COUNTRY', 'Country', 'VARCHAR', false, 50);

		$tMap->addColumn('EMPLOYEEID', 'Employeeid', 'SMALLINT', true, 10);

		$tMap->addPrimaryKey('INVOICEID', 'Invoiceid', 'INTEGER', true, 10);

		$tMap->addColumn('ORDERID', 'Orderid', 'INTEGER', false, 10);

		$tMap->addColumn('SHIPMENTID', 'Shipmentid', 'INTEGER', false, 8);

		$tMap->addColumn('ORDERDATE', 'Orderdate', 'TIMESTAMP', false, null);

		$tMap->addColumn('REQUIREDDATE', 'Requireddate', 'TIMESTAMP', false, null);

		$tMap->addColumn('SHIPPEDDATE', 'Shippeddate', 'TIMESTAMP', false, null);

		$tMap->addColumn('COMPANYNAMESHIP', 'Companynameship', 'VARCHAR', false, 50);

		$tMap->addColumn('INVOICE_TOTAL', 'InvoiceTotal', 'DECIMAL', false, 10);

		$tMap->addColumn('INVOICE_BTW', 'InvoiceBtw', 'DECIMAL', false, 10);

		$tMap->addColumn('BTW', 'Btw', 'TINYINT', false, 4);

		$tMap->addColumn('PAID_YN', 'PaidYn', 'TINYINT', false, 1);

		$tMap->addColumn('PAID_AMOUNT', 'PaidAmount', 'DECIMAL', false, 10);

		$tMap->addColumn('PAID_DATE', 'PaidDate', 'DATE', false, null);

		$tMap->addColumn('PAYMENT_TYPE', 'PaymentType', 'TINYINT', false, 3);

		$tMap->addColumn('INVOICE_DATE', 'InvoiceDate', 'DATE', false, null);

		$tMap->addColumn('PAYMENTTERM', 'Paymentterm', 'TINYINT', false, 3);

		$tMap->addColumn('VAT_NUMBER', 'VatNumber', 'VARCHAR', true, 15);

		$tMap->addColumn('DISPUUTID', 'Dispuutid', 'INTEGER', true, 2);

		$tMap->addColumn('OVERDUETYPEID', 'Overduetypeid', 'INTEGER', true, 2);

	} // doBuild()

} // InvoicesMapBuilder
