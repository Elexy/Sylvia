<?php


/**
 * This class adds structure of 'events' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:37 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class EventsMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.EventsMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(EventsPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(EventsPeer::TABLE_NAME);
		$tMap->setPhpName('Events');
		$tMap->setClassname('Events');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 12);

		$tMap->addColumn('TITLE', 'Title', 'VARCHAR', true, 100);

		$tMap->addColumn('DESCRIPTION', 'Description', 'VARCHAR', true, 120);

		$tMap->addColumn('CREATED', 'Created', 'TIMESTAMP', true, null);

		$tMap->addColumn('CREATED_BY', 'CreatedBy', 'INTEGER', true, 11);

		$tMap->addColumn('MODIFIED', 'Modified', 'TIMESTAMP', true, null);

		$tMap->addColumn('MODIFIED_BY', 'ModifiedBy', 'INTEGER', true, 11);

		$tMap->addColumn('PUBLISH_UP', 'PublishUp', 'TIMESTAMP', true, null);

		$tMap->addColumn('PUBLISH_DOWN', 'PublishDown', 'TIMESTAMP', true, null);

		$tMap->addColumn('LINK', 'Link', 'VARCHAR', true, 50);

		$tMap->addColumn('IMAGE', 'Image', 'VARCHAR', true, 50);

		$tMap->addColumn('RECCURTYPE', 'Reccurtype', 'TINYINT', true, 1);

		$tMap->addColumn('RECCURTIMES', 'Reccurtimes', 'VARCHAR', true, 255);

		$tMap->addColumn('RECCURTIMESINTERVAL', 'Reccurtimesinterval', 'VARCHAR', true, 7);

		$tMap->addColumn('RECCURDAY', 'Reccurday', 'VARCHAR', true, 4);

		$tMap->addColumn('RECCURWEEKDAYS', 'Reccurweekdays', 'VARCHAR', true, 20);

		$tMap->addColumn('RECCURWEEKS', 'Reccurweeks', 'VARCHAR', true, 10);

		$tMap->addColumn('ACTION_PERFORMED_DATE', 'ActionPerformedDate', 'TIMESTAMP', true, null);

		$tMap->addColumn('ACTION_DONE_BY', 'ActionDoneBy', 'INTEGER', true, 11);

		$tMap->addColumn('APPROVED', 'Approved', 'TINYINT', true, 1);

		$tMap->addColumn('FUNCTIONNAME', 'Functionname', 'VARCHAR', true, 255);

		$tMap->addColumn('CRONJOB_YN', 'CronjobYn', 'TINYINT', true, 3);

	} // doBuild()

} // EventsMapBuilder
