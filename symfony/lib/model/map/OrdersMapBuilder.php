<?php


/**
 * This class adds structure of 'orders' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:39 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class OrdersMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.OrdersMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(OrdersPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(OrdersPeer::TABLE_NAME);
		$tMap->setPhpName('Orders');
		$tMap->setClassname('Orders');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ORDERID', 'Orderid', 'INTEGER', true, 10);

		$tMap->addColumn('CONTACTID', 'Contactid', 'INTEGER', false, 8);

		$tMap->addColumn('CONTACTSORDERID', 'Contactsorderid', 'VARCHAR', false, 100);

		$tMap->addColumn('EMPLOYEEID', 'Employeeid', 'INTEGER', false, 11);

		$tMap->addColumn('ORDERDATE', 'Orderdate', 'TIMESTAMP', false, null);

		$tMap->addColumn('REQUIREDDATE', 'Requireddate', 'TIMESTAMP', false, null);

		$tMap->addColumn('SHIPPEDDATE', 'Shippeddate', 'TIMESTAMP', false, null);

		$tMap->addColumn('XP_NO', 'XpNo', 'INTEGER', false, 11);

		$tMap->addColumn('MAILTABLE', 'Mailtable', 'VARCHAR', false, 10);

		$tMap->addColumn('SHIPVIA', 'Shipvia', 'TINYINT', false, 4);

		$tMap->addColumn('SHIPID', 'Shipid', 'INTEGER', true, 10);

		$tMap->addColumn('SHIPNAME', 'Shipname', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPADDRESS', 'Shipaddress', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPCITY', 'Shipcity', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPREGION', 'Shipregion', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPPOSTALCODE', 'Shippostalcode', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPCOUNTRY', 'Shipcountry', 'VARCHAR', false, 50);

		$tMap->addColumn('LOCKED_YN', 'LockedYn', 'TINYINT', true, 1);

		$tMap->addColumn('COMMENTS', 'Comments', 'LONGVARCHAR', false, null);

		$tMap->addColumn('CONFIRMED_YN', 'ConfirmedYn', 'TINYINT', false, 1);

		$tMap->addColumn('BLOCKORDER', 'Blockorder', 'TINYINT', true, 3);

		$tMap->addColumn('CONFIRMED_HOW', 'ConfirmedHow', 'VARCHAR', false, 30);

		$tMap->addColumn('ENDCUSTOMER_YN', 'EndcustomerYn', 'TINYINT', true, 1);

		$tMap->addColumn('PAYMENTTERM_YN', 'PaymenttermYn', 'TINYINT', true, 1);

		$tMap->addColumn('TRACKINGNUMMER', 'Trackingnummer', 'VARCHAR', false, 255);

		$tMap->addColumn('BTW_YN', 'BtwYn', 'TINYINT', true, 1);

		$tMap->addColumn('PRICE_LEVEL', 'PriceLevel', 'TINYINT', false, 2);

		$tMap->addColumn('COMPLETE_YN', 'CompleteYn', 'TINYINT', false, 1);

		$tMap->addColumn('TRANSPORTCOSTS', 'Transportcosts', 'DECIMAL', false, 10);

		$tMap->addColumn('MANUAL_TRANSPORTCOSTS', 'ManualTransportcosts', 'TINYINT', true, 1);

		$tMap->addColumn('ORDERCOSTS', 'Ordercosts', 'DECIMAL', false, 10);

		$tMap->addColumn('MANUAL_ORDERCOSTS', 'ManualOrdercosts', 'TINYINT', true, 1);

		$tMap->addColumn('EMPLOYEE', 'Employee', 'TINYINT', false, 3);

		$tMap->addColumn('IN_ONE_DELIVERY_YN', 'InOneDeliveryYn', 'TINYINT', false, 1);

		$tMap->addColumn('RMA_YN', 'RmaYn', 'TINYINT', true, 1);

		$tMap->addColumn('CONSIGNMENT_ORDER', 'ConsignmentOrder', 'TINYINT', true, 1);

		$tMap->addColumn('ADMINISTRATION_ORDER', 'AdministrationOrder', 'TINYINT', true, 1);

	} // doBuild()

} // OrdersMapBuilder
