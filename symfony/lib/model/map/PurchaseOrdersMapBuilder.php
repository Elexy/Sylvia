<?php


/**
 * This class adds structure of 'purchase_orders' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:40 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PurchaseOrdersMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PurchaseOrdersMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(PurchaseOrdersPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(PurchaseOrdersPeer::TABLE_NAME);
		$tMap->setPhpName('PurchaseOrders');
		$tMap->setClassname('PurchaseOrders');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('PURCHASEORDERID', 'Purchaseorderid', 'INTEGER', true, 10);

		$tMap->addColumn('PURCHASEORDERNUMBER', 'Purchaseordernumber', 'VARCHAR', false, 100);

		$tMap->addColumn('PURCHASEORDERDESCRIPTION', 'Purchaseorderdescription', 'VARCHAR', false, 100);

		$tMap->addColumn('SUPPLIERID', 'Supplierid', 'INTEGER', false, 11);

		$tMap->addColumn('EMPLOYEEID', 'Employeeid', 'INTEGER', false, 11);

		$tMap->addColumn('ORDERDATE', 'Orderdate', 'TIMESTAMP', false, null);

		$tMap->addColumn('SHIPCONTACTID', 'Shipcontactid', 'INTEGER', false, 10);

		$tMap->addColumn('SHIP_ADRESID', 'ShipAdresid', 'INTEGER', false, 11);

		$tMap->addColumn('SHIPNAME', 'Shipname', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPADDRESS', 'Shipaddress', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPPOSTALCODE', 'Shippostalcode', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPCITY', 'Shipcity', 'VARCHAR', false, 50);

		$tMap->addColumn('SHIPCOUNTRY', 'Shipcountry', 'VARCHAR', false, 50);

		$tMap->addColumn('DATEREQUIRED', 'Daterequired', 'TIMESTAMP', false, null);

		$tMap->addColumn('DATEPROMISED', 'Datepromised', 'TIMESTAMP', false, null);

		$tMap->addColumn('SHIPDATE', 'Shipdate', 'TIMESTAMP', false, null);

		$tMap->addColumn('SHIPPINGMETHODID', 'Shippingmethodid', 'INTEGER', false, 11);

		$tMap->addColumn('FREIGHTCHARGE', 'Freightcharge', 'TINYINT', false, 4);

		$tMap->addColumn('ORDER_CURRENCY', 'OrderCurrency', 'TINYINT', false, 1);

		$tMap->addColumn('BTW_YN', 'BtwYn', 'TINYINT', false, 4);

		$tMap->addColumn('PO_SENT', 'PoSent', 'TIMESTAMP', false, null);

		$tMap->addColumn('STATUS', 'Status', 'TINYINT', false, 3);

		$tMap->addColumn('BUYER_CONTACTID', 'BuyerContactid', 'INTEGER', false, 10);

	} // doBuild()

} // PurchaseOrdersMapBuilder
