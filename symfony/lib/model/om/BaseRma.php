<?php

/**
 * Base class that represents a row from the 'RMA' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:34 2009
 *
 * @package    lib.model.om
 */
abstract class BaseRma extends BaseObject  implements Persistent {


  const PEER = 'RmaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RmaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the contacts_id field.
	 * @var        int
	 */
	protected $contacts_id;

	/**
	 * The value for the productid field.
	 * @var        int
	 */
	protected $productid;

	/**
	 * The value for the aantal field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $aantal;

	/**
	 * The value for the customer_id field.
	 * @var        string
	 */
	protected $customer_id;

	/**
	 * The value for the supplierid field.
	 * @var        string
	 */
	protected $supplierid;

	/**
	 * The value for the date_in field.
	 * @var        string
	 */
	protected $date_in;

	/**
	 * The value for the sn field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $sn;

	/**
	 * The value for the reason field.
	 * @var        string
	 */
	protected $reason;

	/**
	 * The value for the date_done field.
	 * @var        string
	 */
	protected $date_done;

	/**
	 * The value for the additional_items field.
	 * @var        string
	 */
	protected $additional_items;

	/**
	 * The value for the aticle_code field.
	 * @var        int
	 */
	protected $aticle_code;

	/**
	 * The value for the article_name field.
	 * @var        string
	 */
	protected $article_name;

	/**
	 * The value for the factuurid field.
	 * @var        int
	 */
	protected $factuurid;

	/**
	 * The value for the state field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $state;

	/**
	 * The value for the product_customer field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $product_customer;

	/**
	 * The value for the product_location field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $product_location;

	/**
	 * The value for the product_state field.
	 * @var        int
	 */
	protected $product_state;

	/**
	 * The value for the valid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $valid;

	/**
	 * The value for the webuser field.
	 * @var        string
	 */
	protected $webuser;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRma object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->aantal = 1;
		$this->sn = '0';
		$this->state = 1;
		$this->product_customer = 1;
		$this->product_location = 1;
		$this->valid = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [contacts_id] column value.
	 * 
	 * @return     int
	 */
	public function getContactsId()
	{
		return $this->contacts_id;
	}

	/**
	 * Get the [productid] column value.
	 * 
	 * @return     int
	 */
	public function getProductid()
	{
		return $this->productid;
	}

	/**
	 * Get the [aantal] column value.
	 * 
	 * @return     int
	 */
	public function getAantal()
	{
		return $this->aantal;
	}

	/**
	 * Get the [customer_id] column value.
	 * 
	 * @return     string
	 */
	public function getCustomerId()
	{
		return $this->customer_id;
	}

	/**
	 * Get the [supplierid] column value.
	 * 
	 * @return     string
	 */
	public function getSupplierid()
	{
		return $this->supplierid;
	}

	/**
	 * Get the [optionally formatted] temporal [date_in] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateIn($format = 'Y-m-d')
	{
		if ($this->date_in === null) {
			return null;
		}


		if ($this->date_in === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_in);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_in, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [sn] column value.
	 * 
	 * @return     string
	 */
	public function getSn()
	{
		return $this->sn;
	}

	/**
	 * Get the [reason] column value.
	 * 
	 * @return     string
	 */
	public function getReason()
	{
		return $this->reason;
	}

	/**
	 * Get the [optionally formatted] temporal [date_done] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateDone($format = 'Y-m-d')
	{
		if ($this->date_done === null) {
			return null;
		}


		if ($this->date_done === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_done);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_done, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [additional_items] column value.
	 * 
	 * @return     string
	 */
	public function getAdditionalItems()
	{
		return $this->additional_items;
	}

	/**
	 * Get the [aticle_code] column value.
	 * 
	 * @return     int
	 */
	public function getAticleCode()
	{
		return $this->aticle_code;
	}

	/**
	 * Get the [article_name] column value.
	 * 
	 * @return     string
	 */
	public function getArticleName()
	{
		return $this->article_name;
	}

	/**
	 * Get the [factuurid] column value.
	 * 
	 * @return     int
	 */
	public function getFactuurid()
	{
		return $this->factuurid;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     int
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [product_customer] column value.
	 * 
	 * @return     int
	 */
	public function getProductCustomer()
	{
		return $this->product_customer;
	}

	/**
	 * Get the [product_location] column value.
	 * 
	 * @return     int
	 */
	public function getProductLocation()
	{
		return $this->product_location;
	}

	/**
	 * Get the [product_state] column value.
	 * 
	 * @return     int
	 */
	public function getProductState()
	{
		return $this->product_state;
	}

	/**
	 * Get the [valid] column value.
	 * 
	 * @return     int
	 */
	public function getValid()
	{
		return $this->valid;
	}

	/**
	 * Get the [webuser] column value.
	 * 
	 * @return     string
	 */
	public function getWebuser()
	{
		return $this->webuser;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RmaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [contacts_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setContactsId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contacts_id !== $v) {
			$this->contacts_id = $v;
			$this->modifiedColumns[] = RmaPeer::CONTACTS_ID;
		}

		return $this;
	} // setContactsId()

	/**
	 * Set the value of [productid] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setProductid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->productid !== $v) {
			$this->productid = $v;
			$this->modifiedColumns[] = RmaPeer::PRODUCTID;
		}

		return $this;
	} // setProductid()

	/**
	 * Set the value of [aantal] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setAantal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->aantal !== $v || $v === 1) {
			$this->aantal = $v;
			$this->modifiedColumns[] = RmaPeer::AANTAL;
		}

		return $this;
	} // setAantal()

	/**
	 * Set the value of [customer_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setCustomerId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->customer_id !== $v) {
			$this->customer_id = $v;
			$this->modifiedColumns[] = RmaPeer::CUSTOMER_ID;
		}

		return $this;
	} // setCustomerId()

	/**
	 * Set the value of [supplierid] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setSupplierid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->supplierid !== $v) {
			$this->supplierid = $v;
			$this->modifiedColumns[] = RmaPeer::SUPPLIERID;
		}

		return $this;
	} // setSupplierid()

	/**
	 * Sets the value of [date_in] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setDateIn($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_in !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_in !== null && $tmpDt = new DateTime($this->date_in)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_in = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RmaPeer::DATE_IN;
			}
		} // if either are not null

		return $this;
	} // setDateIn()

	/**
	 * Set the value of [sn] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setSn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sn !== $v || $v === '0') {
			$this->sn = $v;
			$this->modifiedColumns[] = RmaPeer::SN;
		}

		return $this;
	} // setSn()

	/**
	 * Set the value of [reason] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setReason($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reason !== $v) {
			$this->reason = $v;
			$this->modifiedColumns[] = RmaPeer::REASON;
		}

		return $this;
	} // setReason()

	/**
	 * Sets the value of [date_done] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setDateDone($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_done !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_done !== null && $tmpDt = new DateTime($this->date_done)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_done = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RmaPeer::DATE_DONE;
			}
		} // if either are not null

		return $this;
	} // setDateDone()

	/**
	 * Set the value of [additional_items] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setAdditionalItems($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->additional_items !== $v) {
			$this->additional_items = $v;
			$this->modifiedColumns[] = RmaPeer::ADDITIONAL_ITEMS;
		}

		return $this;
	} // setAdditionalItems()

	/**
	 * Set the value of [aticle_code] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setAticleCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->aticle_code !== $v) {
			$this->aticle_code = $v;
			$this->modifiedColumns[] = RmaPeer::ATICLE_CODE;
		}

		return $this;
	} // setAticleCode()

	/**
	 * Set the value of [article_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setArticleName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->article_name !== $v) {
			$this->article_name = $v;
			$this->modifiedColumns[] = RmaPeer::ARTICLE_NAME;
		}

		return $this;
	} // setArticleName()

	/**
	 * Set the value of [factuurid] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setFactuurid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->factuurid !== $v) {
			$this->factuurid = $v;
			$this->modifiedColumns[] = RmaPeer::FACTUURID;
		}

		return $this;
	} // setFactuurid()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state !== $v || $v === 1) {
			$this->state = $v;
			$this->modifiedColumns[] = RmaPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [product_customer] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setProductCustomer($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_customer !== $v || $v === 1) {
			$this->product_customer = $v;
			$this->modifiedColumns[] = RmaPeer::PRODUCT_CUSTOMER;
		}

		return $this;
	} // setProductCustomer()

	/**
	 * Set the value of [product_location] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setProductLocation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_location !== $v || $v === 1) {
			$this->product_location = $v;
			$this->modifiedColumns[] = RmaPeer::PRODUCT_LOCATION;
		}

		return $this;
	} // setProductLocation()

	/**
	 * Set the value of [product_state] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setProductState($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_state !== $v) {
			$this->product_state = $v;
			$this->modifiedColumns[] = RmaPeer::PRODUCT_STATE;
		}

		return $this;
	} // setProductState()

	/**
	 * Set the value of [valid] column.
	 * 
	 * @param      int $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setValid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->valid !== $v || $v === 0) {
			$this->valid = $v;
			$this->modifiedColumns[] = RmaPeer::VALID;
		}

		return $this;
	} // setValid()

	/**
	 * Set the value of [webuser] column.
	 * 
	 * @param      string $v new value
	 * @return     Rma The current object (for fluent API support)
	 */
	public function setWebuser($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->webuser !== $v) {
			$this->webuser = $v;
			$this->modifiedColumns[] = RmaPeer::WEBUSER;
		}

		return $this;
	} // setWebuser()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RmaPeer::AANTAL,RmaPeer::SN,RmaPeer::STATE,RmaPeer::PRODUCT_CUSTOMER,RmaPeer::PRODUCT_LOCATION,RmaPeer::VALID))) {
				return false;
			}

			if ($this->aantal !== 1) {
				return false;
			}

			if ($this->sn !== '0') {
				return false;
			}

			if ($this->state !== 1) {
				return false;
			}

			if ($this->product_customer !== 1) {
				return false;
			}

			if ($this->product_location !== 1) {
				return false;
			}

			if ($this->valid !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->contacts_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->productid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->aantal = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->customer_id = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->supplierid = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->date_in = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->sn = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->reason = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->date_done = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->additional_items = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->aticle_code = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->article_name = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->factuurid = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->state = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->product_customer = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->product_location = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->product_state = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->valid = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->webuser = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 20; // 20 = RmaPeer::NUM_COLUMNS - RmaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Rma object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RmaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RmaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRma:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RmaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RmaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRma:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRma:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RmaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRma:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RmaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RmaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RmaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RmaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RmaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RmaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getContactsId();
				break;
			case 2:
				return $this->getProductid();
				break;
			case 3:
				return $this->getAantal();
				break;
			case 4:
				return $this->getCustomerId();
				break;
			case 5:
				return $this->getSupplierid();
				break;
			case 6:
				return $this->getDateIn();
				break;
			case 7:
				return $this->getSn();
				break;
			case 8:
				return $this->getReason();
				break;
			case 9:
				return $this->getDateDone();
				break;
			case 10:
				return $this->getAdditionalItems();
				break;
			case 11:
				return $this->getAticleCode();
				break;
			case 12:
				return $this->getArticleName();
				break;
			case 13:
				return $this->getFactuurid();
				break;
			case 14:
				return $this->getState();
				break;
			case 15:
				return $this->getProductCustomer();
				break;
			case 16:
				return $this->getProductLocation();
				break;
			case 17:
				return $this->getProductState();
				break;
			case 18:
				return $this->getValid();
				break;
			case 19:
				return $this->getWebuser();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RmaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getContactsId(),
			$keys[2] => $this->getProductid(),
			$keys[3] => $this->getAantal(),
			$keys[4] => $this->getCustomerId(),
			$keys[5] => $this->getSupplierid(),
			$keys[6] => $this->getDateIn(),
			$keys[7] => $this->getSn(),
			$keys[8] => $this->getReason(),
			$keys[9] => $this->getDateDone(),
			$keys[10] => $this->getAdditionalItems(),
			$keys[11] => $this->getAticleCode(),
			$keys[12] => $this->getArticleName(),
			$keys[13] => $this->getFactuurid(),
			$keys[14] => $this->getState(),
			$keys[15] => $this->getProductCustomer(),
			$keys[16] => $this->getProductLocation(),
			$keys[17] => $this->getProductState(),
			$keys[18] => $this->getValid(),
			$keys[19] => $this->getWebuser(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RmaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setContactsId($value);
				break;
			case 2:
				$this->setProductid($value);
				break;
			case 3:
				$this->setAantal($value);
				break;
			case 4:
				$this->setCustomerId($value);
				break;
			case 5:
				$this->setSupplierid($value);
				break;
			case 6:
				$this->setDateIn($value);
				break;
			case 7:
				$this->setSn($value);
				break;
			case 8:
				$this->setReason($value);
				break;
			case 9:
				$this->setDateDone($value);
				break;
			case 10:
				$this->setAdditionalItems($value);
				break;
			case 11:
				$this->setAticleCode($value);
				break;
			case 12:
				$this->setArticleName($value);
				break;
			case 13:
				$this->setFactuurid($value);
				break;
			case 14:
				$this->setState($value);
				break;
			case 15:
				$this->setProductCustomer($value);
				break;
			case 16:
				$this->setProductLocation($value);
				break;
			case 17:
				$this->setProductState($value);
				break;
			case 18:
				$this->setValid($value);
				break;
			case 19:
				$this->setWebuser($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RmaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setContactsId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProductid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAantal($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCustomerId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSupplierid($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDateIn($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSn($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setReason($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDateDone($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAdditionalItems($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAticleCode($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setArticleName($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFactuurid($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setState($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setProductCustomer($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setProductLocation($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setProductState($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setValid($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setWebuser($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RmaPeer::DATABASE_NAME);

		if ($this->isColumnModified(RmaPeer::ID)) $criteria->add(RmaPeer::ID, $this->id);
		if ($this->isColumnModified(RmaPeer::CONTACTS_ID)) $criteria->add(RmaPeer::CONTACTS_ID, $this->contacts_id);
		if ($this->isColumnModified(RmaPeer::PRODUCTID)) $criteria->add(RmaPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(RmaPeer::AANTAL)) $criteria->add(RmaPeer::AANTAL, $this->aantal);
		if ($this->isColumnModified(RmaPeer::CUSTOMER_ID)) $criteria->add(RmaPeer::CUSTOMER_ID, $this->customer_id);
		if ($this->isColumnModified(RmaPeer::SUPPLIERID)) $criteria->add(RmaPeer::SUPPLIERID, $this->supplierid);
		if ($this->isColumnModified(RmaPeer::DATE_IN)) $criteria->add(RmaPeer::DATE_IN, $this->date_in);
		if ($this->isColumnModified(RmaPeer::SN)) $criteria->add(RmaPeer::SN, $this->sn);
		if ($this->isColumnModified(RmaPeer::REASON)) $criteria->add(RmaPeer::REASON, $this->reason);
		if ($this->isColumnModified(RmaPeer::DATE_DONE)) $criteria->add(RmaPeer::DATE_DONE, $this->date_done);
		if ($this->isColumnModified(RmaPeer::ADDITIONAL_ITEMS)) $criteria->add(RmaPeer::ADDITIONAL_ITEMS, $this->additional_items);
		if ($this->isColumnModified(RmaPeer::ATICLE_CODE)) $criteria->add(RmaPeer::ATICLE_CODE, $this->aticle_code);
		if ($this->isColumnModified(RmaPeer::ARTICLE_NAME)) $criteria->add(RmaPeer::ARTICLE_NAME, $this->article_name);
		if ($this->isColumnModified(RmaPeer::FACTUURID)) $criteria->add(RmaPeer::FACTUURID, $this->factuurid);
		if ($this->isColumnModified(RmaPeer::STATE)) $criteria->add(RmaPeer::STATE, $this->state);
		if ($this->isColumnModified(RmaPeer::PRODUCT_CUSTOMER)) $criteria->add(RmaPeer::PRODUCT_CUSTOMER, $this->product_customer);
		if ($this->isColumnModified(RmaPeer::PRODUCT_LOCATION)) $criteria->add(RmaPeer::PRODUCT_LOCATION, $this->product_location);
		if ($this->isColumnModified(RmaPeer::PRODUCT_STATE)) $criteria->add(RmaPeer::PRODUCT_STATE, $this->product_state);
		if ($this->isColumnModified(RmaPeer::VALID)) $criteria->add(RmaPeer::VALID, $this->valid);
		if ($this->isColumnModified(RmaPeer::WEBUSER)) $criteria->add(RmaPeer::WEBUSER, $this->webuser);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RmaPeer::DATABASE_NAME);

		$criteria->add(RmaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Rma (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setContactsId($this->contacts_id);

		$copyObj->setProductid($this->productid);

		$copyObj->setAantal($this->aantal);

		$copyObj->setCustomerId($this->customer_id);

		$copyObj->setSupplierid($this->supplierid);

		$copyObj->setDateIn($this->date_in);

		$copyObj->setSn($this->sn);

		$copyObj->setReason($this->reason);

		$copyObj->setDateDone($this->date_done);

		$copyObj->setAdditionalItems($this->additional_items);

		$copyObj->setAticleCode($this->aticle_code);

		$copyObj->setArticleName($this->article_name);

		$copyObj->setFactuurid($this->factuurid);

		$copyObj->setState($this->state);

		$copyObj->setProductCustomer($this->product_customer);

		$copyObj->setProductLocation($this->product_location);

		$copyObj->setProductState($this->product_state);

		$copyObj->setValid($this->valid);

		$copyObj->setWebuser($this->webuser);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Rma Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RmaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RmaPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRma:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRma::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRma
