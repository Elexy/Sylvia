<?php

/**
 * Base class that represents a row from the 'users' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:41 2009
 *
 * @package    lib.model.om
 */
abstract class BaseUsers extends BaseObject  implements Persistent {


  const PEER = 'UsersPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsersPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the contactid field.
	 * @var        int
	 */
	protected $contactid;

	/**
	 * The value for the companyname field.
	 * @var        string
	 */
	protected $companyname;

	/**
	 * The value for the uid field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $uid;

	/**
	 * The value for the pwd field.
	 * @var        string
	 */
	protected $pwd;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the languageid field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $languageid;

	/**
	 * The value for the rma field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $rma;

	/**
	 * The value for the purchase field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $purchase;

	/**
	 * The value for the stock field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $stock;

	/**
	 * The value for the logins field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $logins;

	/**
	 * The value for the login_attempts field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $login_attempts;

	/**
	 * The value for the passw_change_attempts field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $passw_change_attempts;

	/**
	 * The value for the last_online field.
	 * @var        string
	 */
	protected $last_online;

	/**
	 * The value for the total_logins field.
	 * @var        int
	 */
	protected $total_logins;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUsers object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->uid = '';
		$this->languageid = 1;
		$this->rma = 0;
		$this->purchase = 0;
		$this->stock = 0;
		$this->logins = 0;
		$this->login_attempts = 0;
		$this->passw_change_attempts = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [contactid] column value.
	 * 
	 * @return     int
	 */
	public function getContactid()
	{
		return $this->contactid;
	}

	/**
	 * Get the [companyname] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyname()
	{
		return $this->companyname;
	}

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     string
	 */
	public function getUid()
	{
		return $this->uid;
	}

	/**
	 * Get the [pwd] column value.
	 * 
	 * @return     string
	 */
	public function getPwd()
	{
		return $this->pwd;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [languageid] column value.
	 * 
	 * @return     int
	 */
	public function getLanguageid()
	{
		return $this->languageid;
	}

	/**
	 * Get the [rma] column value.
	 * 
	 * @return     int
	 */
	public function getRma()
	{
		return $this->rma;
	}

	/**
	 * Get the [purchase] column value.
	 * 
	 * @return     int
	 */
	public function getPurchase()
	{
		return $this->purchase;
	}

	/**
	 * Get the [stock] column value.
	 * 
	 * @return     int
	 */
	public function getStock()
	{
		return $this->stock;
	}

	/**
	 * Get the [logins] column value.
	 * 
	 * @return     int
	 */
	public function getLogins()
	{
		return $this->logins;
	}

	/**
	 * Get the [login_attempts] column value.
	 * 
	 * @return     int
	 */
	public function getLoginAttempts()
	{
		return $this->login_attempts;
	}

	/**
	 * Get the [passw_change_attempts] column value.
	 * 
	 * @return     int
	 */
	public function getPasswChangeAttempts()
	{
		return $this->passw_change_attempts;
	}

	/**
	 * Get the [optionally formatted] temporal [last_online] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastOnline($format = 'Y-m-d H:i:s')
	{
		if ($this->last_online === null) {
			return null;
		}


		if ($this->last_online === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_online);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_online, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [total_logins] column value.
	 * 
	 * @return     int
	 */
	public function getTotalLogins()
	{
		return $this->total_logins;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UsersPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [contactid] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setContactid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contactid !== $v) {
			$this->contactid = $v;
			$this->modifiedColumns[] = UsersPeer::CONTACTID;
		}

		return $this;
	} // setContactid()

	/**
	 * Set the value of [companyname] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companyname !== $v) {
			$this->companyname = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANYNAME;
		}

		return $this;
	} // setCompanyname()

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uid !== $v || $v === '') {
			$this->uid = $v;
			$this->modifiedColumns[] = UsersPeer::UID;
		}

		return $this;
	} // setUid()

	/**
	 * Set the value of [pwd] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPwd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pwd !== $v) {
			$this->pwd = $v;
			$this->modifiedColumns[] = UsersPeer::PWD;
		}

		return $this;
	} // setPwd()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UsersPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [languageid] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLanguageid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->languageid !== $v || $v === 1) {
			$this->languageid = $v;
			$this->modifiedColumns[] = UsersPeer::LANGUAGEID;
		}

		return $this;
	} // setLanguageid()

	/**
	 * Set the value of [rma] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setRma($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rma !== $v || $v === 0) {
			$this->rma = $v;
			$this->modifiedColumns[] = UsersPeer::RMA;
		}

		return $this;
	} // setRma()

	/**
	 * Set the value of [purchase] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPurchase($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->purchase !== $v || $v === 0) {
			$this->purchase = $v;
			$this->modifiedColumns[] = UsersPeer::PURCHASE;
		}

		return $this;
	} // setPurchase()

	/**
	 * Set the value of [stock] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setStock($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->stock !== $v || $v === 0) {
			$this->stock = $v;
			$this->modifiedColumns[] = UsersPeer::STOCK;
		}

		return $this;
	} // setStock()

	/**
	 * Set the value of [logins] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLogins($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->logins !== $v || $v === 0) {
			$this->logins = $v;
			$this->modifiedColumns[] = UsersPeer::LOGINS;
		}

		return $this;
	} // setLogins()

	/**
	 * Set the value of [login_attempts] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLoginAttempts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->login_attempts !== $v || $v === 0) {
			$this->login_attempts = $v;
			$this->modifiedColumns[] = UsersPeer::LOGIN_ATTEMPTS;
		}

		return $this;
	} // setLoginAttempts()

	/**
	 * Set the value of [passw_change_attempts] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPasswChangeAttempts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passw_change_attempts !== $v || $v === 0) {
			$this->passw_change_attempts = $v;
			$this->modifiedColumns[] = UsersPeer::PASSW_CHANGE_ATTEMPTS;
		}

		return $this;
	} // setPasswChangeAttempts()

	/**
	 * Sets the value of [last_online] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLastOnline($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_online !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_online !== null && $tmpDt = new DateTime($this->last_online)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_online = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::LAST_ONLINE;
			}
		} // if either are not null

		return $this;
	} // setLastOnline()

	/**
	 * Set the value of [total_logins] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setTotalLogins($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->total_logins !== $v) {
			$this->total_logins = $v;
			$this->modifiedColumns[] = UsersPeer::TOTAL_LOGINS;
		}

		return $this;
	} // setTotalLogins()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(UsersPeer::UID,UsersPeer::LANGUAGEID,UsersPeer::RMA,UsersPeer::PURCHASE,UsersPeer::STOCK,UsersPeer::LOGINS,UsersPeer::LOGIN_ATTEMPTS,UsersPeer::PASSW_CHANGE_ATTEMPTS))) {
				return false;
			}

			if ($this->uid !== '') {
				return false;
			}

			if ($this->languageid !== 1) {
				return false;
			}

			if ($this->rma !== 0) {
				return false;
			}

			if ($this->purchase !== 0) {
				return false;
			}

			if ($this->stock !== 0) {
				return false;
			}

			if ($this->logins !== 0) {
				return false;
			}

			if ($this->login_attempts !== 0) {
				return false;
			}

			if ($this->passw_change_attempts !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->contactid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->companyname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->uid = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->pwd = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->email = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->languageid = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->rma = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->purchase = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->stock = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->logins = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->login_attempts = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->passw_change_attempts = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->last_online = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->total_logins = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 15; // 15 = UsersPeer::NUM_COLUMNS - UsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Users object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsers:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UsersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUsers:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsers:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUsers:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UsersPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsersPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UsersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getContactid();
				break;
			case 2:
				return $this->getCompanyname();
				break;
			case 3:
				return $this->getUid();
				break;
			case 4:
				return $this->getPwd();
				break;
			case 5:
				return $this->getEmail();
				break;
			case 6:
				return $this->getLanguageid();
				break;
			case 7:
				return $this->getRma();
				break;
			case 8:
				return $this->getPurchase();
				break;
			case 9:
				return $this->getStock();
				break;
			case 10:
				return $this->getLogins();
				break;
			case 11:
				return $this->getLoginAttempts();
				break;
			case 12:
				return $this->getPasswChangeAttempts();
				break;
			case 13:
				return $this->getLastOnline();
				break;
			case 14:
				return $this->getTotalLogins();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getContactid(),
			$keys[2] => $this->getCompanyname(),
			$keys[3] => $this->getUid(),
			$keys[4] => $this->getPwd(),
			$keys[5] => $this->getEmail(),
			$keys[6] => $this->getLanguageid(),
			$keys[7] => $this->getRma(),
			$keys[8] => $this->getPurchase(),
			$keys[9] => $this->getStock(),
			$keys[10] => $this->getLogins(),
			$keys[11] => $this->getLoginAttempts(),
			$keys[12] => $this->getPasswChangeAttempts(),
			$keys[13] => $this->getLastOnline(),
			$keys[14] => $this->getTotalLogins(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setContactid($value);
				break;
			case 2:
				$this->setCompanyname($value);
				break;
			case 3:
				$this->setUid($value);
				break;
			case 4:
				$this->setPwd($value);
				break;
			case 5:
				$this->setEmail($value);
				break;
			case 6:
				$this->setLanguageid($value);
				break;
			case 7:
				$this->setRma($value);
				break;
			case 8:
				$this->setPurchase($value);
				break;
			case 9:
				$this->setStock($value);
				break;
			case 10:
				$this->setLogins($value);
				break;
			case 11:
				$this->setLoginAttempts($value);
				break;
			case 12:
				$this->setPasswChangeAttempts($value);
				break;
			case 13:
				$this->setLastOnline($value);
				break;
			case 14:
				$this->setTotalLogins($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setContactid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCompanyname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUid($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPwd($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setEmail($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLanguageid($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setRma($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPurchase($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setStock($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setLogins($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setLoginAttempts($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPasswChangeAttempts($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLastOnline($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTotalLogins($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsersPeer::ID)) $criteria->add(UsersPeer::ID, $this->id);
		if ($this->isColumnModified(UsersPeer::CONTACTID)) $criteria->add(UsersPeer::CONTACTID, $this->contactid);
		if ($this->isColumnModified(UsersPeer::COMPANYNAME)) $criteria->add(UsersPeer::COMPANYNAME, $this->companyname);
		if ($this->isColumnModified(UsersPeer::UID)) $criteria->add(UsersPeer::UID, $this->uid);
		if ($this->isColumnModified(UsersPeer::PWD)) $criteria->add(UsersPeer::PWD, $this->pwd);
		if ($this->isColumnModified(UsersPeer::EMAIL)) $criteria->add(UsersPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UsersPeer::LANGUAGEID)) $criteria->add(UsersPeer::LANGUAGEID, $this->languageid);
		if ($this->isColumnModified(UsersPeer::RMA)) $criteria->add(UsersPeer::RMA, $this->rma);
		if ($this->isColumnModified(UsersPeer::PURCHASE)) $criteria->add(UsersPeer::PURCHASE, $this->purchase);
		if ($this->isColumnModified(UsersPeer::STOCK)) $criteria->add(UsersPeer::STOCK, $this->stock);
		if ($this->isColumnModified(UsersPeer::LOGINS)) $criteria->add(UsersPeer::LOGINS, $this->logins);
		if ($this->isColumnModified(UsersPeer::LOGIN_ATTEMPTS)) $criteria->add(UsersPeer::LOGIN_ATTEMPTS, $this->login_attempts);
		if ($this->isColumnModified(UsersPeer::PASSW_CHANGE_ATTEMPTS)) $criteria->add(UsersPeer::PASSW_CHANGE_ATTEMPTS, $this->passw_change_attempts);
		if ($this->isColumnModified(UsersPeer::LAST_ONLINE)) $criteria->add(UsersPeer::LAST_ONLINE, $this->last_online);
		if ($this->isColumnModified(UsersPeer::TOTAL_LOGINS)) $criteria->add(UsersPeer::TOTAL_LOGINS, $this->total_logins);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		$criteria->add(UsersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Users (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setContactid($this->contactid);

		$copyObj->setCompanyname($this->companyname);

		$copyObj->setUid($this->uid);

		$copyObj->setPwd($this->pwd);

		$copyObj->setEmail($this->email);

		$copyObj->setLanguageid($this->languageid);

		$copyObj->setRma($this->rma);

		$copyObj->setPurchase($this->purchase);

		$copyObj->setStock($this->stock);

		$copyObj->setLogins($this->logins);

		$copyObj->setLoginAttempts($this->login_attempts);

		$copyObj->setPasswChangeAttempts($this->passw_change_attempts);

		$copyObj->setLastOnline($this->last_online);

		$copyObj->setTotalLogins($this->total_logins);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Users Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUsers:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUsers::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUsers
