<?php

/**
 * Base class that represents a row from the 'commited' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:35 2009
 *
 * @package    lib.model.om
 */
abstract class BaseCommited extends BaseObject  implements Persistent {


  const PEER = 'CommitedPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CommitedPeer
	 */
	protected static $peer;

	/**
	 * The value for the orderdetailsid field.
	 * @var        int
	 */
	protected $orderdetailsid;

	/**
	 * The value for the orderid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $orderid;

	/**
	 * The value for the productid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $productid;

	/**
	 * The value for the productname field.
	 * @var        string
	 */
	protected $productname;

	/**
	 * The value for the productdescription field.
	 * @var        string
	 */
	protected $productdescription;

	/**
	 * The value for the unitprice field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $unitprice;

	/**
	 * The value for the unitbtw field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $unitbtw;

	/**
	 * The value for the quantity field.
	 * @var        int
	 */
	protected $quantity;

	/**
	 * The value for the extended_price field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $extended_price;

	/**
	 * The value for the discount field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $discount;

	/**
	 * The value for the serialnb field.
	 * @var        string
	 */
	protected $serialnb;

	/**
	 * The value for the shipid field.
	 * @var        int
	 */
	protected $shipid;

	/**
	 * The value for the orderdate field.
	 * @var        string
	 */
	protected $orderdate;

	/**
	 * The value for the btw_percentage field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $btw_percentage;

	/**
	 * The value for the cost_percentage field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $cost_percentage;

	/**
	 * The value for the delivered field.
	 * @var        int
	 */
	protected $delivered;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCommited object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->orderid = 0;
		$this->productid = 0;
		$this->unitprice = '0.00';
		$this->unitbtw = '0.00';
		$this->extended_price = '0.00';
		$this->discount = '0.00';
		$this->btw_percentage = '0.00';
		$this->cost_percentage = 0;
	}

	/**
	 * Get the [orderdetailsid] column value.
	 * 
	 * @return     int
	 */
	public function getOrderdetailsid()
	{
		return $this->orderdetailsid;
	}

	/**
	 * Get the [orderid] column value.
	 * 
	 * @return     int
	 */
	public function getOrderid()
	{
		return $this->orderid;
	}

	/**
	 * Get the [productid] column value.
	 * 
	 * @return     int
	 */
	public function getProductid()
	{
		return $this->productid;
	}

	/**
	 * Get the [productname] column value.
	 * 
	 * @return     string
	 */
	public function getProductname()
	{
		return $this->productname;
	}

	/**
	 * Get the [productdescription] column value.
	 * 
	 * @return     string
	 */
	public function getProductdescription()
	{
		return $this->productdescription;
	}

	/**
	 * Get the [unitprice] column value.
	 * 
	 * @return     string
	 */
	public function getUnitprice()
	{
		return $this->unitprice;
	}

	/**
	 * Get the [unitbtw] column value.
	 * 
	 * @return     string
	 */
	public function getUnitbtw()
	{
		return $this->unitbtw;
	}

	/**
	 * Get the [quantity] column value.
	 * 
	 * @return     int
	 */
	public function getQuantity()
	{
		return $this->quantity;
	}

	/**
	 * Get the [extended_price] column value.
	 * 
	 * @return     string
	 */
	public function getExtendedPrice()
	{
		return $this->extended_price;
	}

	/**
	 * Get the [discount] column value.
	 * 
	 * @return     string
	 */
	public function getDiscount()
	{
		return $this->discount;
	}

	/**
	 * Get the [serialnb] column value.
	 * 
	 * @return     string
	 */
	public function getSerialnb()
	{
		return $this->serialnb;
	}

	/**
	 * Get the [shipid] column value.
	 * 
	 * @return     int
	 */
	public function getShipid()
	{
		return $this->shipid;
	}

	/**
	 * Get the [optionally formatted] temporal [orderdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getOrderdate($format = 'Y-m-d')
	{
		if ($this->orderdate === null) {
			return null;
		}


		if ($this->orderdate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->orderdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->orderdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [btw_percentage] column value.
	 * 
	 * @return     string
	 */
	public function getBtwPercentage()
	{
		return $this->btw_percentage;
	}

	/**
	 * Get the [cost_percentage] column value.
	 * 
	 * @return     double
	 */
	public function getCostPercentage()
	{
		return $this->cost_percentage;
	}

	/**
	 * Get the [delivered] column value.
	 * 
	 * @return     int
	 */
	public function getDelivered()
	{
		return $this->delivered;
	}

	/**
	 * Set the value of [orderdetailsid] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setOrderdetailsid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orderdetailsid !== $v) {
			$this->orderdetailsid = $v;
			$this->modifiedColumns[] = CommitedPeer::ORDERDETAILSID;
		}

		return $this;
	} // setOrderdetailsid()

	/**
	 * Set the value of [orderid] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setOrderid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orderid !== $v || $v === 0) {
			$this->orderid = $v;
			$this->modifiedColumns[] = CommitedPeer::ORDERID;
		}

		return $this;
	} // setOrderid()

	/**
	 * Set the value of [productid] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setProductid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->productid !== $v || $v === 0) {
			$this->productid = $v;
			$this->modifiedColumns[] = CommitedPeer::PRODUCTID;
		}

		return $this;
	} // setProductid()

	/**
	 * Set the value of [productname] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setProductname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productname !== $v) {
			$this->productname = $v;
			$this->modifiedColumns[] = CommitedPeer::PRODUCTNAME;
		}

		return $this;
	} // setProductname()

	/**
	 * Set the value of [productdescription] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setProductdescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productdescription !== $v) {
			$this->productdescription = $v;
			$this->modifiedColumns[] = CommitedPeer::PRODUCTDESCRIPTION;
		}

		return $this;
	} // setProductdescription()

	/**
	 * Set the value of [unitprice] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setUnitprice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->unitprice !== $v || $v === '0.00') {
			$this->unitprice = $v;
			$this->modifiedColumns[] = CommitedPeer::UNITPRICE;
		}

		return $this;
	} // setUnitprice()

	/**
	 * Set the value of [unitbtw] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setUnitbtw($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->unitbtw !== $v || $v === '0.00') {
			$this->unitbtw = $v;
			$this->modifiedColumns[] = CommitedPeer::UNITBTW;
		}

		return $this;
	} // setUnitbtw()

	/**
	 * Set the value of [quantity] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setQuantity($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->quantity !== $v) {
			$this->quantity = $v;
			$this->modifiedColumns[] = CommitedPeer::QUANTITY;
		}

		return $this;
	} // setQuantity()

	/**
	 * Set the value of [extended_price] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setExtendedPrice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extended_price !== $v || $v === '0.00') {
			$this->extended_price = $v;
			$this->modifiedColumns[] = CommitedPeer::EXTENDED_PRICE;
		}

		return $this;
	} // setExtendedPrice()

	/**
	 * Set the value of [discount] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setDiscount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->discount !== $v || $v === '0.00') {
			$this->discount = $v;
			$this->modifiedColumns[] = CommitedPeer::DISCOUNT;
		}

		return $this;
	} // setDiscount()

	/**
	 * Set the value of [serialnb] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setSerialnb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->serialnb !== $v) {
			$this->serialnb = $v;
			$this->modifiedColumns[] = CommitedPeer::SERIALNB;
		}

		return $this;
	} // setSerialnb()

	/**
	 * Set the value of [shipid] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setShipid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->shipid !== $v) {
			$this->shipid = $v;
			$this->modifiedColumns[] = CommitedPeer::SHIPID;
		}

		return $this;
	} // setShipid()

	/**
	 * Sets the value of [orderdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setOrderdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->orderdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->orderdate !== null && $tmpDt = new DateTime($this->orderdate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->orderdate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CommitedPeer::ORDERDATE;
			}
		} // if either are not null

		return $this;
	} // setOrderdate()

	/**
	 * Set the value of [btw_percentage] column.
	 * 
	 * @param      string $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setBtwPercentage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->btw_percentage !== $v || $v === '0.00') {
			$this->btw_percentage = $v;
			$this->modifiedColumns[] = CommitedPeer::BTW_PERCENTAGE;
		}

		return $this;
	} // setBtwPercentage()

	/**
	 * Set the value of [cost_percentage] column.
	 * 
	 * @param      double $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setCostPercentage($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->cost_percentage !== $v || $v === 0) {
			$this->cost_percentage = $v;
			$this->modifiedColumns[] = CommitedPeer::COST_PERCENTAGE;
		}

		return $this;
	} // setCostPercentage()

	/**
	 * Set the value of [delivered] column.
	 * 
	 * @param      int $v new value
	 * @return     Commited The current object (for fluent API support)
	 */
	public function setDelivered($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->delivered !== $v) {
			$this->delivered = $v;
			$this->modifiedColumns[] = CommitedPeer::DELIVERED;
		}

		return $this;
	} // setDelivered()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CommitedPeer::ORDERID,CommitedPeer::PRODUCTID,CommitedPeer::UNITPRICE,CommitedPeer::UNITBTW,CommitedPeer::EXTENDED_PRICE,CommitedPeer::DISCOUNT,CommitedPeer::BTW_PERCENTAGE,CommitedPeer::COST_PERCENTAGE))) {
				return false;
			}

			if ($this->orderid !== 0) {
				return false;
			}

			if ($this->productid !== 0) {
				return false;
			}

			if ($this->unitprice !== '0.00') {
				return false;
			}

			if ($this->unitbtw !== '0.00') {
				return false;
			}

			if ($this->extended_price !== '0.00') {
				return false;
			}

			if ($this->discount !== '0.00') {
				return false;
			}

			if ($this->btw_percentage !== '0.00') {
				return false;
			}

			if ($this->cost_percentage !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->orderdetailsid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->orderid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->productid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->productname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->productdescription = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->unitprice = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->unitbtw = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->quantity = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->extended_price = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->discount = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->serialnb = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->shipid = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->orderdate = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->btw_percentage = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cost_percentage = ($row[$startcol + 14] !== null) ? (double) $row[$startcol + 14] : null;
			$this->delivered = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = CommitedPeer::NUM_COLUMNS - CommitedPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Commited object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CommitedPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CommitedPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCommited:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CommitedPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CommitedPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCommited:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCommited:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CommitedPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCommited:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CommitedPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CommitedPeer::ORDERDETAILSID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CommitedPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setOrderdetailsid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CommitedPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CommitedPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CommitedPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getOrderdetailsid();
				break;
			case 1:
				return $this->getOrderid();
				break;
			case 2:
				return $this->getProductid();
				break;
			case 3:
				return $this->getProductname();
				break;
			case 4:
				return $this->getProductdescription();
				break;
			case 5:
				return $this->getUnitprice();
				break;
			case 6:
				return $this->getUnitbtw();
				break;
			case 7:
				return $this->getQuantity();
				break;
			case 8:
				return $this->getExtendedPrice();
				break;
			case 9:
				return $this->getDiscount();
				break;
			case 10:
				return $this->getSerialnb();
				break;
			case 11:
				return $this->getShipid();
				break;
			case 12:
				return $this->getOrderdate();
				break;
			case 13:
				return $this->getBtwPercentage();
				break;
			case 14:
				return $this->getCostPercentage();
				break;
			case 15:
				return $this->getDelivered();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CommitedPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getOrderdetailsid(),
			$keys[1] => $this->getOrderid(),
			$keys[2] => $this->getProductid(),
			$keys[3] => $this->getProductname(),
			$keys[4] => $this->getProductdescription(),
			$keys[5] => $this->getUnitprice(),
			$keys[6] => $this->getUnitbtw(),
			$keys[7] => $this->getQuantity(),
			$keys[8] => $this->getExtendedPrice(),
			$keys[9] => $this->getDiscount(),
			$keys[10] => $this->getSerialnb(),
			$keys[11] => $this->getShipid(),
			$keys[12] => $this->getOrderdate(),
			$keys[13] => $this->getBtwPercentage(),
			$keys[14] => $this->getCostPercentage(),
			$keys[15] => $this->getDelivered(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CommitedPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setOrderdetailsid($value);
				break;
			case 1:
				$this->setOrderid($value);
				break;
			case 2:
				$this->setProductid($value);
				break;
			case 3:
				$this->setProductname($value);
				break;
			case 4:
				$this->setProductdescription($value);
				break;
			case 5:
				$this->setUnitprice($value);
				break;
			case 6:
				$this->setUnitbtw($value);
				break;
			case 7:
				$this->setQuantity($value);
				break;
			case 8:
				$this->setExtendedPrice($value);
				break;
			case 9:
				$this->setDiscount($value);
				break;
			case 10:
				$this->setSerialnb($value);
				break;
			case 11:
				$this->setShipid($value);
				break;
			case 12:
				$this->setOrderdate($value);
				break;
			case 13:
				$this->setBtwPercentage($value);
				break;
			case 14:
				$this->setCostPercentage($value);
				break;
			case 15:
				$this->setDelivered($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CommitedPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setOrderdetailsid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setOrderid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProductid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProductname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProductdescription($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUnitprice($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUnitbtw($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setQuantity($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setExtendedPrice($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDiscount($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSerialnb($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setShipid($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOrderdate($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setBtwPercentage($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCostPercentage($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDelivered($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CommitedPeer::DATABASE_NAME);

		if ($this->isColumnModified(CommitedPeer::ORDERDETAILSID)) $criteria->add(CommitedPeer::ORDERDETAILSID, $this->orderdetailsid);
		if ($this->isColumnModified(CommitedPeer::ORDERID)) $criteria->add(CommitedPeer::ORDERID, $this->orderid);
		if ($this->isColumnModified(CommitedPeer::PRODUCTID)) $criteria->add(CommitedPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(CommitedPeer::PRODUCTNAME)) $criteria->add(CommitedPeer::PRODUCTNAME, $this->productname);
		if ($this->isColumnModified(CommitedPeer::PRODUCTDESCRIPTION)) $criteria->add(CommitedPeer::PRODUCTDESCRIPTION, $this->productdescription);
		if ($this->isColumnModified(CommitedPeer::UNITPRICE)) $criteria->add(CommitedPeer::UNITPRICE, $this->unitprice);
		if ($this->isColumnModified(CommitedPeer::UNITBTW)) $criteria->add(CommitedPeer::UNITBTW, $this->unitbtw);
		if ($this->isColumnModified(CommitedPeer::QUANTITY)) $criteria->add(CommitedPeer::QUANTITY, $this->quantity);
		if ($this->isColumnModified(CommitedPeer::EXTENDED_PRICE)) $criteria->add(CommitedPeer::EXTENDED_PRICE, $this->extended_price);
		if ($this->isColumnModified(CommitedPeer::DISCOUNT)) $criteria->add(CommitedPeer::DISCOUNT, $this->discount);
		if ($this->isColumnModified(CommitedPeer::SERIALNB)) $criteria->add(CommitedPeer::SERIALNB, $this->serialnb);
		if ($this->isColumnModified(CommitedPeer::SHIPID)) $criteria->add(CommitedPeer::SHIPID, $this->shipid);
		if ($this->isColumnModified(CommitedPeer::ORDERDATE)) $criteria->add(CommitedPeer::ORDERDATE, $this->orderdate);
		if ($this->isColumnModified(CommitedPeer::BTW_PERCENTAGE)) $criteria->add(CommitedPeer::BTW_PERCENTAGE, $this->btw_percentage);
		if ($this->isColumnModified(CommitedPeer::COST_PERCENTAGE)) $criteria->add(CommitedPeer::COST_PERCENTAGE, $this->cost_percentage);
		if ($this->isColumnModified(CommitedPeer::DELIVERED)) $criteria->add(CommitedPeer::DELIVERED, $this->delivered);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CommitedPeer::DATABASE_NAME);

		$criteria->add(CommitedPeer::ORDERDETAILSID, $this->orderdetailsid);
		$criteria->add(CommitedPeer::ORDERID, $this->orderid);
		$criteria->add(CommitedPeer::PRODUCTID, $this->productid);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getOrderdetailsid();

		$pks[1] = $this->getOrderid();

		$pks[2] = $this->getProductid();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setOrderdetailsid($keys[0]);

		$this->setOrderid($keys[1]);

		$this->setProductid($keys[2]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Commited (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setOrderid($this->orderid);

		$copyObj->setProductid($this->productid);

		$copyObj->setProductname($this->productname);

		$copyObj->setProductdescription($this->productdescription);

		$copyObj->setUnitprice($this->unitprice);

		$copyObj->setUnitbtw($this->unitbtw);

		$copyObj->setQuantity($this->quantity);

		$copyObj->setExtendedPrice($this->extended_price);

		$copyObj->setDiscount($this->discount);

		$copyObj->setSerialnb($this->serialnb);

		$copyObj->setShipid($this->shipid);

		$copyObj->setOrderdate($this->orderdate);

		$copyObj->setBtwPercentage($this->btw_percentage);

		$copyObj->setCostPercentage($this->cost_percentage);

		$copyObj->setDelivered($this->delivered);


		$copyObj->setNew(true);

		$copyObj->setOrderdetailsid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Commited Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CommitedPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CommitedPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCommited:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCommited::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCommited
