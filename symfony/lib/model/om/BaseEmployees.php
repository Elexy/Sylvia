<?php

/**
 * Base class that represents a row from the 'employees' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:36 2009
 *
 * @package    lib.model.om
 */
abstract class BaseEmployees extends BaseObject  implements Persistent {


  const PEER = 'EmployeesPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmployeesPeer
	 */
	protected static $peer;

	/**
	 * The value for the employeeid field.
	 * @var        int
	 */
	protected $employeeid;

	/**
	 * The value for the firstname field.
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the middlename field.
	 * @var        string
	 */
	protected $middlename;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the extension field.
	 * @var        string
	 */
	protected $extension;

	/**
	 * The value for the workphone field.
	 * @var        string
	 */
	protected $workphone;

	/**
	 * The value for the homephone field.
	 * @var        string
	 */
	protected $homephone;

	/**
	 * The value for the mobilephone field.
	 * @var        string
	 */
	protected $mobilephone;

	/**
	 * The value for the login field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $login;

	/**
	 * The value for the pwd field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $pwd;

	/**
	 * The value for the uid field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $uid;

	/**
	 * The value for the groupid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $groupid;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the postcode field.
	 * @var        string
	 */
	protected $postcode;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the birth_date field.
	 * @var        string
	 */
	protected $birth_date;

	/**
	 * The value for the gender field.
	 * @var        string
	 */
	protected $gender;

	/**
	 * The value for the passport field.
	 * @var        string
	 */
	protected $passport;

	/**
	 * The value for the sofinumber field.
	 * @var        string
	 */
	protected $sofinumber;

	/**
	 * The value for the salary_month field.
	 * @var        double
	 */
	protected $salary_month;

	/**
	 * The value for the start field.
	 * @var        string
	 */
	protected $start;

	/**
	 * The value for the end field.
	 * @var        string
	 */
	protected $end;

	/**
	 * The value for the bankrekening field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $bankrekening;

	/**
	 * The value for the girorekening field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $girorekening;

	/**
	 * The value for the afstand_km field.
	 * @var        double
	 */
	protected $afstand_km;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmployees object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->login = '';
		$this->pwd = '';
		$this->uid = '';
		$this->groupid = 0;
		$this->bankrekening = 0;
		$this->girorekening = 0;
	}

	/**
	 * Get the [employeeid] column value.
	 * 
	 * @return     int
	 */
	public function getEmployeeid()
	{
		return $this->employeeid;
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [middlename] column value.
	 * 
	 * @return     string
	 */
	public function getMiddlename()
	{
		return $this->middlename;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [extension] column value.
	 * 
	 * @return     string
	 */
	public function getExtension()
	{
		return $this->extension;
	}

	/**
	 * Get the [workphone] column value.
	 * 
	 * @return     string
	 */
	public function getWorkphone()
	{
		return $this->workphone;
	}

	/**
	 * Get the [homephone] column value.
	 * 
	 * @return     string
	 */
	public function getHomephone()
	{
		return $this->homephone;
	}

	/**
	 * Get the [mobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilephone()
	{
		return $this->mobilephone;
	}

	/**
	 * Get the [login] column value.
	 * 
	 * @return     string
	 */
	public function getLogin()
	{
		return $this->login;
	}

	/**
	 * Get the [pwd] column value.
	 * 
	 * @return     string
	 */
	public function getPwd()
	{
		return $this->pwd;
	}

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     string
	 */
	public function getUid()
	{
		return $this->uid;
	}

	/**
	 * Get the [groupid] column value.
	 * 
	 * @return     int
	 */
	public function getGroupid()
	{
		return $this->groupid;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [postcode] column value.
	 * 
	 * @return     string
	 */
	public function getPostcode()
	{
		return $this->postcode;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [optionally formatted] temporal [birth_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBirthDate($format = 'Y-m-d')
	{
		if ($this->birth_date === null) {
			return null;
		}


		if ($this->birth_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->birth_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birth_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     string
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [passport] column value.
	 * 
	 * @return     string
	 */
	public function getPassport()
	{
		return $this->passport;
	}

	/**
	 * Get the [sofinumber] column value.
	 * 
	 * @return     string
	 */
	public function getSofinumber()
	{
		return $this->sofinumber;
	}

	/**
	 * Get the [salary_month] column value.
	 * 
	 * @return     double
	 */
	public function getSalaryMonth()
	{
		return $this->salary_month;
	}

	/**
	 * Get the [optionally formatted] temporal [start] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getStart($format = 'Y-m-d')
	{
		if ($this->start === null) {
			return null;
		}


		if ($this->start === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->start);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->start, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [end] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEnd($format = 'Y-m-d')
	{
		if ($this->end === null) {
			return null;
		}


		if ($this->end === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->end);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->end, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [bankrekening] column value.
	 * 
	 * @return     int
	 */
	public function getBankrekening()
	{
		return $this->bankrekening;
	}

	/**
	 * Get the [girorekening] column value.
	 * 
	 * @return     int
	 */
	public function getGirorekening()
	{
		return $this->girorekening;
	}

	/**
	 * Get the [afstand_km] column value.
	 * 
	 * @return     double
	 */
	public function getAfstandKm()
	{
		return $this->afstand_km;
	}

	/**
	 * Set the value of [employeeid] column.
	 * 
	 * @param      int $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setEmployeeid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employeeid !== $v) {
			$this->employeeid = $v;
			$this->modifiedColumns[] = EmployeesPeer::EMPLOYEEID;
		}

		return $this;
	} // setEmployeeid()

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v) {
			$this->firstname = $v;
			$this->modifiedColumns[] = EmployeesPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [middlename] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setMiddlename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middlename !== $v) {
			$this->middlename = $v;
			$this->modifiedColumns[] = EmployeesPeer::MIDDLENAME;
		}

		return $this;
	} // setMiddlename()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = EmployeesPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = EmployeesPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [extension] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setExtension($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extension !== $v) {
			$this->extension = $v;
			$this->modifiedColumns[] = EmployeesPeer::EXTENSION;
		}

		return $this;
	} // setExtension()

	/**
	 * Set the value of [workphone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setWorkphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->workphone !== $v) {
			$this->workphone = $v;
			$this->modifiedColumns[] = EmployeesPeer::WORKPHONE;
		}

		return $this;
	} // setWorkphone()

	/**
	 * Set the value of [homephone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setHomephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->homephone !== $v) {
			$this->homephone = $v;
			$this->modifiedColumns[] = EmployeesPeer::HOMEPHONE;
		}

		return $this;
	} // setHomephone()

	/**
	 * Set the value of [mobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setMobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobilephone !== $v) {
			$this->mobilephone = $v;
			$this->modifiedColumns[] = EmployeesPeer::MOBILEPHONE;
		}

		return $this;
	} // setMobilephone()

	/**
	 * Set the value of [login] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->login !== $v || $v === '') {
			$this->login = $v;
			$this->modifiedColumns[] = EmployeesPeer::LOGIN;
		}

		return $this;
	} // setLogin()

	/**
	 * Set the value of [pwd] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setPwd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pwd !== $v || $v === '') {
			$this->pwd = $v;
			$this->modifiedColumns[] = EmployeesPeer::PWD;
		}

		return $this;
	} // setPwd()

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uid !== $v || $v === '') {
			$this->uid = $v;
			$this->modifiedColumns[] = EmployeesPeer::UID;
		}

		return $this;
	} // setUid()

	/**
	 * Set the value of [groupid] column.
	 * 
	 * @param      int $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setGroupid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->groupid !== $v || $v === 0) {
			$this->groupid = $v;
			$this->modifiedColumns[] = EmployeesPeer::GROUPID;
		}

		return $this;
	} // setGroupid()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = EmployeesPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [postcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setPostcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postcode !== $v) {
			$this->postcode = $v;
			$this->modifiedColumns[] = EmployeesPeer::POSTCODE;
		}

		return $this;
	} // setPostcode()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = EmployeesPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Sets the value of [birth_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setBirthDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->birth_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->birth_date !== null && $tmpDt = new DateTime($this->birth_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->birth_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeesPeer::BIRTH_DATE;
			}
		} // if either are not null

		return $this;
	} // setBirthDate()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = EmployeesPeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [passport] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setPassport($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passport !== $v) {
			$this->passport = $v;
			$this->modifiedColumns[] = EmployeesPeer::PASSPORT;
		}

		return $this;
	} // setPassport()

	/**
	 * Set the value of [sofinumber] column.
	 * 
	 * @param      string $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setSofinumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sofinumber !== $v) {
			$this->sofinumber = $v;
			$this->modifiedColumns[] = EmployeesPeer::SOFINUMBER;
		}

		return $this;
	} // setSofinumber()

	/**
	 * Set the value of [salary_month] column.
	 * 
	 * @param      double $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setSalaryMonth($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->salary_month !== $v) {
			$this->salary_month = $v;
			$this->modifiedColumns[] = EmployeesPeer::SALARY_MONTH;
		}

		return $this;
	} // setSalaryMonth()

	/**
	 * Sets the value of [start] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setStart($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->start !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->start !== null && $tmpDt = new DateTime($this->start)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->start = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeesPeer::START;
			}
		} // if either are not null

		return $this;
	} // setStart()

	/**
	 * Sets the value of [end] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setEnd($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->end !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->end !== null && $tmpDt = new DateTime($this->end)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->end = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployeesPeer::END;
			}
		} // if either are not null

		return $this;
	} // setEnd()

	/**
	 * Set the value of [bankrekening] column.
	 * 
	 * @param      int $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setBankrekening($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->bankrekening !== $v || $v === 0) {
			$this->bankrekening = $v;
			$this->modifiedColumns[] = EmployeesPeer::BANKREKENING;
		}

		return $this;
	} // setBankrekening()

	/**
	 * Set the value of [girorekening] column.
	 * 
	 * @param      int $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setGirorekening($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->girorekening !== $v || $v === 0) {
			$this->girorekening = $v;
			$this->modifiedColumns[] = EmployeesPeer::GIROREKENING;
		}

		return $this;
	} // setGirorekening()

	/**
	 * Set the value of [afstand_km] column.
	 * 
	 * @param      double $v new value
	 * @return     Employees The current object (for fluent API support)
	 */
	public function setAfstandKm($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afstand_km !== $v) {
			$this->afstand_km = $v;
			$this->modifiedColumns[] = EmployeesPeer::AFSTAND_KM;
		}

		return $this;
	} // setAfstandKm()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(EmployeesPeer::LOGIN,EmployeesPeer::PWD,EmployeesPeer::UID,EmployeesPeer::GROUPID,EmployeesPeer::BANKREKENING,EmployeesPeer::GIROREKENING))) {
				return false;
			}

			if ($this->login !== '') {
				return false;
			}

			if ($this->pwd !== '') {
				return false;
			}

			if ($this->uid !== '') {
				return false;
			}

			if ($this->groupid !== 0) {
				return false;
			}

			if ($this->bankrekening !== 0) {
				return false;
			}

			if ($this->girorekening !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->employeeid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->firstname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->middlename = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->lastname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->title = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->extension = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->workphone = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->homephone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->mobilephone = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->login = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->pwd = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->uid = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->groupid = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->address = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->postcode = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->city = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->birth_date = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->gender = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->passport = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->sofinumber = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->salary_month = ($row[$startcol + 20] !== null) ? (double) $row[$startcol + 20] : null;
			$this->start = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->end = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->bankrekening = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->girorekening = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->afstand_km = ($row[$startcol + 25] !== null) ? (double) $row[$startcol + 25] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 26; // 26 = EmployeesPeer::NUM_COLUMNS - EmployeesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Employees object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmployeesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployees:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmployeesPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmployees:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployees:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmployees:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmployeesPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmployeesPeer::EMPLOYEEID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmployeesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setEmployeeid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmployeesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = EmployeesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getEmployeeid();
				break;
			case 1:
				return $this->getFirstname();
				break;
			case 2:
				return $this->getMiddlename();
				break;
			case 3:
				return $this->getLastname();
				break;
			case 4:
				return $this->getTitle();
				break;
			case 5:
				return $this->getExtension();
				break;
			case 6:
				return $this->getWorkphone();
				break;
			case 7:
				return $this->getHomephone();
				break;
			case 8:
				return $this->getMobilephone();
				break;
			case 9:
				return $this->getLogin();
				break;
			case 10:
				return $this->getPwd();
				break;
			case 11:
				return $this->getUid();
				break;
			case 12:
				return $this->getGroupid();
				break;
			case 13:
				return $this->getAddress();
				break;
			case 14:
				return $this->getPostcode();
				break;
			case 15:
				return $this->getCity();
				break;
			case 16:
				return $this->getBirthDate();
				break;
			case 17:
				return $this->getGender();
				break;
			case 18:
				return $this->getPassport();
				break;
			case 19:
				return $this->getSofinumber();
				break;
			case 20:
				return $this->getSalaryMonth();
				break;
			case 21:
				return $this->getStart();
				break;
			case 22:
				return $this->getEnd();
				break;
			case 23:
				return $this->getBankrekening();
				break;
			case 24:
				return $this->getGirorekening();
				break;
			case 25:
				return $this->getAfstandKm();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmployeesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getEmployeeid(),
			$keys[1] => $this->getFirstname(),
			$keys[2] => $this->getMiddlename(),
			$keys[3] => $this->getLastname(),
			$keys[4] => $this->getTitle(),
			$keys[5] => $this->getExtension(),
			$keys[6] => $this->getWorkphone(),
			$keys[7] => $this->getHomephone(),
			$keys[8] => $this->getMobilephone(),
			$keys[9] => $this->getLogin(),
			$keys[10] => $this->getPwd(),
			$keys[11] => $this->getUid(),
			$keys[12] => $this->getGroupid(),
			$keys[13] => $this->getAddress(),
			$keys[14] => $this->getPostcode(),
			$keys[15] => $this->getCity(),
			$keys[16] => $this->getBirthDate(),
			$keys[17] => $this->getGender(),
			$keys[18] => $this->getPassport(),
			$keys[19] => $this->getSofinumber(),
			$keys[20] => $this->getSalaryMonth(),
			$keys[21] => $this->getStart(),
			$keys[22] => $this->getEnd(),
			$keys[23] => $this->getBankrekening(),
			$keys[24] => $this->getGirorekening(),
			$keys[25] => $this->getAfstandKm(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setEmployeeid($value);
				break;
			case 1:
				$this->setFirstname($value);
				break;
			case 2:
				$this->setMiddlename($value);
				break;
			case 3:
				$this->setLastname($value);
				break;
			case 4:
				$this->setTitle($value);
				break;
			case 5:
				$this->setExtension($value);
				break;
			case 6:
				$this->setWorkphone($value);
				break;
			case 7:
				$this->setHomephone($value);
				break;
			case 8:
				$this->setMobilephone($value);
				break;
			case 9:
				$this->setLogin($value);
				break;
			case 10:
				$this->setPwd($value);
				break;
			case 11:
				$this->setUid($value);
				break;
			case 12:
				$this->setGroupid($value);
				break;
			case 13:
				$this->setAddress($value);
				break;
			case 14:
				$this->setPostcode($value);
				break;
			case 15:
				$this->setCity($value);
				break;
			case 16:
				$this->setBirthDate($value);
				break;
			case 17:
				$this->setGender($value);
				break;
			case 18:
				$this->setPassport($value);
				break;
			case 19:
				$this->setSofinumber($value);
				break;
			case 20:
				$this->setSalaryMonth($value);
				break;
			case 21:
				$this->setStart($value);
				break;
			case 22:
				$this->setEnd($value);
				break;
			case 23:
				$this->setBankrekening($value);
				break;
			case 24:
				$this->setGirorekening($value);
				break;
			case 25:
				$this->setAfstandKm($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmployeesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setEmployeeid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setMiddlename($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLastname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTitle($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setExtension($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setWorkphone($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setHomephone($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMobilephone($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setLogin($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPwd($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUid($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setGroupid($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAddress($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPostcode($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCity($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBirthDate($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setGender($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPassport($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setSofinumber($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSalaryMonth($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setStart($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setEnd($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBankrekening($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setGirorekening($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setAfstandKm($arr[$keys[25]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmployeesPeer::DATABASE_NAME);

		if ($this->isColumnModified(EmployeesPeer::EMPLOYEEID)) $criteria->add(EmployeesPeer::EMPLOYEEID, $this->employeeid);
		if ($this->isColumnModified(EmployeesPeer::FIRSTNAME)) $criteria->add(EmployeesPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(EmployeesPeer::MIDDLENAME)) $criteria->add(EmployeesPeer::MIDDLENAME, $this->middlename);
		if ($this->isColumnModified(EmployeesPeer::LASTNAME)) $criteria->add(EmployeesPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(EmployeesPeer::TITLE)) $criteria->add(EmployeesPeer::TITLE, $this->title);
		if ($this->isColumnModified(EmployeesPeer::EXTENSION)) $criteria->add(EmployeesPeer::EXTENSION, $this->extension);
		if ($this->isColumnModified(EmployeesPeer::WORKPHONE)) $criteria->add(EmployeesPeer::WORKPHONE, $this->workphone);
		if ($this->isColumnModified(EmployeesPeer::HOMEPHONE)) $criteria->add(EmployeesPeer::HOMEPHONE, $this->homephone);
		if ($this->isColumnModified(EmployeesPeer::MOBILEPHONE)) $criteria->add(EmployeesPeer::MOBILEPHONE, $this->mobilephone);
		if ($this->isColumnModified(EmployeesPeer::LOGIN)) $criteria->add(EmployeesPeer::LOGIN, $this->login);
		if ($this->isColumnModified(EmployeesPeer::PWD)) $criteria->add(EmployeesPeer::PWD, $this->pwd);
		if ($this->isColumnModified(EmployeesPeer::UID)) $criteria->add(EmployeesPeer::UID, $this->uid);
		if ($this->isColumnModified(EmployeesPeer::GROUPID)) $criteria->add(EmployeesPeer::GROUPID, $this->groupid);
		if ($this->isColumnModified(EmployeesPeer::ADDRESS)) $criteria->add(EmployeesPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(EmployeesPeer::POSTCODE)) $criteria->add(EmployeesPeer::POSTCODE, $this->postcode);
		if ($this->isColumnModified(EmployeesPeer::CITY)) $criteria->add(EmployeesPeer::CITY, $this->city);
		if ($this->isColumnModified(EmployeesPeer::BIRTH_DATE)) $criteria->add(EmployeesPeer::BIRTH_DATE, $this->birth_date);
		if ($this->isColumnModified(EmployeesPeer::GENDER)) $criteria->add(EmployeesPeer::GENDER, $this->gender);
		if ($this->isColumnModified(EmployeesPeer::PASSPORT)) $criteria->add(EmployeesPeer::PASSPORT, $this->passport);
		if ($this->isColumnModified(EmployeesPeer::SOFINUMBER)) $criteria->add(EmployeesPeer::SOFINUMBER, $this->sofinumber);
		if ($this->isColumnModified(EmployeesPeer::SALARY_MONTH)) $criteria->add(EmployeesPeer::SALARY_MONTH, $this->salary_month);
		if ($this->isColumnModified(EmployeesPeer::START)) $criteria->add(EmployeesPeer::START, $this->start);
		if ($this->isColumnModified(EmployeesPeer::END)) $criteria->add(EmployeesPeer::END, $this->end);
		if ($this->isColumnModified(EmployeesPeer::BANKREKENING)) $criteria->add(EmployeesPeer::BANKREKENING, $this->bankrekening);
		if ($this->isColumnModified(EmployeesPeer::GIROREKENING)) $criteria->add(EmployeesPeer::GIROREKENING, $this->girorekening);
		if ($this->isColumnModified(EmployeesPeer::AFSTAND_KM)) $criteria->add(EmployeesPeer::AFSTAND_KM, $this->afstand_km);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmployeesPeer::DATABASE_NAME);

		$criteria->add(EmployeesPeer::EMPLOYEEID, $this->employeeid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getEmployeeid();
	}

	/**
	 * Generic method to set the primary key (employeeid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setEmployeeid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Employees (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstname($this->firstname);

		$copyObj->setMiddlename($this->middlename);

		$copyObj->setLastname($this->lastname);

		$copyObj->setTitle($this->title);

		$copyObj->setExtension($this->extension);

		$copyObj->setWorkphone($this->workphone);

		$copyObj->setHomephone($this->homephone);

		$copyObj->setMobilephone($this->mobilephone);

		$copyObj->setLogin($this->login);

		$copyObj->setPwd($this->pwd);

		$copyObj->setUid($this->uid);

		$copyObj->setGroupid($this->groupid);

		$copyObj->setAddress($this->address);

		$copyObj->setPostcode($this->postcode);

		$copyObj->setCity($this->city);

		$copyObj->setBirthDate($this->birth_date);

		$copyObj->setGender($this->gender);

		$copyObj->setPassport($this->passport);

		$copyObj->setSofinumber($this->sofinumber);

		$copyObj->setSalaryMonth($this->salary_month);

		$copyObj->setStart($this->start);

		$copyObj->setEnd($this->end);

		$copyObj->setBankrekening($this->bankrekening);

		$copyObj->setGirorekening($this->girorekening);

		$copyObj->setAfstandKm($this->afstand_km);


		$copyObj->setNew(true);

		$copyObj->setEmployeeid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Employees Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmployeesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmployeesPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmployees:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmployees::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmployees
