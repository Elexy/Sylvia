<?php

/**
 * Base class that represents a row from the 'current_product_list' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:36 2009
 *
 * @package    lib.model.om
 */
abstract class BaseCurrentProductList extends BaseObject  implements Persistent {


  const PEER = 'CurrentProductListPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CurrentProductListPeer
	 */
	protected static $peer;

	/**
	 * The value for the productid field.
	 * @var        int
	 */
	protected $productid;

	/**
	 * The value for the categoryid field.
	 * @var        int
	 */
	protected $categoryid;

	/**
	 * The value for the subcategoryid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $subcategoryid;

	/**
	 * The value for the productname field.
	 * @var        string
	 */
	protected $productname;

	/**
	 * The value for the productdescription field.
	 * @var        string
	 */
	protected $productdescription;

	/**
	 * The value for the purchase_price_foreign field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $purchase_price_foreign;

	/**
	 * The value for the purchase_price_home field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $purchase_price_home;

	/**
	 * The value for the extra_cost field.
	 * Note: this column has a database default value of: '0.0000'
	 * @var        string
	 */
	protected $extra_cost;

	/**
	 * The value for the margin_correction field.
	 * Note: this column has a database default value of: '1.0000'
	 * @var        string
	 */
	protected $margin_correction;

	/**
	 * The value for the price_discovery field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $price_discovery;

	/**
	 * The value for the price_discovery_10 field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $price_discovery_10;

	/**
	 * The value for the price_discovery_100 field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $price_discovery_100;

	/**
	 * The value for the selling_price field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $selling_price;

	/**
	 * The value for the selling_price_10 field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $selling_price_10;

	/**
	 * The value for the selling_price_50 field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $selling_price_50;

	/**
	 * The value for the selling_price_100 field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $selling_price_100;

	/**
	 * The value for the retail_price_ex field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $retail_price_ex;

	/**
	 * The value for the btw_class field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $btw_class;

	/**
	 * The value for the euproductcode field.
	 * @var        int
	 */
	protected $euproductcode;

	/**
	 * The value for the old_stock field.
	 * @var        int
	 */
	protected $old_stock;

	/**
	 * The value for the last_exp field.
	 * @var        string
	 */
	protected $last_exp;

	/**
	 * The value for the exp_rating field.
	 * @var        int
	 */
	protected $exp_rating;

	/**
	 * The value for the taric field.
	 * @var        int
	 */
	protected $taric;

	/**
	 * The value for the ean field.
	 * @var        string
	 */
	protected $ean;

	/**
	 * The value for the reorder_q field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $reorder_q;

	/**
	 * The value for the reorderlevel field.
	 * @var        int
	 */
	protected $reorderlevel;

	/**
	 * The value for the leadtime field.
	 * @var        int
	 */
	protected $leadtime;

	/**
	 * The value for the supplier field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $supplier;

	/**
	 * The value for the merk field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $merk;

	/**
	 * The value for the merkid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $merkid;

	/**
	 * The value for the pricelist_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $pricelist_yn;

	/**
	 * The value for the roadking field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $roadking;

	/**
	 * The value for the neptune field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $neptune;

	/**
	 * The value for the outdoor field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $outdoor;

	/**
	 * The value for the discontinued_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $discontinued_yn;

	/**
	 * The value for the externalid field.
	 * Note: this column has a database default value of: '0'
	 * @var        string
	 */
	protected $externalid;

	/**
	 * The value for the currency field.
	 * Note: this column has a database default value of: 2
	 * @var        int
	 */
	protected $currency;

	/**
	 * The value for the weight_corr field.
	 * @var        string
	 */
	protected $weight_corr;

	/**
	 * The value for the sku field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $sku;

	/**
	 * The value for the old_location_id field.
	 * @var        int
	 */
	protected $old_location_id;

	/**
	 * The value for the special field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $special;

	/**
	 * The value for the publish field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $publish;

	/**
	 * The value for the store_serial_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $store_serial_yn;

	/**
	 * The value for the image field.
	 * @var        string
	 */
	protected $image;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCurrentProductList object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->subcategoryid = 0;
		$this->purchase_price_foreign = '0.00';
		$this->purchase_price_home = '0.00';
		$this->extra_cost = '0.0000';
		$this->margin_correction = '1.0000';
		$this->price_discovery = '0.00';
		$this->price_discovery_10 = '0.00';
		$this->price_discovery_100 = '0.00';
		$this->selling_price = '0.00';
		$this->selling_price_10 = '0.00';
		$this->selling_price_50 = '0.00';
		$this->selling_price_100 = '0.00';
		$this->retail_price_ex = '0.00';
		$this->btw_class = 0;
		$this->reorder_q = 1;
		$this->supplier = 0;
		$this->merk = '';
		$this->merkid = 0;
		$this->pricelist_yn = 0;
		$this->roadking = 0;
		$this->neptune = 0;
		$this->outdoor = 0;
		$this->discontinued_yn = 0;
		$this->externalid = '0';
		$this->currency = 2;
		$this->sku = 1;
		$this->special = 0;
		$this->publish = 0;
		$this->store_serial_yn = 0;
	}

	/**
	 * Get the [productid] column value.
	 * 
	 * @return     int
	 */
	public function getProductid()
	{
		return $this->productid;
	}

	/**
	 * Get the [categoryid] column value.
	 * 
	 * @return     int
	 */
	public function getCategoryid()
	{
		return $this->categoryid;
	}

	/**
	 * Get the [subcategoryid] column value.
	 * 
	 * @return     int
	 */
	public function getSubcategoryid()
	{
		return $this->subcategoryid;
	}

	/**
	 * Get the [productname] column value.
	 * 
	 * @return     string
	 */
	public function getProductname()
	{
		return $this->productname;
	}

	/**
	 * Get the [productdescription] column value.
	 * 
	 * @return     string
	 */
	public function getProductdescription()
	{
		return $this->productdescription;
	}

	/**
	 * Get the [purchase_price_foreign] column value.
	 * 
	 * @return     string
	 */
	public function getPurchasePriceForeign()
	{
		return $this->purchase_price_foreign;
	}

	/**
	 * Get the [purchase_price_home] column value.
	 * 
	 * @return     string
	 */
	public function getPurchasePriceHome()
	{
		return $this->purchase_price_home;
	}

	/**
	 * Get the [extra_cost] column value.
	 * 
	 * @return     string
	 */
	public function getExtraCost()
	{
		return $this->extra_cost;
	}

	/**
	 * Get the [margin_correction] column value.
	 * 
	 * @return     string
	 */
	public function getMarginCorrection()
	{
		return $this->margin_correction;
	}

	/**
	 * Get the [price_discovery] column value.
	 * 
	 * @return     string
	 */
	public function getPriceDiscovery()
	{
		return $this->price_discovery;
	}

	/**
	 * Get the [price_discovery_10] column value.
	 * 
	 * @return     string
	 */
	public function getPriceDiscovery10()
	{
		return $this->price_discovery_10;
	}

	/**
	 * Get the [price_discovery_100] column value.
	 * 
	 * @return     string
	 */
	public function getPriceDiscovery100()
	{
		return $this->price_discovery_100;
	}

	/**
	 * Get the [selling_price] column value.
	 * 
	 * @return     string
	 */
	public function getSellingPrice()
	{
		return $this->selling_price;
	}

	/**
	 * Get the [selling_price_10] column value.
	 * 
	 * @return     string
	 */
	public function getSellingPrice10()
	{
		return $this->selling_price_10;
	}

	/**
	 * Get the [selling_price_50] column value.
	 * 
	 * @return     string
	 */
	public function getSellingPrice50()
	{
		return $this->selling_price_50;
	}

	/**
	 * Get the [selling_price_100] column value.
	 * 
	 * @return     string
	 */
	public function getSellingPrice100()
	{
		return $this->selling_price_100;
	}

	/**
	 * Get the [retail_price_ex] column value.
	 * 
	 * @return     string
	 */
	public function getRetailPriceEx()
	{
		return $this->retail_price_ex;
	}

	/**
	 * Get the [btw_class] column value.
	 * 
	 * @return     int
	 */
	public function getBtwClass()
	{
		return $this->btw_class;
	}

	/**
	 * Get the [euproductcode] column value.
	 * 
	 * @return     int
	 */
	public function getEuproductcode()
	{
		return $this->euproductcode;
	}

	/**
	 * Get the [old_stock] column value.
	 * 
	 * @return     int
	 */
	public function getOldStock()
	{
		return $this->old_stock;
	}

	/**
	 * Get the [optionally formatted] temporal [last_exp] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastExp($format = 'Y-m-d')
	{
		if ($this->last_exp === null) {
			return null;
		}


		if ($this->last_exp === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_exp);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_exp, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [exp_rating] column value.
	 * 
	 * @return     int
	 */
	public function getExpRating()
	{
		return $this->exp_rating;
	}

	/**
	 * Get the [taric] column value.
	 * 
	 * @return     int
	 */
	public function getTaric()
	{
		return $this->taric;
	}

	/**
	 * Get the [ean] column value.
	 * 
	 * @return     string
	 */
	public function getEan()
	{
		return $this->ean;
	}

	/**
	 * Get the [reorder_q] column value.
	 * 
	 * @return     int
	 */
	public function getReorderQ()
	{
		return $this->reorder_q;
	}

	/**
	 * Get the [reorderlevel] column value.
	 * 
	 * @return     int
	 */
	public function getReorderlevel()
	{
		return $this->reorderlevel;
	}

	/**
	 * Get the [leadtime] column value.
	 * 
	 * @return     int
	 */
	public function getLeadtime()
	{
		return $this->leadtime;
	}

	/**
	 * Get the [supplier] column value.
	 * 
	 * @return     int
	 */
	public function getSupplier()
	{
		return $this->supplier;
	}

	/**
	 * Get the [merk] column value.
	 * 
	 * @return     string
	 */
	public function getMerk()
	{
		return $this->merk;
	}

	/**
	 * Get the [merkid] column value.
	 * 
	 * @return     int
	 */
	public function getMerkid()
	{
		return $this->merkid;
	}

	/**
	 * Get the [pricelist_yn] column value.
	 * 
	 * @return     int
	 */
	public function getPricelistYn()
	{
		return $this->pricelist_yn;
	}

	/**
	 * Get the [roadking] column value.
	 * 
	 * @return     int
	 */
	public function getRoadking()
	{
		return $this->roadking;
	}

	/**
	 * Get the [neptune] column value.
	 * 
	 * @return     int
	 */
	public function getNeptune()
	{
		return $this->neptune;
	}

	/**
	 * Get the [outdoor] column value.
	 * 
	 * @return     int
	 */
	public function getOutdoor()
	{
		return $this->outdoor;
	}

	/**
	 * Get the [discontinued_yn] column value.
	 * 
	 * @return     int
	 */
	public function getDiscontinuedYn()
	{
		return $this->discontinued_yn;
	}

	/**
	 * Get the [externalid] column value.
	 * 
	 * @return     string
	 */
	public function getExternalid()
	{
		return $this->externalid;
	}

	/**
	 * Get the [currency] column value.
	 * 
	 * @return     int
	 */
	public function getCurrency()
	{
		return $this->currency;
	}

	/**
	 * Get the [weight_corr] column value.
	 * 
	 * @return     string
	 */
	public function getWeightCorr()
	{
		return $this->weight_corr;
	}

	/**
	 * Get the [sku] column value.
	 * 
	 * @return     int
	 */
	public function getSku()
	{
		return $this->sku;
	}

	/**
	 * Get the [old_location_id] column value.
	 * 
	 * @return     int
	 */
	public function getOldLocationId()
	{
		return $this->old_location_id;
	}

	/**
	 * Get the [special] column value.
	 * 
	 * @return     int
	 */
	public function getSpecial()
	{
		return $this->special;
	}

	/**
	 * Get the [publish] column value.
	 * 
	 * @return     int
	 */
	public function getPublish()
	{
		return $this->publish;
	}

	/**
	 * Get the [store_serial_yn] column value.
	 * 
	 * @return     int
	 */
	public function getStoreSerialYn()
	{
		return $this->store_serial_yn;
	}

	/**
	 * Get the [image] column value.
	 * 
	 * @return     string
	 */
	public function getImage()
	{
		return $this->image;
	}

	/**
	 * Set the value of [productid] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setProductid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->productid !== $v) {
			$this->productid = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRODUCTID;
		}

		return $this;
	} // setProductid()

	/**
	 * Set the value of [categoryid] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setCategoryid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->categoryid !== $v) {
			$this->categoryid = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::CATEGORYID;
		}

		return $this;
	} // setCategoryid()

	/**
	 * Set the value of [subcategoryid] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSubcategoryid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->subcategoryid !== $v || $v === 0) {
			$this->subcategoryid = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SUBCATEGORYID;
		}

		return $this;
	} // setSubcategoryid()

	/**
	 * Set the value of [productname] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setProductname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productname !== $v) {
			$this->productname = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRODUCTNAME;
		}

		return $this;
	} // setProductname()

	/**
	 * Set the value of [productdescription] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setProductdescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->productdescription !== $v) {
			$this->productdescription = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRODUCTDESCRIPTION;
		}

		return $this;
	} // setProductdescription()

	/**
	 * Set the value of [purchase_price_foreign] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPurchasePriceForeign($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->purchase_price_foreign !== $v || $v === '0.00') {
			$this->purchase_price_foreign = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PURCHASE_PRICE_FOREIGN;
		}

		return $this;
	} // setPurchasePriceForeign()

	/**
	 * Set the value of [purchase_price_home] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPurchasePriceHome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->purchase_price_home !== $v || $v === '0.00') {
			$this->purchase_price_home = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PURCHASE_PRICE_HOME;
		}

		return $this;
	} // setPurchasePriceHome()

	/**
	 * Set the value of [extra_cost] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setExtraCost($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra_cost !== $v || $v === '0.0000') {
			$this->extra_cost = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::EXTRA_COST;
		}

		return $this;
	} // setExtraCost()

	/**
	 * Set the value of [margin_correction] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setMarginCorrection($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->margin_correction !== $v || $v === '1.0000') {
			$this->margin_correction = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::MARGIN_CORRECTION;
		}

		return $this;
	} // setMarginCorrection()

	/**
	 * Set the value of [price_discovery] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPriceDiscovery($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_discovery !== $v || $v === '0.00') {
			$this->price_discovery = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRICE_DISCOVERY;
		}

		return $this;
	} // setPriceDiscovery()

	/**
	 * Set the value of [price_discovery_10] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPriceDiscovery10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_discovery_10 !== $v || $v === '0.00') {
			$this->price_discovery_10 = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRICE_DISCOVERY_10;
		}

		return $this;
	} // setPriceDiscovery10()

	/**
	 * Set the value of [price_discovery_100] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPriceDiscovery100($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price_discovery_100 !== $v || $v === '0.00') {
			$this->price_discovery_100 = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRICE_DISCOVERY_100;
		}

		return $this;
	} // setPriceDiscovery100()

	/**
	 * Set the value of [selling_price] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSellingPrice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selling_price !== $v || $v === '0.00') {
			$this->selling_price = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SELLING_PRICE;
		}

		return $this;
	} // setSellingPrice()

	/**
	 * Set the value of [selling_price_10] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSellingPrice10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selling_price_10 !== $v || $v === '0.00') {
			$this->selling_price_10 = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SELLING_PRICE_10;
		}

		return $this;
	} // setSellingPrice10()

	/**
	 * Set the value of [selling_price_50] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSellingPrice50($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selling_price_50 !== $v || $v === '0.00') {
			$this->selling_price_50 = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SELLING_PRICE_50;
		}

		return $this;
	} // setSellingPrice50()

	/**
	 * Set the value of [selling_price_100] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSellingPrice100($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selling_price_100 !== $v || $v === '0.00') {
			$this->selling_price_100 = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SELLING_PRICE_100;
		}

		return $this;
	} // setSellingPrice100()

	/**
	 * Set the value of [retail_price_ex] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setRetailPriceEx($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->retail_price_ex !== $v || $v === '0.00') {
			$this->retail_price_ex = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::RETAIL_PRICE_EX;
		}

		return $this;
	} // setRetailPriceEx()

	/**
	 * Set the value of [btw_class] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setBtwClass($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->btw_class !== $v || $v === 0) {
			$this->btw_class = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::BTW_CLASS;
		}

		return $this;
	} // setBtwClass()

	/**
	 * Set the value of [euproductcode] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setEuproductcode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->euproductcode !== $v) {
			$this->euproductcode = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::EUPRODUCTCODE;
		}

		return $this;
	} // setEuproductcode()

	/**
	 * Set the value of [old_stock] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setOldStock($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->old_stock !== $v) {
			$this->old_stock = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::OLD_STOCK;
		}

		return $this;
	} // setOldStock()

	/**
	 * Sets the value of [last_exp] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setLastExp($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_exp !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_exp !== null && $tmpDt = new DateTime($this->last_exp)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_exp = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CurrentProductListPeer::LAST_EXP;
			}
		} // if either are not null

		return $this;
	} // setLastExp()

	/**
	 * Set the value of [exp_rating] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setExpRating($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->exp_rating !== $v) {
			$this->exp_rating = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::EXP_RATING;
		}

		return $this;
	} // setExpRating()

	/**
	 * Set the value of [taric] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setTaric($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->taric !== $v) {
			$this->taric = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::TARIC;
		}

		return $this;
	} // setTaric()

	/**
	 * Set the value of [ean] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setEan($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ean !== $v) {
			$this->ean = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::EAN;
		}

		return $this;
	} // setEan()

	/**
	 * Set the value of [reorder_q] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setReorderQ($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reorder_q !== $v || $v === 1) {
			$this->reorder_q = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::REORDER_Q;
		}

		return $this;
	} // setReorderQ()

	/**
	 * Set the value of [reorderlevel] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setReorderlevel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reorderlevel !== $v) {
			$this->reorderlevel = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::REORDERLEVEL;
		}

		return $this;
	} // setReorderlevel()

	/**
	 * Set the value of [leadtime] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setLeadtime($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->leadtime !== $v) {
			$this->leadtime = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::LEADTIME;
		}

		return $this;
	} // setLeadtime()

	/**
	 * Set the value of [supplier] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSupplier($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->supplier !== $v || $v === 0) {
			$this->supplier = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SUPPLIER;
		}

		return $this;
	} // setSupplier()

	/**
	 * Set the value of [merk] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setMerk($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->merk !== $v || $v === '') {
			$this->merk = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::MERK;
		}

		return $this;
	} // setMerk()

	/**
	 * Set the value of [merkid] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setMerkid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->merkid !== $v || $v === 0) {
			$this->merkid = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::MERKID;
		}

		return $this;
	} // setMerkid()

	/**
	 * Set the value of [pricelist_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPricelistYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pricelist_yn !== $v || $v === 0) {
			$this->pricelist_yn = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PRICELIST_YN;
		}

		return $this;
	} // setPricelistYn()

	/**
	 * Set the value of [roadking] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setRoadking($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->roadking !== $v || $v === 0) {
			$this->roadking = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::ROADKING;
		}

		return $this;
	} // setRoadking()

	/**
	 * Set the value of [neptune] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setNeptune($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->neptune !== $v || $v === 0) {
			$this->neptune = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::NEPTUNE;
		}

		return $this;
	} // setNeptune()

	/**
	 * Set the value of [outdoor] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setOutdoor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->outdoor !== $v || $v === 0) {
			$this->outdoor = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::OUTDOOR;
		}

		return $this;
	} // setOutdoor()

	/**
	 * Set the value of [discontinued_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setDiscontinuedYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->discontinued_yn !== $v || $v === 0) {
			$this->discontinued_yn = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::DISCONTINUED_YN;
		}

		return $this;
	} // setDiscontinuedYn()

	/**
	 * Set the value of [externalid] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setExternalid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->externalid !== $v || $v === '0') {
			$this->externalid = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::EXTERNALID;
		}

		return $this;
	} // setExternalid()

	/**
	 * Set the value of [currency] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setCurrency($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->currency !== $v || $v === 2) {
			$this->currency = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::CURRENCY;
		}

		return $this;
	} // setCurrency()

	/**
	 * Set the value of [weight_corr] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setWeightCorr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->weight_corr !== $v) {
			$this->weight_corr = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::WEIGHT_CORR;
		}

		return $this;
	} // setWeightCorr()

	/**
	 * Set the value of [sku] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSku($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sku !== $v || $v === 1) {
			$this->sku = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SKU;
		}

		return $this;
	} // setSku()

	/**
	 * Set the value of [old_location_id] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setOldLocationId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->old_location_id !== $v) {
			$this->old_location_id = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::OLD_LOCATION_ID;
		}

		return $this;
	} // setOldLocationId()

	/**
	 * Set the value of [special] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setSpecial($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->special !== $v || $v === 0) {
			$this->special = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::SPECIAL;
		}

		return $this;
	} // setSpecial()

	/**
	 * Set the value of [publish] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setPublish($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->publish !== $v || $v === 0) {
			$this->publish = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::PUBLISH;
		}

		return $this;
	} // setPublish()

	/**
	 * Set the value of [store_serial_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setStoreSerialYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->store_serial_yn !== $v || $v === 0) {
			$this->store_serial_yn = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::STORE_SERIAL_YN;
		}

		return $this;
	} // setStoreSerialYn()

	/**
	 * Set the value of [image] column.
	 * 
	 * @param      string $v new value
	 * @return     CurrentProductList The current object (for fluent API support)
	 */
	public function setImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->image !== $v) {
			$this->image = $v;
			$this->modifiedColumns[] = CurrentProductListPeer::IMAGE;
		}

		return $this;
	} // setImage()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CurrentProductListPeer::SUBCATEGORYID,CurrentProductListPeer::PURCHASE_PRICE_FOREIGN,CurrentProductListPeer::PURCHASE_PRICE_HOME,CurrentProductListPeer::EXTRA_COST,CurrentProductListPeer::MARGIN_CORRECTION,CurrentProductListPeer::PRICE_DISCOVERY,CurrentProductListPeer::PRICE_DISCOVERY_10,CurrentProductListPeer::PRICE_DISCOVERY_100,CurrentProductListPeer::SELLING_PRICE,CurrentProductListPeer::SELLING_PRICE_10,CurrentProductListPeer::SELLING_PRICE_50,CurrentProductListPeer::SELLING_PRICE_100,CurrentProductListPeer::RETAIL_PRICE_EX,CurrentProductListPeer::BTW_CLASS,CurrentProductListPeer::REORDER_Q,CurrentProductListPeer::SUPPLIER,CurrentProductListPeer::MERK,CurrentProductListPeer::MERKID,CurrentProductListPeer::PRICELIST_YN,CurrentProductListPeer::ROADKING,CurrentProductListPeer::NEPTUNE,CurrentProductListPeer::OUTDOOR,CurrentProductListPeer::DISCONTINUED_YN,CurrentProductListPeer::EXTERNALID,CurrentProductListPeer::CURRENCY,CurrentProductListPeer::SKU,CurrentProductListPeer::SPECIAL,CurrentProductListPeer::PUBLISH,CurrentProductListPeer::STORE_SERIAL_YN))) {
				return false;
			}

			if ($this->subcategoryid !== 0) {
				return false;
			}

			if ($this->purchase_price_foreign !== '0.00') {
				return false;
			}

			if ($this->purchase_price_home !== '0.00') {
				return false;
			}

			if ($this->extra_cost !== '0.0000') {
				return false;
			}

			if ($this->margin_correction !== '1.0000') {
				return false;
			}

			if ($this->price_discovery !== '0.00') {
				return false;
			}

			if ($this->price_discovery_10 !== '0.00') {
				return false;
			}

			if ($this->price_discovery_100 !== '0.00') {
				return false;
			}

			if ($this->selling_price !== '0.00') {
				return false;
			}

			if ($this->selling_price_10 !== '0.00') {
				return false;
			}

			if ($this->selling_price_50 !== '0.00') {
				return false;
			}

			if ($this->selling_price_100 !== '0.00') {
				return false;
			}

			if ($this->retail_price_ex !== '0.00') {
				return false;
			}

			if ($this->btw_class !== 0) {
				return false;
			}

			if ($this->reorder_q !== 1) {
				return false;
			}

			if ($this->supplier !== 0) {
				return false;
			}

			if ($this->merk !== '') {
				return false;
			}

			if ($this->merkid !== 0) {
				return false;
			}

			if ($this->pricelist_yn !== 0) {
				return false;
			}

			if ($this->roadking !== 0) {
				return false;
			}

			if ($this->neptune !== 0) {
				return false;
			}

			if ($this->outdoor !== 0) {
				return false;
			}

			if ($this->discontinued_yn !== 0) {
				return false;
			}

			if ($this->externalid !== '0') {
				return false;
			}

			if ($this->currency !== 2) {
				return false;
			}

			if ($this->sku !== 1) {
				return false;
			}

			if ($this->special !== 0) {
				return false;
			}

			if ($this->publish !== 0) {
				return false;
			}

			if ($this->store_serial_yn !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->productid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->categoryid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->subcategoryid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->productname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->productdescription = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->purchase_price_foreign = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->purchase_price_home = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->extra_cost = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->margin_correction = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->price_discovery = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->price_discovery_10 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->price_discovery_100 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->selling_price = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->selling_price_10 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->selling_price_50 = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->selling_price_100 = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->retail_price_ex = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->btw_class = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->euproductcode = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->old_stock = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->last_exp = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->exp_rating = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->taric = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->ean = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->reorder_q = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->reorderlevel = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->leadtime = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->supplier = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->merk = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->merkid = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->pricelist_yn = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->roadking = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->neptune = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->outdoor = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->discontinued_yn = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->externalid = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->currency = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->weight_corr = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->sku = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->old_location_id = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->special = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->publish = ($row[$startcol + 41] !== null) ? (int) $row[$startcol + 41] : null;
			$this->store_serial_yn = ($row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->image = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 44; // 44 = CurrentProductListPeer::NUM_COLUMNS - CurrentProductListPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating CurrentProductList object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CurrentProductListPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CurrentProductListPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCurrentProductList:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CurrentProductListPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CurrentProductListPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCurrentProductList:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCurrentProductList:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CurrentProductListPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCurrentProductList:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CurrentProductListPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CurrentProductListPeer::PRODUCTID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CurrentProductListPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setProductid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CurrentProductListPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CurrentProductListPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CurrentProductListPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getProductid();
				break;
			case 1:
				return $this->getCategoryid();
				break;
			case 2:
				return $this->getSubcategoryid();
				break;
			case 3:
				return $this->getProductname();
				break;
			case 4:
				return $this->getProductdescription();
				break;
			case 5:
				return $this->getPurchasePriceForeign();
				break;
			case 6:
				return $this->getPurchasePriceHome();
				break;
			case 7:
				return $this->getExtraCost();
				break;
			case 8:
				return $this->getMarginCorrection();
				break;
			case 9:
				return $this->getPriceDiscovery();
				break;
			case 10:
				return $this->getPriceDiscovery10();
				break;
			case 11:
				return $this->getPriceDiscovery100();
				break;
			case 12:
				return $this->getSellingPrice();
				break;
			case 13:
				return $this->getSellingPrice10();
				break;
			case 14:
				return $this->getSellingPrice50();
				break;
			case 15:
				return $this->getSellingPrice100();
				break;
			case 16:
				return $this->getRetailPriceEx();
				break;
			case 17:
				return $this->getBtwClass();
				break;
			case 18:
				return $this->getEuproductcode();
				break;
			case 19:
				return $this->getOldStock();
				break;
			case 20:
				return $this->getLastExp();
				break;
			case 21:
				return $this->getExpRating();
				break;
			case 22:
				return $this->getTaric();
				break;
			case 23:
				return $this->getEan();
				break;
			case 24:
				return $this->getReorderQ();
				break;
			case 25:
				return $this->getReorderlevel();
				break;
			case 26:
				return $this->getLeadtime();
				break;
			case 27:
				return $this->getSupplier();
				break;
			case 28:
				return $this->getMerk();
				break;
			case 29:
				return $this->getMerkid();
				break;
			case 30:
				return $this->getPricelistYn();
				break;
			case 31:
				return $this->getRoadking();
				break;
			case 32:
				return $this->getNeptune();
				break;
			case 33:
				return $this->getOutdoor();
				break;
			case 34:
				return $this->getDiscontinuedYn();
				break;
			case 35:
				return $this->getExternalid();
				break;
			case 36:
				return $this->getCurrency();
				break;
			case 37:
				return $this->getWeightCorr();
				break;
			case 38:
				return $this->getSku();
				break;
			case 39:
				return $this->getOldLocationId();
				break;
			case 40:
				return $this->getSpecial();
				break;
			case 41:
				return $this->getPublish();
				break;
			case 42:
				return $this->getStoreSerialYn();
				break;
			case 43:
				return $this->getImage();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CurrentProductListPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getProductid(),
			$keys[1] => $this->getCategoryid(),
			$keys[2] => $this->getSubcategoryid(),
			$keys[3] => $this->getProductname(),
			$keys[4] => $this->getProductdescription(),
			$keys[5] => $this->getPurchasePriceForeign(),
			$keys[6] => $this->getPurchasePriceHome(),
			$keys[7] => $this->getExtraCost(),
			$keys[8] => $this->getMarginCorrection(),
			$keys[9] => $this->getPriceDiscovery(),
			$keys[10] => $this->getPriceDiscovery10(),
			$keys[11] => $this->getPriceDiscovery100(),
			$keys[12] => $this->getSellingPrice(),
			$keys[13] => $this->getSellingPrice10(),
			$keys[14] => $this->getSellingPrice50(),
			$keys[15] => $this->getSellingPrice100(),
			$keys[16] => $this->getRetailPriceEx(),
			$keys[17] => $this->getBtwClass(),
			$keys[18] => $this->getEuproductcode(),
			$keys[19] => $this->getOldStock(),
			$keys[20] => $this->getLastExp(),
			$keys[21] => $this->getExpRating(),
			$keys[22] => $this->getTaric(),
			$keys[23] => $this->getEan(),
			$keys[24] => $this->getReorderQ(),
			$keys[25] => $this->getReorderlevel(),
			$keys[26] => $this->getLeadtime(),
			$keys[27] => $this->getSupplier(),
			$keys[28] => $this->getMerk(),
			$keys[29] => $this->getMerkid(),
			$keys[30] => $this->getPricelistYn(),
			$keys[31] => $this->getRoadking(),
			$keys[32] => $this->getNeptune(),
			$keys[33] => $this->getOutdoor(),
			$keys[34] => $this->getDiscontinuedYn(),
			$keys[35] => $this->getExternalid(),
			$keys[36] => $this->getCurrency(),
			$keys[37] => $this->getWeightCorr(),
			$keys[38] => $this->getSku(),
			$keys[39] => $this->getOldLocationId(),
			$keys[40] => $this->getSpecial(),
			$keys[41] => $this->getPublish(),
			$keys[42] => $this->getStoreSerialYn(),
			$keys[43] => $this->getImage(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CurrentProductListPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setProductid($value);
				break;
			case 1:
				$this->setCategoryid($value);
				break;
			case 2:
				$this->setSubcategoryid($value);
				break;
			case 3:
				$this->setProductname($value);
				break;
			case 4:
				$this->setProductdescription($value);
				break;
			case 5:
				$this->setPurchasePriceForeign($value);
				break;
			case 6:
				$this->setPurchasePriceHome($value);
				break;
			case 7:
				$this->setExtraCost($value);
				break;
			case 8:
				$this->setMarginCorrection($value);
				break;
			case 9:
				$this->setPriceDiscovery($value);
				break;
			case 10:
				$this->setPriceDiscovery10($value);
				break;
			case 11:
				$this->setPriceDiscovery100($value);
				break;
			case 12:
				$this->setSellingPrice($value);
				break;
			case 13:
				$this->setSellingPrice10($value);
				break;
			case 14:
				$this->setSellingPrice50($value);
				break;
			case 15:
				$this->setSellingPrice100($value);
				break;
			case 16:
				$this->setRetailPriceEx($value);
				break;
			case 17:
				$this->setBtwClass($value);
				break;
			case 18:
				$this->setEuproductcode($value);
				break;
			case 19:
				$this->setOldStock($value);
				break;
			case 20:
				$this->setLastExp($value);
				break;
			case 21:
				$this->setExpRating($value);
				break;
			case 22:
				$this->setTaric($value);
				break;
			case 23:
				$this->setEan($value);
				break;
			case 24:
				$this->setReorderQ($value);
				break;
			case 25:
				$this->setReorderlevel($value);
				break;
			case 26:
				$this->setLeadtime($value);
				break;
			case 27:
				$this->setSupplier($value);
				break;
			case 28:
				$this->setMerk($value);
				break;
			case 29:
				$this->setMerkid($value);
				break;
			case 30:
				$this->setPricelistYn($value);
				break;
			case 31:
				$this->setRoadking($value);
				break;
			case 32:
				$this->setNeptune($value);
				break;
			case 33:
				$this->setOutdoor($value);
				break;
			case 34:
				$this->setDiscontinuedYn($value);
				break;
			case 35:
				$this->setExternalid($value);
				break;
			case 36:
				$this->setCurrency($value);
				break;
			case 37:
				$this->setWeightCorr($value);
				break;
			case 38:
				$this->setSku($value);
				break;
			case 39:
				$this->setOldLocationId($value);
				break;
			case 40:
				$this->setSpecial($value);
				break;
			case 41:
				$this->setPublish($value);
				break;
			case 42:
				$this->setStoreSerialYn($value);
				break;
			case 43:
				$this->setImage($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CurrentProductListPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setProductid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCategoryid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubcategoryid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProductname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProductdescription($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPurchasePriceForeign($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPurchasePriceHome($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setExtraCost($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMarginCorrection($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPriceDiscovery($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPriceDiscovery10($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPriceDiscovery100($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSellingPrice($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSellingPrice10($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSellingPrice50($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setSellingPrice100($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setRetailPriceEx($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setBtwClass($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setEuproductcode($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOldStock($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setLastExp($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setExpRating($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setTaric($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setEan($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setReorderQ($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setReorderlevel($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setLeadtime($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setSupplier($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setMerk($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setMerkid($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setPricelistYn($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setRoadking($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setNeptune($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setOutdoor($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setDiscontinuedYn($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setExternalid($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setCurrency($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setWeightCorr($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setSku($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setOldLocationId($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setSpecial($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setPublish($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setStoreSerialYn($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setImage($arr[$keys[43]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CurrentProductListPeer::DATABASE_NAME);

		if ($this->isColumnModified(CurrentProductListPeer::PRODUCTID)) $criteria->add(CurrentProductListPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(CurrentProductListPeer::CATEGORYID)) $criteria->add(CurrentProductListPeer::CATEGORYID, $this->categoryid);
		if ($this->isColumnModified(CurrentProductListPeer::SUBCATEGORYID)) $criteria->add(CurrentProductListPeer::SUBCATEGORYID, $this->subcategoryid);
		if ($this->isColumnModified(CurrentProductListPeer::PRODUCTNAME)) $criteria->add(CurrentProductListPeer::PRODUCTNAME, $this->productname);
		if ($this->isColumnModified(CurrentProductListPeer::PRODUCTDESCRIPTION)) $criteria->add(CurrentProductListPeer::PRODUCTDESCRIPTION, $this->productdescription);
		if ($this->isColumnModified(CurrentProductListPeer::PURCHASE_PRICE_FOREIGN)) $criteria->add(CurrentProductListPeer::PURCHASE_PRICE_FOREIGN, $this->purchase_price_foreign);
		if ($this->isColumnModified(CurrentProductListPeer::PURCHASE_PRICE_HOME)) $criteria->add(CurrentProductListPeer::PURCHASE_PRICE_HOME, $this->purchase_price_home);
		if ($this->isColumnModified(CurrentProductListPeer::EXTRA_COST)) $criteria->add(CurrentProductListPeer::EXTRA_COST, $this->extra_cost);
		if ($this->isColumnModified(CurrentProductListPeer::MARGIN_CORRECTION)) $criteria->add(CurrentProductListPeer::MARGIN_CORRECTION, $this->margin_correction);
		if ($this->isColumnModified(CurrentProductListPeer::PRICE_DISCOVERY)) $criteria->add(CurrentProductListPeer::PRICE_DISCOVERY, $this->price_discovery);
		if ($this->isColumnModified(CurrentProductListPeer::PRICE_DISCOVERY_10)) $criteria->add(CurrentProductListPeer::PRICE_DISCOVERY_10, $this->price_discovery_10);
		if ($this->isColumnModified(CurrentProductListPeer::PRICE_DISCOVERY_100)) $criteria->add(CurrentProductListPeer::PRICE_DISCOVERY_100, $this->price_discovery_100);
		if ($this->isColumnModified(CurrentProductListPeer::SELLING_PRICE)) $criteria->add(CurrentProductListPeer::SELLING_PRICE, $this->selling_price);
		if ($this->isColumnModified(CurrentProductListPeer::SELLING_PRICE_10)) $criteria->add(CurrentProductListPeer::SELLING_PRICE_10, $this->selling_price_10);
		if ($this->isColumnModified(CurrentProductListPeer::SELLING_PRICE_50)) $criteria->add(CurrentProductListPeer::SELLING_PRICE_50, $this->selling_price_50);
		if ($this->isColumnModified(CurrentProductListPeer::SELLING_PRICE_100)) $criteria->add(CurrentProductListPeer::SELLING_PRICE_100, $this->selling_price_100);
		if ($this->isColumnModified(CurrentProductListPeer::RETAIL_PRICE_EX)) $criteria->add(CurrentProductListPeer::RETAIL_PRICE_EX, $this->retail_price_ex);
		if ($this->isColumnModified(CurrentProductListPeer::BTW_CLASS)) $criteria->add(CurrentProductListPeer::BTW_CLASS, $this->btw_class);
		if ($this->isColumnModified(CurrentProductListPeer::EUPRODUCTCODE)) $criteria->add(CurrentProductListPeer::EUPRODUCTCODE, $this->euproductcode);
		if ($this->isColumnModified(CurrentProductListPeer::OLD_STOCK)) $criteria->add(CurrentProductListPeer::OLD_STOCK, $this->old_stock);
		if ($this->isColumnModified(CurrentProductListPeer::LAST_EXP)) $criteria->add(CurrentProductListPeer::LAST_EXP, $this->last_exp);
		if ($this->isColumnModified(CurrentProductListPeer::EXP_RATING)) $criteria->add(CurrentProductListPeer::EXP_RATING, $this->exp_rating);
		if ($this->isColumnModified(CurrentProductListPeer::TARIC)) $criteria->add(CurrentProductListPeer::TARIC, $this->taric);
		if ($this->isColumnModified(CurrentProductListPeer::EAN)) $criteria->add(CurrentProductListPeer::EAN, $this->ean);
		if ($this->isColumnModified(CurrentProductListPeer::REORDER_Q)) $criteria->add(CurrentProductListPeer::REORDER_Q, $this->reorder_q);
		if ($this->isColumnModified(CurrentProductListPeer::REORDERLEVEL)) $criteria->add(CurrentProductListPeer::REORDERLEVEL, $this->reorderlevel);
		if ($this->isColumnModified(CurrentProductListPeer::LEADTIME)) $criteria->add(CurrentProductListPeer::LEADTIME, $this->leadtime);
		if ($this->isColumnModified(CurrentProductListPeer::SUPPLIER)) $criteria->add(CurrentProductListPeer::SUPPLIER, $this->supplier);
		if ($this->isColumnModified(CurrentProductListPeer::MERK)) $criteria->add(CurrentProductListPeer::MERK, $this->merk);
		if ($this->isColumnModified(CurrentProductListPeer::MERKID)) $criteria->add(CurrentProductListPeer::MERKID, $this->merkid);
		if ($this->isColumnModified(CurrentProductListPeer::PRICELIST_YN)) $criteria->add(CurrentProductListPeer::PRICELIST_YN, $this->pricelist_yn);
		if ($this->isColumnModified(CurrentProductListPeer::ROADKING)) $criteria->add(CurrentProductListPeer::ROADKING, $this->roadking);
		if ($this->isColumnModified(CurrentProductListPeer::NEPTUNE)) $criteria->add(CurrentProductListPeer::NEPTUNE, $this->neptune);
		if ($this->isColumnModified(CurrentProductListPeer::OUTDOOR)) $criteria->add(CurrentProductListPeer::OUTDOOR, $this->outdoor);
		if ($this->isColumnModified(CurrentProductListPeer::DISCONTINUED_YN)) $criteria->add(CurrentProductListPeer::DISCONTINUED_YN, $this->discontinued_yn);
		if ($this->isColumnModified(CurrentProductListPeer::EXTERNALID)) $criteria->add(CurrentProductListPeer::EXTERNALID, $this->externalid);
		if ($this->isColumnModified(CurrentProductListPeer::CURRENCY)) $criteria->add(CurrentProductListPeer::CURRENCY, $this->currency);
		if ($this->isColumnModified(CurrentProductListPeer::WEIGHT_CORR)) $criteria->add(CurrentProductListPeer::WEIGHT_CORR, $this->weight_corr);
		if ($this->isColumnModified(CurrentProductListPeer::SKU)) $criteria->add(CurrentProductListPeer::SKU, $this->sku);
		if ($this->isColumnModified(CurrentProductListPeer::OLD_LOCATION_ID)) $criteria->add(CurrentProductListPeer::OLD_LOCATION_ID, $this->old_location_id);
		if ($this->isColumnModified(CurrentProductListPeer::SPECIAL)) $criteria->add(CurrentProductListPeer::SPECIAL, $this->special);
		if ($this->isColumnModified(CurrentProductListPeer::PUBLISH)) $criteria->add(CurrentProductListPeer::PUBLISH, $this->publish);
		if ($this->isColumnModified(CurrentProductListPeer::STORE_SERIAL_YN)) $criteria->add(CurrentProductListPeer::STORE_SERIAL_YN, $this->store_serial_yn);
		if ($this->isColumnModified(CurrentProductListPeer::IMAGE)) $criteria->add(CurrentProductListPeer::IMAGE, $this->image);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CurrentProductListPeer::DATABASE_NAME);

		$criteria->add(CurrentProductListPeer::PRODUCTID, $this->productid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getProductid();
	}

	/**
	 * Generic method to set the primary key (productid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setProductid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of CurrentProductList (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCategoryid($this->categoryid);

		$copyObj->setSubcategoryid($this->subcategoryid);

		$copyObj->setProductname($this->productname);

		$copyObj->setProductdescription($this->productdescription);

		$copyObj->setPurchasePriceForeign($this->purchase_price_foreign);

		$copyObj->setPurchasePriceHome($this->purchase_price_home);

		$copyObj->setExtraCost($this->extra_cost);

		$copyObj->setMarginCorrection($this->margin_correction);

		$copyObj->setPriceDiscovery($this->price_discovery);

		$copyObj->setPriceDiscovery10($this->price_discovery_10);

		$copyObj->setPriceDiscovery100($this->price_discovery_100);

		$copyObj->setSellingPrice($this->selling_price);

		$copyObj->setSellingPrice10($this->selling_price_10);

		$copyObj->setSellingPrice50($this->selling_price_50);

		$copyObj->setSellingPrice100($this->selling_price_100);

		$copyObj->setRetailPriceEx($this->retail_price_ex);

		$copyObj->setBtwClass($this->btw_class);

		$copyObj->setEuproductcode($this->euproductcode);

		$copyObj->setOldStock($this->old_stock);

		$copyObj->setLastExp($this->last_exp);

		$copyObj->setExpRating($this->exp_rating);

		$copyObj->setTaric($this->taric);

		$copyObj->setEan($this->ean);

		$copyObj->setReorderQ($this->reorder_q);

		$copyObj->setReorderlevel($this->reorderlevel);

		$copyObj->setLeadtime($this->leadtime);

		$copyObj->setSupplier($this->supplier);

		$copyObj->setMerk($this->merk);

		$copyObj->setMerkid($this->merkid);

		$copyObj->setPricelistYn($this->pricelist_yn);

		$copyObj->setRoadking($this->roadking);

		$copyObj->setNeptune($this->neptune);

		$copyObj->setOutdoor($this->outdoor);

		$copyObj->setDiscontinuedYn($this->discontinued_yn);

		$copyObj->setExternalid($this->externalid);

		$copyObj->setCurrency($this->currency);

		$copyObj->setWeightCorr($this->weight_corr);

		$copyObj->setSku($this->sku);

		$copyObj->setOldLocationId($this->old_location_id);

		$copyObj->setSpecial($this->special);

		$copyObj->setPublish($this->publish);

		$copyObj->setStoreSerialYn($this->store_serial_yn);

		$copyObj->setImage($this->image);


		$copyObj->setNew(true);

		$copyObj->setProductid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     CurrentProductList Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CurrentProductListPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CurrentProductListPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCurrentProductList:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCurrentProductList::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCurrentProductList
