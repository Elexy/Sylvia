<?php

/**
 * Base class that represents a row from the 'extra_product_info' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:37 2009
 *
 * @package    lib.model.om
 */
abstract class BaseExtraProductInfo extends BaseObject  implements Persistent {


  const PEER = 'ExtraProductInfoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ExtraProductInfoPeer
	 */
	protected static $peer;

	/**
	 * The value for the productid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $productid;

	/**
	 * The value for the best_syst_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $best_syst_id;

	/**
	 * The value for the processor_snelheid field.
	 * @var        int
	 */
	protected $processor_snelheid;

	/**
	 * The value for the processor_type field.
	 * @var        int
	 */
	protected $processor_type;

	/**
	 * The value for the afmetingx field.
	 * @var        double
	 */
	protected $afmetingx;

	/**
	 * The value for the afmetingy field.
	 * @var        double
	 */
	protected $afmetingy;

	/**
	 * The value for the afmetingz field.
	 * @var        double
	 */
	protected $afmetingz;

	/**
	 * The value for the afm_schermx field.
	 * @var        double
	 */
	protected $afm_schermx;

	/**
	 * The value for the afm_schermy field.
	 * @var        double
	 */
	protected $afm_schermy;

	/**
	 * The value for the resolutiex field.
	 * @var        int
	 */
	protected $resolutiex;

	/**
	 * The value for the resolutiey field.
	 * @var        int
	 */
	protected $resolutiey;

	/**
	 * The value for the kleuren field.
	 * @var        int
	 */
	protected $kleuren;

	/**
	 * The value for the backlite_yn field.
	 * @var        int
	 */
	protected $backlite_yn;

	/**
	 * The value for the infrarood_yn field.
	 * @var        int
	 */
	protected $infrarood_yn;

	/**
	 * The value for the bluetooth_yn field.
	 * @var        int
	 */
	protected $bluetooth_yn;

	/**
	 * The value for the wlan_yn field.
	 * @var        int
	 */
	protected $wlan_yn;

	/**
	 * The value for the gsm_gprs_yn field.
	 * @var        int
	 */
	protected $gsm_gprs_yn;

	/**
	 * The value for the type_aansluiting field.
	 * @var        string
	 */
	protected $type_aansluiting;

	/**
	 * The value for the accu_type_id field.
	 * @var        int
	 */
	protected $accu_type_id;

	/**
	 * The value for the accu_duur field.
	 * @var        int
	 */
	protected $accu_duur;

	/**
	 * The value for the accu_size field.
	 * @var        int
	 */
	protected $accu_size;

	/**
	 * The value for the geheugen_int field.
	 * @var        double
	 */
	protected $geheugen_int;

	/**
	 * The value for the geheugen_ext field.
	 * @var        double
	 */
	protected $geheugen_ext;

	/**
	 * The value for the geheugen_slot field.
	 * @var        string
	 */
	protected $geheugen_slot;

	/**
	 * The value for the gewicht field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $gewicht;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseExtraProductInfo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->productid = 0;
		$this->best_syst_id = 0;
		$this->gewicht = 0;
	}

	/**
	 * Get the [productid] column value.
	 * 
	 * @return     int
	 */
	public function getProductid()
	{
		return $this->productid;
	}

	/**
	 * Get the [best_syst_id] column value.
	 * 
	 * @return     int
	 */
	public function getBestSystId()
	{
		return $this->best_syst_id;
	}

	/**
	 * Get the [processor_snelheid] column value.
	 * 
	 * @return     int
	 */
	public function getProcessorSnelheid()
	{
		return $this->processor_snelheid;
	}

	/**
	 * Get the [processor_type] column value.
	 * 
	 * @return     int
	 */
	public function getProcessorType()
	{
		return $this->processor_type;
	}

	/**
	 * Get the [afmetingx] column value.
	 * 
	 * @return     double
	 */
	public function getAfmetingx()
	{
		return $this->afmetingx;
	}

	/**
	 * Get the [afmetingy] column value.
	 * 
	 * @return     double
	 */
	public function getAfmetingy()
	{
		return $this->afmetingy;
	}

	/**
	 * Get the [afmetingz] column value.
	 * 
	 * @return     double
	 */
	public function getAfmetingz()
	{
		return $this->afmetingz;
	}

	/**
	 * Get the [afm_schermx] column value.
	 * 
	 * @return     double
	 */
	public function getAfmSchermx()
	{
		return $this->afm_schermx;
	}

	/**
	 * Get the [afm_schermy] column value.
	 * 
	 * @return     double
	 */
	public function getAfmSchermy()
	{
		return $this->afm_schermy;
	}

	/**
	 * Get the [resolutiex] column value.
	 * 
	 * @return     int
	 */
	public function getResolutiex()
	{
		return $this->resolutiex;
	}

	/**
	 * Get the [resolutiey] column value.
	 * 
	 * @return     int
	 */
	public function getResolutiey()
	{
		return $this->resolutiey;
	}

	/**
	 * Get the [kleuren] column value.
	 * 
	 * @return     int
	 */
	public function getKleuren()
	{
		return $this->kleuren;
	}

	/**
	 * Get the [backlite_yn] column value.
	 * 
	 * @return     int
	 */
	public function getBackliteYn()
	{
		return $this->backlite_yn;
	}

	/**
	 * Get the [infrarood_yn] column value.
	 * 
	 * @return     int
	 */
	public function getInfraroodYn()
	{
		return $this->infrarood_yn;
	}

	/**
	 * Get the [bluetooth_yn] column value.
	 * 
	 * @return     int
	 */
	public function getBluetoothYn()
	{
		return $this->bluetooth_yn;
	}

	/**
	 * Get the [wlan_yn] column value.
	 * 
	 * @return     int
	 */
	public function getWlanYn()
	{
		return $this->wlan_yn;
	}

	/**
	 * Get the [gsm_gprs_yn] column value.
	 * 
	 * @return     int
	 */
	public function getGsmGprsYn()
	{
		return $this->gsm_gprs_yn;
	}

	/**
	 * Get the [type_aansluiting] column value.
	 * 
	 * @return     string
	 */
	public function getTypeAansluiting()
	{
		return $this->type_aansluiting;
	}

	/**
	 * Get the [accu_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccuTypeId()
	{
		return $this->accu_type_id;
	}

	/**
	 * Get the [accu_duur] column value.
	 * 
	 * @return     int
	 */
	public function getAccuDuur()
	{
		return $this->accu_duur;
	}

	/**
	 * Get the [accu_size] column value.
	 * 
	 * @return     int
	 */
	public function getAccuSize()
	{
		return $this->accu_size;
	}

	/**
	 * Get the [geheugen_int] column value.
	 * 
	 * @return     double
	 */
	public function getGeheugenInt()
	{
		return $this->geheugen_int;
	}

	/**
	 * Get the [geheugen_ext] column value.
	 * 
	 * @return     double
	 */
	public function getGeheugenExt()
	{
		return $this->geheugen_ext;
	}

	/**
	 * Get the [geheugen_slot] column value.
	 * 
	 * @return     string
	 */
	public function getGeheugenSlot()
	{
		return $this->geheugen_slot;
	}

	/**
	 * Get the [gewicht] column value.
	 * 
	 * @return     double
	 */
	public function getGewicht()
	{
		return $this->gewicht;
	}

	/**
	 * Set the value of [productid] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setProductid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->productid !== $v || $v === 0) {
			$this->productid = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::PRODUCTID;
		}

		return $this;
	} // setProductid()

	/**
	 * Set the value of [best_syst_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setBestSystId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->best_syst_id !== $v || $v === 0) {
			$this->best_syst_id = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::BEST_SYST_ID;
		}

		return $this;
	} // setBestSystId()

	/**
	 * Set the value of [processor_snelheid] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setProcessorSnelheid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->processor_snelheid !== $v) {
			$this->processor_snelheid = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::PROCESSOR_SNELHEID;
		}

		return $this;
	} // setProcessorSnelheid()

	/**
	 * Set the value of [processor_type] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setProcessorType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->processor_type !== $v) {
			$this->processor_type = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::PROCESSOR_TYPE;
		}

		return $this;
	} // setProcessorType()

	/**
	 * Set the value of [afmetingx] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAfmetingx($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afmetingx !== $v) {
			$this->afmetingx = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::AFMETINGX;
		}

		return $this;
	} // setAfmetingx()

	/**
	 * Set the value of [afmetingy] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAfmetingy($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afmetingy !== $v) {
			$this->afmetingy = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::AFMETINGY;
		}

		return $this;
	} // setAfmetingy()

	/**
	 * Set the value of [afmetingz] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAfmetingz($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afmetingz !== $v) {
			$this->afmetingz = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::AFMETINGZ;
		}

		return $this;
	} // setAfmetingz()

	/**
	 * Set the value of [afm_schermx] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAfmSchermx($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afm_schermx !== $v) {
			$this->afm_schermx = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::AFM_SCHERMX;
		}

		return $this;
	} // setAfmSchermx()

	/**
	 * Set the value of [afm_schermy] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAfmSchermy($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->afm_schermy !== $v) {
			$this->afm_schermy = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::AFM_SCHERMY;
		}

		return $this;
	} // setAfmSchermy()

	/**
	 * Set the value of [resolutiex] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setResolutiex($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->resolutiex !== $v) {
			$this->resolutiex = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::RESOLUTIEX;
		}

		return $this;
	} // setResolutiex()

	/**
	 * Set the value of [resolutiey] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setResolutiey($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->resolutiey !== $v) {
			$this->resolutiey = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::RESOLUTIEY;
		}

		return $this;
	} // setResolutiey()

	/**
	 * Set the value of [kleuren] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setKleuren($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->kleuren !== $v) {
			$this->kleuren = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::KLEUREN;
		}

		return $this;
	} // setKleuren()

	/**
	 * Set the value of [backlite_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setBackliteYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->backlite_yn !== $v) {
			$this->backlite_yn = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::BACKLITE_YN;
		}

		return $this;
	} // setBackliteYn()

	/**
	 * Set the value of [infrarood_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setInfraroodYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->infrarood_yn !== $v) {
			$this->infrarood_yn = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::INFRAROOD_YN;
		}

		return $this;
	} // setInfraroodYn()

	/**
	 * Set the value of [bluetooth_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setBluetoothYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->bluetooth_yn !== $v) {
			$this->bluetooth_yn = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::BLUETOOTH_YN;
		}

		return $this;
	} // setBluetoothYn()

	/**
	 * Set the value of [wlan_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setWlanYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wlan_yn !== $v) {
			$this->wlan_yn = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::WLAN_YN;
		}

		return $this;
	} // setWlanYn()

	/**
	 * Set the value of [gsm_gprs_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setGsmGprsYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->gsm_gprs_yn !== $v) {
			$this->gsm_gprs_yn = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::GSM_GPRS_YN;
		}

		return $this;
	} // setGsmGprsYn()

	/**
	 * Set the value of [type_aansluiting] column.
	 * 
	 * @param      string $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setTypeAansluiting($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->type_aansluiting !== $v) {
			$this->type_aansluiting = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::TYPE_AANSLUITING;
		}

		return $this;
	} // setTypeAansluiting()

	/**
	 * Set the value of [accu_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAccuTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->accu_type_id !== $v) {
			$this->accu_type_id = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::ACCU_TYPE_ID;
		}

		return $this;
	} // setAccuTypeId()

	/**
	 * Set the value of [accu_duur] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAccuDuur($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->accu_duur !== $v) {
			$this->accu_duur = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::ACCU_DUUR;
		}

		return $this;
	} // setAccuDuur()

	/**
	 * Set the value of [accu_size] column.
	 * 
	 * @param      int $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setAccuSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->accu_size !== $v) {
			$this->accu_size = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::ACCU_SIZE;
		}

		return $this;
	} // setAccuSize()

	/**
	 * Set the value of [geheugen_int] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setGeheugenInt($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->geheugen_int !== $v) {
			$this->geheugen_int = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::GEHEUGEN_INT;
		}

		return $this;
	} // setGeheugenInt()

	/**
	 * Set the value of [geheugen_ext] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setGeheugenExt($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->geheugen_ext !== $v) {
			$this->geheugen_ext = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::GEHEUGEN_EXT;
		}

		return $this;
	} // setGeheugenExt()

	/**
	 * Set the value of [geheugen_slot] column.
	 * 
	 * @param      string $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setGeheugenSlot($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->geheugen_slot !== $v) {
			$this->geheugen_slot = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::GEHEUGEN_SLOT;
		}

		return $this;
	} // setGeheugenSlot()

	/**
	 * Set the value of [gewicht] column.
	 * 
	 * @param      double $v new value
	 * @return     ExtraProductInfo The current object (for fluent API support)
	 */
	public function setGewicht($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->gewicht !== $v || $v === 0) {
			$this->gewicht = $v;
			$this->modifiedColumns[] = ExtraProductInfoPeer::GEWICHT;
		}

		return $this;
	} // setGewicht()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ExtraProductInfoPeer::PRODUCTID,ExtraProductInfoPeer::BEST_SYST_ID,ExtraProductInfoPeer::GEWICHT))) {
				return false;
			}

			if ($this->productid !== 0) {
				return false;
			}

			if ($this->best_syst_id !== 0) {
				return false;
			}

			if ($this->gewicht !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->productid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->best_syst_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->processor_snelheid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->processor_type = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->afmetingx = ($row[$startcol + 4] !== null) ? (double) $row[$startcol + 4] : null;
			$this->afmetingy = ($row[$startcol + 5] !== null) ? (double) $row[$startcol + 5] : null;
			$this->afmetingz = ($row[$startcol + 6] !== null) ? (double) $row[$startcol + 6] : null;
			$this->afm_schermx = ($row[$startcol + 7] !== null) ? (double) $row[$startcol + 7] : null;
			$this->afm_schermy = ($row[$startcol + 8] !== null) ? (double) $row[$startcol + 8] : null;
			$this->resolutiex = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->resolutiey = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->kleuren = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->backlite_yn = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->infrarood_yn = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->bluetooth_yn = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->wlan_yn = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->gsm_gprs_yn = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->type_aansluiting = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->accu_type_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->accu_duur = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->accu_size = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->geheugen_int = ($row[$startcol + 21] !== null) ? (double) $row[$startcol + 21] : null;
			$this->geheugen_ext = ($row[$startcol + 22] !== null) ? (double) $row[$startcol + 22] : null;
			$this->geheugen_slot = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->gewicht = ($row[$startcol + 24] !== null) ? (double) $row[$startcol + 24] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 25; // 25 = ExtraProductInfoPeer::NUM_COLUMNS - ExtraProductInfoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ExtraProductInfo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExtraProductInfoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ExtraProductInfoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseExtraProductInfo:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExtraProductInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ExtraProductInfoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseExtraProductInfo:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseExtraProductInfo:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExtraProductInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseExtraProductInfo:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ExtraProductInfoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ExtraProductInfoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += ExtraProductInfoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ExtraProductInfoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ExtraProductInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getProductid();
				break;
			case 1:
				return $this->getBestSystId();
				break;
			case 2:
				return $this->getProcessorSnelheid();
				break;
			case 3:
				return $this->getProcessorType();
				break;
			case 4:
				return $this->getAfmetingx();
				break;
			case 5:
				return $this->getAfmetingy();
				break;
			case 6:
				return $this->getAfmetingz();
				break;
			case 7:
				return $this->getAfmSchermx();
				break;
			case 8:
				return $this->getAfmSchermy();
				break;
			case 9:
				return $this->getResolutiex();
				break;
			case 10:
				return $this->getResolutiey();
				break;
			case 11:
				return $this->getKleuren();
				break;
			case 12:
				return $this->getBackliteYn();
				break;
			case 13:
				return $this->getInfraroodYn();
				break;
			case 14:
				return $this->getBluetoothYn();
				break;
			case 15:
				return $this->getWlanYn();
				break;
			case 16:
				return $this->getGsmGprsYn();
				break;
			case 17:
				return $this->getTypeAansluiting();
				break;
			case 18:
				return $this->getAccuTypeId();
				break;
			case 19:
				return $this->getAccuDuur();
				break;
			case 20:
				return $this->getAccuSize();
				break;
			case 21:
				return $this->getGeheugenInt();
				break;
			case 22:
				return $this->getGeheugenExt();
				break;
			case 23:
				return $this->getGeheugenSlot();
				break;
			case 24:
				return $this->getGewicht();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ExtraProductInfoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getProductid(),
			$keys[1] => $this->getBestSystId(),
			$keys[2] => $this->getProcessorSnelheid(),
			$keys[3] => $this->getProcessorType(),
			$keys[4] => $this->getAfmetingx(),
			$keys[5] => $this->getAfmetingy(),
			$keys[6] => $this->getAfmetingz(),
			$keys[7] => $this->getAfmSchermx(),
			$keys[8] => $this->getAfmSchermy(),
			$keys[9] => $this->getResolutiex(),
			$keys[10] => $this->getResolutiey(),
			$keys[11] => $this->getKleuren(),
			$keys[12] => $this->getBackliteYn(),
			$keys[13] => $this->getInfraroodYn(),
			$keys[14] => $this->getBluetoothYn(),
			$keys[15] => $this->getWlanYn(),
			$keys[16] => $this->getGsmGprsYn(),
			$keys[17] => $this->getTypeAansluiting(),
			$keys[18] => $this->getAccuTypeId(),
			$keys[19] => $this->getAccuDuur(),
			$keys[20] => $this->getAccuSize(),
			$keys[21] => $this->getGeheugenInt(),
			$keys[22] => $this->getGeheugenExt(),
			$keys[23] => $this->getGeheugenSlot(),
			$keys[24] => $this->getGewicht(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ExtraProductInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setProductid($value);
				break;
			case 1:
				$this->setBestSystId($value);
				break;
			case 2:
				$this->setProcessorSnelheid($value);
				break;
			case 3:
				$this->setProcessorType($value);
				break;
			case 4:
				$this->setAfmetingx($value);
				break;
			case 5:
				$this->setAfmetingy($value);
				break;
			case 6:
				$this->setAfmetingz($value);
				break;
			case 7:
				$this->setAfmSchermx($value);
				break;
			case 8:
				$this->setAfmSchermy($value);
				break;
			case 9:
				$this->setResolutiex($value);
				break;
			case 10:
				$this->setResolutiey($value);
				break;
			case 11:
				$this->setKleuren($value);
				break;
			case 12:
				$this->setBackliteYn($value);
				break;
			case 13:
				$this->setInfraroodYn($value);
				break;
			case 14:
				$this->setBluetoothYn($value);
				break;
			case 15:
				$this->setWlanYn($value);
				break;
			case 16:
				$this->setGsmGprsYn($value);
				break;
			case 17:
				$this->setTypeAansluiting($value);
				break;
			case 18:
				$this->setAccuTypeId($value);
				break;
			case 19:
				$this->setAccuDuur($value);
				break;
			case 20:
				$this->setAccuSize($value);
				break;
			case 21:
				$this->setGeheugenInt($value);
				break;
			case 22:
				$this->setGeheugenExt($value);
				break;
			case 23:
				$this->setGeheugenSlot($value);
				break;
			case 24:
				$this->setGewicht($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ExtraProductInfoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setProductid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setBestSystId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProcessorSnelheid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setProcessorType($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAfmetingx($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAfmetingy($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAfmetingz($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAfmSchermx($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAfmSchermy($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setResolutiex($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setResolutiey($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setKleuren($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setBackliteYn($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setInfraroodYn($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setBluetoothYn($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setWlanYn($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setGsmGprsYn($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTypeAansluiting($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAccuTypeId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setAccuDuur($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAccuSize($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setGeheugenInt($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setGeheugenExt($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setGeheugenSlot($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setGewicht($arr[$keys[24]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ExtraProductInfoPeer::DATABASE_NAME);

		if ($this->isColumnModified(ExtraProductInfoPeer::PRODUCTID)) $criteria->add(ExtraProductInfoPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(ExtraProductInfoPeer::BEST_SYST_ID)) $criteria->add(ExtraProductInfoPeer::BEST_SYST_ID, $this->best_syst_id);
		if ($this->isColumnModified(ExtraProductInfoPeer::PROCESSOR_SNELHEID)) $criteria->add(ExtraProductInfoPeer::PROCESSOR_SNELHEID, $this->processor_snelheid);
		if ($this->isColumnModified(ExtraProductInfoPeer::PROCESSOR_TYPE)) $criteria->add(ExtraProductInfoPeer::PROCESSOR_TYPE, $this->processor_type);
		if ($this->isColumnModified(ExtraProductInfoPeer::AFMETINGX)) $criteria->add(ExtraProductInfoPeer::AFMETINGX, $this->afmetingx);
		if ($this->isColumnModified(ExtraProductInfoPeer::AFMETINGY)) $criteria->add(ExtraProductInfoPeer::AFMETINGY, $this->afmetingy);
		if ($this->isColumnModified(ExtraProductInfoPeer::AFMETINGZ)) $criteria->add(ExtraProductInfoPeer::AFMETINGZ, $this->afmetingz);
		if ($this->isColumnModified(ExtraProductInfoPeer::AFM_SCHERMX)) $criteria->add(ExtraProductInfoPeer::AFM_SCHERMX, $this->afm_schermx);
		if ($this->isColumnModified(ExtraProductInfoPeer::AFM_SCHERMY)) $criteria->add(ExtraProductInfoPeer::AFM_SCHERMY, $this->afm_schermy);
		if ($this->isColumnModified(ExtraProductInfoPeer::RESOLUTIEX)) $criteria->add(ExtraProductInfoPeer::RESOLUTIEX, $this->resolutiex);
		if ($this->isColumnModified(ExtraProductInfoPeer::RESOLUTIEY)) $criteria->add(ExtraProductInfoPeer::RESOLUTIEY, $this->resolutiey);
		if ($this->isColumnModified(ExtraProductInfoPeer::KLEUREN)) $criteria->add(ExtraProductInfoPeer::KLEUREN, $this->kleuren);
		if ($this->isColumnModified(ExtraProductInfoPeer::BACKLITE_YN)) $criteria->add(ExtraProductInfoPeer::BACKLITE_YN, $this->backlite_yn);
		if ($this->isColumnModified(ExtraProductInfoPeer::INFRAROOD_YN)) $criteria->add(ExtraProductInfoPeer::INFRAROOD_YN, $this->infrarood_yn);
		if ($this->isColumnModified(ExtraProductInfoPeer::BLUETOOTH_YN)) $criteria->add(ExtraProductInfoPeer::BLUETOOTH_YN, $this->bluetooth_yn);
		if ($this->isColumnModified(ExtraProductInfoPeer::WLAN_YN)) $criteria->add(ExtraProductInfoPeer::WLAN_YN, $this->wlan_yn);
		if ($this->isColumnModified(ExtraProductInfoPeer::GSM_GPRS_YN)) $criteria->add(ExtraProductInfoPeer::GSM_GPRS_YN, $this->gsm_gprs_yn);
		if ($this->isColumnModified(ExtraProductInfoPeer::TYPE_AANSLUITING)) $criteria->add(ExtraProductInfoPeer::TYPE_AANSLUITING, $this->type_aansluiting);
		if ($this->isColumnModified(ExtraProductInfoPeer::ACCU_TYPE_ID)) $criteria->add(ExtraProductInfoPeer::ACCU_TYPE_ID, $this->accu_type_id);
		if ($this->isColumnModified(ExtraProductInfoPeer::ACCU_DUUR)) $criteria->add(ExtraProductInfoPeer::ACCU_DUUR, $this->accu_duur);
		if ($this->isColumnModified(ExtraProductInfoPeer::ACCU_SIZE)) $criteria->add(ExtraProductInfoPeer::ACCU_SIZE, $this->accu_size);
		if ($this->isColumnModified(ExtraProductInfoPeer::GEHEUGEN_INT)) $criteria->add(ExtraProductInfoPeer::GEHEUGEN_INT, $this->geheugen_int);
		if ($this->isColumnModified(ExtraProductInfoPeer::GEHEUGEN_EXT)) $criteria->add(ExtraProductInfoPeer::GEHEUGEN_EXT, $this->geheugen_ext);
		if ($this->isColumnModified(ExtraProductInfoPeer::GEHEUGEN_SLOT)) $criteria->add(ExtraProductInfoPeer::GEHEUGEN_SLOT, $this->geheugen_slot);
		if ($this->isColumnModified(ExtraProductInfoPeer::GEWICHT)) $criteria->add(ExtraProductInfoPeer::GEWICHT, $this->gewicht);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ExtraProductInfoPeer::DATABASE_NAME);

		$criteria->add(ExtraProductInfoPeer::PRODUCTID, $this->productid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getProductid();
	}

	/**
	 * Generic method to set the primary key (productid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setProductid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ExtraProductInfo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProductid($this->productid);

		$copyObj->setBestSystId($this->best_syst_id);

		$copyObj->setProcessorSnelheid($this->processor_snelheid);

		$copyObj->setProcessorType($this->processor_type);

		$copyObj->setAfmetingx($this->afmetingx);

		$copyObj->setAfmetingy($this->afmetingy);

		$copyObj->setAfmetingz($this->afmetingz);

		$copyObj->setAfmSchermx($this->afm_schermx);

		$copyObj->setAfmSchermy($this->afm_schermy);

		$copyObj->setResolutiex($this->resolutiex);

		$copyObj->setResolutiey($this->resolutiey);

		$copyObj->setKleuren($this->kleuren);

		$copyObj->setBackliteYn($this->backlite_yn);

		$copyObj->setInfraroodYn($this->infrarood_yn);

		$copyObj->setBluetoothYn($this->bluetooth_yn);

		$copyObj->setWlanYn($this->wlan_yn);

		$copyObj->setGsmGprsYn($this->gsm_gprs_yn);

		$copyObj->setTypeAansluiting($this->type_aansluiting);

		$copyObj->setAccuTypeId($this->accu_type_id);

		$copyObj->setAccuDuur($this->accu_duur);

		$copyObj->setAccuSize($this->accu_size);

		$copyObj->setGeheugenInt($this->geheugen_int);

		$copyObj->setGeheugenExt($this->geheugen_ext);

		$copyObj->setGeheugenSlot($this->geheugen_slot);

		$copyObj->setGewicht($this->gewicht);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ExtraProductInfo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ExtraProductInfoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ExtraProductInfoPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseExtraProductInfo:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseExtraProductInfo::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseExtraProductInfo
