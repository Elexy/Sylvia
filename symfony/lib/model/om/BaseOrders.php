<?php

/**
 * Base class that represents a row from the 'orders' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:39 2009
 *
 * @package    lib.model.om
 */
abstract class BaseOrders extends BaseObject  implements Persistent {


  const PEER = 'OrdersPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        OrdersPeer
	 */
	protected static $peer;

	/**
	 * The value for the orderid field.
	 * @var        int
	 */
	protected $orderid;

	/**
	 * The value for the contactid field.
	 * @var        int
	 */
	protected $contactid;

	/**
	 * The value for the contactsorderid field.
	 * @var        string
	 */
	protected $contactsorderid;

	/**
	 * The value for the employeeid field.
	 * @var        int
	 */
	protected $employeeid;

	/**
	 * The value for the orderdate field.
	 * @var        string
	 */
	protected $orderdate;

	/**
	 * The value for the requireddate field.
	 * @var        string
	 */
	protected $requireddate;

	/**
	 * The value for the shippeddate field.
	 * @var        string
	 */
	protected $shippeddate;

	/**
	 * The value for the xp_no field.
	 * @var        int
	 */
	protected $xp_no;

	/**
	 * The value for the mailtable field.
	 * @var        string
	 */
	protected $mailtable;

	/**
	 * The value for the shipvia field.
	 * @var        int
	 */
	protected $shipvia;

	/**
	 * The value for the shipid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $shipid;

	/**
	 * The value for the shipname field.
	 * @var        string
	 */
	protected $shipname;

	/**
	 * The value for the shipaddress field.
	 * @var        string
	 */
	protected $shipaddress;

	/**
	 * The value for the shipcity field.
	 * @var        string
	 */
	protected $shipcity;

	/**
	 * The value for the shipregion field.
	 * @var        string
	 */
	protected $shipregion;

	/**
	 * The value for the shippostalcode field.
	 * @var        string
	 */
	protected $shippostalcode;

	/**
	 * The value for the shipcountry field.
	 * @var        string
	 */
	protected $shipcountry;

	/**
	 * The value for the locked_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $locked_yn;

	/**
	 * The value for the comments field.
	 * @var        string
	 */
	protected $comments;

	/**
	 * The value for the confirmed_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $confirmed_yn;

	/**
	 * The value for the blockorder field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $blockorder;

	/**
	 * The value for the confirmed_how field.
	 * @var        string
	 */
	protected $confirmed_how;

	/**
	 * The value for the endcustomer_yn field.
	 * @var        int
	 */
	protected $endcustomer_yn;

	/**
	 * The value for the paymentterm_yn field.
	 * @var        int
	 */
	protected $paymentterm_yn;

	/**
	 * The value for the trackingnummer field.
	 * @var        string
	 */
	protected $trackingnummer;

	/**
	 * The value for the btw_yn field.
	 * @var        int
	 */
	protected $btw_yn;

	/**
	 * The value for the price_level field.
	 * @var        int
	 */
	protected $price_level;

	/**
	 * The value for the complete_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $complete_yn;

	/**
	 * The value for the transportcosts field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $transportcosts;

	/**
	 * The value for the manual_transportcosts field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $manual_transportcosts;

	/**
	 * The value for the ordercosts field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $ordercosts;

	/**
	 * The value for the manual_ordercosts field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $manual_ordercosts;

	/**
	 * The value for the employee field.
	 * @var        int
	 */
	protected $employee;

	/**
	 * The value for the in_one_delivery_yn field.
	 * @var        int
	 */
	protected $in_one_delivery_yn;

	/**
	 * The value for the rma_yn field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $rma_yn;

	/**
	 * The value for the consignment_order field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $consignment_order;

	/**
	 * The value for the administration_order field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $administration_order;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseOrders object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->shipid = 0;
		$this->locked_yn = 0;
		$this->confirmed_yn = 0;
		$this->blockorder = 0;
		$this->complete_yn = 0;
		$this->transportcosts = '0.00';
		$this->manual_transportcosts = 0;
		$this->ordercosts = '0.00';
		$this->manual_ordercosts = 0;
		$this->rma_yn = 0;
		$this->consignment_order = 0;
		$this->administration_order = 0;
	}

	/**
	 * Get the [orderid] column value.
	 * 
	 * @return     int
	 */
	public function getOrderid()
	{
		return $this->orderid;
	}

	/**
	 * Get the [contactid] column value.
	 * 
	 * @return     int
	 */
	public function getContactid()
	{
		return $this->contactid;
	}

	/**
	 * Get the [contactsorderid] column value.
	 * 
	 * @return     string
	 */
	public function getContactsorderid()
	{
		return $this->contactsorderid;
	}

	/**
	 * Get the [employeeid] column value.
	 * 
	 * @return     int
	 */
	public function getEmployeeid()
	{
		return $this->employeeid;
	}

	/**
	 * Get the [optionally formatted] temporal [orderdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getOrderdate($format = 'Y-m-d H:i:s')
	{
		if ($this->orderdate === null) {
			return null;
		}


		if ($this->orderdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->orderdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->orderdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [requireddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRequireddate($format = 'Y-m-d H:i:s')
	{
		if ($this->requireddate === null) {
			return null;
		}


		if ($this->requireddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->requireddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->requireddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [shippeddate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getShippeddate($format = 'Y-m-d H:i:s')
	{
		if ($this->shippeddate === null) {
			return null;
		}


		if ($this->shippeddate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->shippeddate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->shippeddate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [xp_no] column value.
	 * 
	 * @return     int
	 */
	public function getXpNo()
	{
		return $this->xp_no;
	}

	/**
	 * Get the [mailtable] column value.
	 * 
	 * @return     string
	 */
	public function getMailtable()
	{
		return $this->mailtable;
	}

	/**
	 * Get the [shipvia] column value.
	 * 
	 * @return     int
	 */
	public function getShipvia()
	{
		return $this->shipvia;
	}

	/**
	 * Get the [shipid] column value.
	 * 
	 * @return     int
	 */
	public function getShipid()
	{
		return $this->shipid;
	}

	/**
	 * Get the [shipname] column value.
	 * 
	 * @return     string
	 */
	public function getShipname()
	{
		return $this->shipname;
	}

	/**
	 * Get the [shipaddress] column value.
	 * 
	 * @return     string
	 */
	public function getShipaddress()
	{
		return $this->shipaddress;
	}

	/**
	 * Get the [shipcity] column value.
	 * 
	 * @return     string
	 */
	public function getShipcity()
	{
		return $this->shipcity;
	}

	/**
	 * Get the [shipregion] column value.
	 * 
	 * @return     string
	 */
	public function getShipregion()
	{
		return $this->shipregion;
	}

	/**
	 * Get the [shippostalcode] column value.
	 * 
	 * @return     string
	 */
	public function getShippostalcode()
	{
		return $this->shippostalcode;
	}

	/**
	 * Get the [shipcountry] column value.
	 * 
	 * @return     string
	 */
	public function getShipcountry()
	{
		return $this->shipcountry;
	}

	/**
	 * Get the [locked_yn] column value.
	 * 
	 * @return     int
	 */
	public function getLockedYn()
	{
		return $this->locked_yn;
	}

	/**
	 * Get the [comments] column value.
	 * 
	 * @return     string
	 */
	public function getComments()
	{
		return $this->comments;
	}

	/**
	 * Get the [confirmed_yn] column value.
	 * 
	 * @return     int
	 */
	public function getConfirmedYn()
	{
		return $this->confirmed_yn;
	}

	/**
	 * Get the [blockorder] column value.
	 * 
	 * @return     int
	 */
	public function getBlockorder()
	{
		return $this->blockorder;
	}

	/**
	 * Get the [confirmed_how] column value.
	 * 
	 * @return     string
	 */
	public function getConfirmedHow()
	{
		return $this->confirmed_how;
	}

	/**
	 * Get the [endcustomer_yn] column value.
	 * 
	 * @return     int
	 */
	public function getEndcustomerYn()
	{
		return $this->endcustomer_yn;
	}

	/**
	 * Get the [paymentterm_yn] column value.
	 * 
	 * @return     int
	 */
	public function getPaymenttermYn()
	{
		return $this->paymentterm_yn;
	}

	/**
	 * Get the [trackingnummer] column value.
	 * 
	 * @return     string
	 */
	public function getTrackingnummer()
	{
		return $this->trackingnummer;
	}

	/**
	 * Get the [btw_yn] column value.
	 * 
	 * @return     int
	 */
	public function getBtwYn()
	{
		return $this->btw_yn;
	}

	/**
	 * Get the [price_level] column value.
	 * 
	 * @return     int
	 */
	public function getPriceLevel()
	{
		return $this->price_level;
	}

	/**
	 * Get the [complete_yn] column value.
	 * 
	 * @return     int
	 */
	public function getCompleteYn()
	{
		return $this->complete_yn;
	}

	/**
	 * Get the [transportcosts] column value.
	 * 
	 * @return     string
	 */
	public function getTransportcosts()
	{
		return $this->transportcosts;
	}

	/**
	 * Get the [manual_transportcosts] column value.
	 * 
	 * @return     int
	 */
	public function getManualTransportcosts()
	{
		return $this->manual_transportcosts;
	}

	/**
	 * Get the [ordercosts] column value.
	 * 
	 * @return     string
	 */
	public function getOrdercosts()
	{
		return $this->ordercosts;
	}

	/**
	 * Get the [manual_ordercosts] column value.
	 * 
	 * @return     int
	 */
	public function getManualOrdercosts()
	{
		return $this->manual_ordercosts;
	}

	/**
	 * Get the [employee] column value.
	 * 
	 * @return     int
	 */
	public function getEmployee()
	{
		return $this->employee;
	}

	/**
	 * Get the [in_one_delivery_yn] column value.
	 * 
	 * @return     int
	 */
	public function getInOneDeliveryYn()
	{
		return $this->in_one_delivery_yn;
	}

	/**
	 * Get the [rma_yn] column value.
	 * 
	 * @return     int
	 */
	public function getRmaYn()
	{
		return $this->rma_yn;
	}

	/**
	 * Get the [consignment_order] column value.
	 * 
	 * @return     int
	 */
	public function getConsignmentOrder()
	{
		return $this->consignment_order;
	}

	/**
	 * Get the [administration_order] column value.
	 * 
	 * @return     int
	 */
	public function getAdministrationOrder()
	{
		return $this->administration_order;
	}

	/**
	 * Set the value of [orderid] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setOrderid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orderid !== $v) {
			$this->orderid = $v;
			$this->modifiedColumns[] = OrdersPeer::ORDERID;
		}

		return $this;
	} // setOrderid()

	/**
	 * Set the value of [contactid] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setContactid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contactid !== $v) {
			$this->contactid = $v;
			$this->modifiedColumns[] = OrdersPeer::CONTACTID;
		}

		return $this;
	} // setContactid()

	/**
	 * Set the value of [contactsorderid] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setContactsorderid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contactsorderid !== $v) {
			$this->contactsorderid = $v;
			$this->modifiedColumns[] = OrdersPeer::CONTACTSORDERID;
		}

		return $this;
	} // setContactsorderid()

	/**
	 * Set the value of [employeeid] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setEmployeeid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employeeid !== $v) {
			$this->employeeid = $v;
			$this->modifiedColumns[] = OrdersPeer::EMPLOYEEID;
		}

		return $this;
	} // setEmployeeid()

	/**
	 * Sets the value of [orderdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setOrderdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->orderdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->orderdate !== null && $tmpDt = new DateTime($this->orderdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->orderdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrdersPeer::ORDERDATE;
			}
		} // if either are not null

		return $this;
	} // setOrderdate()

	/**
	 * Sets the value of [requireddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setRequireddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->requireddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->requireddate !== null && $tmpDt = new DateTime($this->requireddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->requireddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrdersPeer::REQUIREDDATE;
			}
		} // if either are not null

		return $this;
	} // setRequireddate()

	/**
	 * Sets the value of [shippeddate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShippeddate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->shippeddate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->shippeddate !== null && $tmpDt = new DateTime($this->shippeddate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->shippeddate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrdersPeer::SHIPPEDDATE;
			}
		} // if either are not null

		return $this;
	} // setShippeddate()

	/**
	 * Set the value of [xp_no] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setXpNo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->xp_no !== $v) {
			$this->xp_no = $v;
			$this->modifiedColumns[] = OrdersPeer::XP_NO;
		}

		return $this;
	} // setXpNo()

	/**
	 * Set the value of [mailtable] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setMailtable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mailtable !== $v) {
			$this->mailtable = $v;
			$this->modifiedColumns[] = OrdersPeer::MAILTABLE;
		}

		return $this;
	} // setMailtable()

	/**
	 * Set the value of [shipvia] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipvia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->shipvia !== $v) {
			$this->shipvia = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPVIA;
		}

		return $this;
	} // setShipvia()

	/**
	 * Set the value of [shipid] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->shipid !== $v || $v === 0) {
			$this->shipid = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPID;
		}

		return $this;
	} // setShipid()

	/**
	 * Set the value of [shipname] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipname !== $v) {
			$this->shipname = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPNAME;
		}

		return $this;
	} // setShipname()

	/**
	 * Set the value of [shipaddress] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipaddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipaddress !== $v) {
			$this->shipaddress = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPADDRESS;
		}

		return $this;
	} // setShipaddress()

	/**
	 * Set the value of [shipcity] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipcity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipcity !== $v) {
			$this->shipcity = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPCITY;
		}

		return $this;
	} // setShipcity()

	/**
	 * Set the value of [shipregion] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipregion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipregion !== $v) {
			$this->shipregion = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPREGION;
		}

		return $this;
	} // setShipregion()

	/**
	 * Set the value of [shippostalcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShippostalcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shippostalcode !== $v) {
			$this->shippostalcode = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPPOSTALCODE;
		}

		return $this;
	} // setShippostalcode()

	/**
	 * Set the value of [shipcountry] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setShipcountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipcountry !== $v) {
			$this->shipcountry = $v;
			$this->modifiedColumns[] = OrdersPeer::SHIPCOUNTRY;
		}

		return $this;
	} // setShipcountry()

	/**
	 * Set the value of [locked_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setLockedYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->locked_yn !== $v || $v === 0) {
			$this->locked_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::LOCKED_YN;
		}

		return $this;
	} // setLockedYn()

	/**
	 * Set the value of [comments] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setComments($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comments !== $v) {
			$this->comments = $v;
			$this->modifiedColumns[] = OrdersPeer::COMMENTS;
		}

		return $this;
	} // setComments()

	/**
	 * Set the value of [confirmed_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setConfirmedYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->confirmed_yn !== $v || $v === 0) {
			$this->confirmed_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::CONFIRMED_YN;
		}

		return $this;
	} // setConfirmedYn()

	/**
	 * Set the value of [blockorder] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setBlockorder($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->blockorder !== $v || $v === 0) {
			$this->blockorder = $v;
			$this->modifiedColumns[] = OrdersPeer::BLOCKORDER;
		}

		return $this;
	} // setBlockorder()

	/**
	 * Set the value of [confirmed_how] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setConfirmedHow($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->confirmed_how !== $v) {
			$this->confirmed_how = $v;
			$this->modifiedColumns[] = OrdersPeer::CONFIRMED_HOW;
		}

		return $this;
	} // setConfirmedHow()

	/**
	 * Set the value of [endcustomer_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setEndcustomerYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->endcustomer_yn !== $v) {
			$this->endcustomer_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::ENDCUSTOMER_YN;
		}

		return $this;
	} // setEndcustomerYn()

	/**
	 * Set the value of [paymentterm_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setPaymenttermYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->paymentterm_yn !== $v) {
			$this->paymentterm_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::PAYMENTTERM_YN;
		}

		return $this;
	} // setPaymenttermYn()

	/**
	 * Set the value of [trackingnummer] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setTrackingnummer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trackingnummer !== $v) {
			$this->trackingnummer = $v;
			$this->modifiedColumns[] = OrdersPeer::TRACKINGNUMMER;
		}

		return $this;
	} // setTrackingnummer()

	/**
	 * Set the value of [btw_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setBtwYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->btw_yn !== $v) {
			$this->btw_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::BTW_YN;
		}

		return $this;
	} // setBtwYn()

	/**
	 * Set the value of [price_level] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setPriceLevel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price_level !== $v) {
			$this->price_level = $v;
			$this->modifiedColumns[] = OrdersPeer::PRICE_LEVEL;
		}

		return $this;
	} // setPriceLevel()

	/**
	 * Set the value of [complete_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setCompleteYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->complete_yn !== $v || $v === 0) {
			$this->complete_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::COMPLETE_YN;
		}

		return $this;
	} // setCompleteYn()

	/**
	 * Set the value of [transportcosts] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setTransportcosts($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->transportcosts !== $v || $v === '0.00') {
			$this->transportcosts = $v;
			$this->modifiedColumns[] = OrdersPeer::TRANSPORTCOSTS;
		}

		return $this;
	} // setTransportcosts()

	/**
	 * Set the value of [manual_transportcosts] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setManualTransportcosts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->manual_transportcosts !== $v || $v === 0) {
			$this->manual_transportcosts = $v;
			$this->modifiedColumns[] = OrdersPeer::MANUAL_TRANSPORTCOSTS;
		}

		return $this;
	} // setManualTransportcosts()

	/**
	 * Set the value of [ordercosts] column.
	 * 
	 * @param      string $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setOrdercosts($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ordercosts !== $v || $v === '0.00') {
			$this->ordercosts = $v;
			$this->modifiedColumns[] = OrdersPeer::ORDERCOSTS;
		}

		return $this;
	} // setOrdercosts()

	/**
	 * Set the value of [manual_ordercosts] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setManualOrdercosts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->manual_ordercosts !== $v || $v === 0) {
			$this->manual_ordercosts = $v;
			$this->modifiedColumns[] = OrdersPeer::MANUAL_ORDERCOSTS;
		}

		return $this;
	} // setManualOrdercosts()

	/**
	 * Set the value of [employee] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setEmployee($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employee !== $v) {
			$this->employee = $v;
			$this->modifiedColumns[] = OrdersPeer::EMPLOYEE;
		}

		return $this;
	} // setEmployee()

	/**
	 * Set the value of [in_one_delivery_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setInOneDeliveryYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->in_one_delivery_yn !== $v) {
			$this->in_one_delivery_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::IN_ONE_DELIVERY_YN;
		}

		return $this;
	} // setInOneDeliveryYn()

	/**
	 * Set the value of [rma_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setRmaYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rma_yn !== $v || $v === 0) {
			$this->rma_yn = $v;
			$this->modifiedColumns[] = OrdersPeer::RMA_YN;
		}

		return $this;
	} // setRmaYn()

	/**
	 * Set the value of [consignment_order] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setConsignmentOrder($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->consignment_order !== $v || $v === 0) {
			$this->consignment_order = $v;
			$this->modifiedColumns[] = OrdersPeer::CONSIGNMENT_ORDER;
		}

		return $this;
	} // setConsignmentOrder()

	/**
	 * Set the value of [administration_order] column.
	 * 
	 * @param      int $v new value
	 * @return     Orders The current object (for fluent API support)
	 */
	public function setAdministrationOrder($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->administration_order !== $v || $v === 0) {
			$this->administration_order = $v;
			$this->modifiedColumns[] = OrdersPeer::ADMINISTRATION_ORDER;
		}

		return $this;
	} // setAdministrationOrder()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(OrdersPeer::SHIPID,OrdersPeer::LOCKED_YN,OrdersPeer::CONFIRMED_YN,OrdersPeer::BLOCKORDER,OrdersPeer::COMPLETE_YN,OrdersPeer::TRANSPORTCOSTS,OrdersPeer::MANUAL_TRANSPORTCOSTS,OrdersPeer::ORDERCOSTS,OrdersPeer::MANUAL_ORDERCOSTS,OrdersPeer::RMA_YN,OrdersPeer::CONSIGNMENT_ORDER,OrdersPeer::ADMINISTRATION_ORDER))) {
				return false;
			}

			if ($this->shipid !== 0) {
				return false;
			}

			if ($this->locked_yn !== 0) {
				return false;
			}

			if ($this->confirmed_yn !== 0) {
				return false;
			}

			if ($this->blockorder !== 0) {
				return false;
			}

			if ($this->complete_yn !== 0) {
				return false;
			}

			if ($this->transportcosts !== '0.00') {
				return false;
			}

			if ($this->manual_transportcosts !== 0) {
				return false;
			}

			if ($this->ordercosts !== '0.00') {
				return false;
			}

			if ($this->manual_ordercosts !== 0) {
				return false;
			}

			if ($this->rma_yn !== 0) {
				return false;
			}

			if ($this->consignment_order !== 0) {
				return false;
			}

			if ($this->administration_order !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->orderid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->contactid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->contactsorderid = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->employeeid = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->orderdate = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->requireddate = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->shippeddate = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->xp_no = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->mailtable = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->shipvia = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->shipid = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->shipname = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->shipaddress = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->shipcity = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->shipregion = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->shippostalcode = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->shipcountry = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->locked_yn = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->comments = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->confirmed_yn = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->blockorder = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->confirmed_how = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->endcustomer_yn = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->paymentterm_yn = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->trackingnummer = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->btw_yn = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->price_level = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->complete_yn = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->transportcosts = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->manual_transportcosts = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->ordercosts = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->manual_ordercosts = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->employee = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->in_one_delivery_yn = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->rma_yn = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->consignment_order = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->administration_order = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 37; // 37 = OrdersPeer::NUM_COLUMNS - OrdersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Orders object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrdersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = OrdersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseOrders:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrdersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			OrdersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseOrders:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseOrders:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrdersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseOrders:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			OrdersPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = OrdersPeer::ORDERID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = OrdersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setOrderid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += OrdersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = OrdersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrdersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getOrderid();
				break;
			case 1:
				return $this->getContactid();
				break;
			case 2:
				return $this->getContactsorderid();
				break;
			case 3:
				return $this->getEmployeeid();
				break;
			case 4:
				return $this->getOrderdate();
				break;
			case 5:
				return $this->getRequireddate();
				break;
			case 6:
				return $this->getShippeddate();
				break;
			case 7:
				return $this->getXpNo();
				break;
			case 8:
				return $this->getMailtable();
				break;
			case 9:
				return $this->getShipvia();
				break;
			case 10:
				return $this->getShipid();
				break;
			case 11:
				return $this->getShipname();
				break;
			case 12:
				return $this->getShipaddress();
				break;
			case 13:
				return $this->getShipcity();
				break;
			case 14:
				return $this->getShipregion();
				break;
			case 15:
				return $this->getShippostalcode();
				break;
			case 16:
				return $this->getShipcountry();
				break;
			case 17:
				return $this->getLockedYn();
				break;
			case 18:
				return $this->getComments();
				break;
			case 19:
				return $this->getConfirmedYn();
				break;
			case 20:
				return $this->getBlockorder();
				break;
			case 21:
				return $this->getConfirmedHow();
				break;
			case 22:
				return $this->getEndcustomerYn();
				break;
			case 23:
				return $this->getPaymenttermYn();
				break;
			case 24:
				return $this->getTrackingnummer();
				break;
			case 25:
				return $this->getBtwYn();
				break;
			case 26:
				return $this->getPriceLevel();
				break;
			case 27:
				return $this->getCompleteYn();
				break;
			case 28:
				return $this->getTransportcosts();
				break;
			case 29:
				return $this->getManualTransportcosts();
				break;
			case 30:
				return $this->getOrdercosts();
				break;
			case 31:
				return $this->getManualOrdercosts();
				break;
			case 32:
				return $this->getEmployee();
				break;
			case 33:
				return $this->getInOneDeliveryYn();
				break;
			case 34:
				return $this->getRmaYn();
				break;
			case 35:
				return $this->getConsignmentOrder();
				break;
			case 36:
				return $this->getAdministrationOrder();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = OrdersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getOrderid(),
			$keys[1] => $this->getContactid(),
			$keys[2] => $this->getContactsorderid(),
			$keys[3] => $this->getEmployeeid(),
			$keys[4] => $this->getOrderdate(),
			$keys[5] => $this->getRequireddate(),
			$keys[6] => $this->getShippeddate(),
			$keys[7] => $this->getXpNo(),
			$keys[8] => $this->getMailtable(),
			$keys[9] => $this->getShipvia(),
			$keys[10] => $this->getShipid(),
			$keys[11] => $this->getShipname(),
			$keys[12] => $this->getShipaddress(),
			$keys[13] => $this->getShipcity(),
			$keys[14] => $this->getShipregion(),
			$keys[15] => $this->getShippostalcode(),
			$keys[16] => $this->getShipcountry(),
			$keys[17] => $this->getLockedYn(),
			$keys[18] => $this->getComments(),
			$keys[19] => $this->getConfirmedYn(),
			$keys[20] => $this->getBlockorder(),
			$keys[21] => $this->getConfirmedHow(),
			$keys[22] => $this->getEndcustomerYn(),
			$keys[23] => $this->getPaymenttermYn(),
			$keys[24] => $this->getTrackingnummer(),
			$keys[25] => $this->getBtwYn(),
			$keys[26] => $this->getPriceLevel(),
			$keys[27] => $this->getCompleteYn(),
			$keys[28] => $this->getTransportcosts(),
			$keys[29] => $this->getManualTransportcosts(),
			$keys[30] => $this->getOrdercosts(),
			$keys[31] => $this->getManualOrdercosts(),
			$keys[32] => $this->getEmployee(),
			$keys[33] => $this->getInOneDeliveryYn(),
			$keys[34] => $this->getRmaYn(),
			$keys[35] => $this->getConsignmentOrder(),
			$keys[36] => $this->getAdministrationOrder(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrdersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setOrderid($value);
				break;
			case 1:
				$this->setContactid($value);
				break;
			case 2:
				$this->setContactsorderid($value);
				break;
			case 3:
				$this->setEmployeeid($value);
				break;
			case 4:
				$this->setOrderdate($value);
				break;
			case 5:
				$this->setRequireddate($value);
				break;
			case 6:
				$this->setShippeddate($value);
				break;
			case 7:
				$this->setXpNo($value);
				break;
			case 8:
				$this->setMailtable($value);
				break;
			case 9:
				$this->setShipvia($value);
				break;
			case 10:
				$this->setShipid($value);
				break;
			case 11:
				$this->setShipname($value);
				break;
			case 12:
				$this->setShipaddress($value);
				break;
			case 13:
				$this->setShipcity($value);
				break;
			case 14:
				$this->setShipregion($value);
				break;
			case 15:
				$this->setShippostalcode($value);
				break;
			case 16:
				$this->setShipcountry($value);
				break;
			case 17:
				$this->setLockedYn($value);
				break;
			case 18:
				$this->setComments($value);
				break;
			case 19:
				$this->setConfirmedYn($value);
				break;
			case 20:
				$this->setBlockorder($value);
				break;
			case 21:
				$this->setConfirmedHow($value);
				break;
			case 22:
				$this->setEndcustomerYn($value);
				break;
			case 23:
				$this->setPaymenttermYn($value);
				break;
			case 24:
				$this->setTrackingnummer($value);
				break;
			case 25:
				$this->setBtwYn($value);
				break;
			case 26:
				$this->setPriceLevel($value);
				break;
			case 27:
				$this->setCompleteYn($value);
				break;
			case 28:
				$this->setTransportcosts($value);
				break;
			case 29:
				$this->setManualTransportcosts($value);
				break;
			case 30:
				$this->setOrdercosts($value);
				break;
			case 31:
				$this->setManualOrdercosts($value);
				break;
			case 32:
				$this->setEmployee($value);
				break;
			case 33:
				$this->setInOneDeliveryYn($value);
				break;
			case 34:
				$this->setRmaYn($value);
				break;
			case 35:
				$this->setConsignmentOrder($value);
				break;
			case 36:
				$this->setAdministrationOrder($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = OrdersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setOrderid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setContactid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setContactsorderid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmployeeid($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setOrderdate($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setRequireddate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setShippeddate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setXpNo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMailtable($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setShipvia($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setShipid($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setShipname($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setShipaddress($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setShipcity($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setShipregion($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setShippostalcode($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setShipcountry($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setLockedYn($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setComments($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setConfirmedYn($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setBlockorder($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setConfirmedHow($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setEndcustomerYn($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPaymenttermYn($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setTrackingnummer($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setBtwYn($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPriceLevel($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCompleteYn($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setTransportcosts($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setManualTransportcosts($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setOrdercosts($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setManualOrdercosts($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setEmployee($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setInOneDeliveryYn($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setRmaYn($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setConsignmentOrder($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setAdministrationOrder($arr[$keys[36]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(OrdersPeer::DATABASE_NAME);

		if ($this->isColumnModified(OrdersPeer::ORDERID)) $criteria->add(OrdersPeer::ORDERID, $this->orderid);
		if ($this->isColumnModified(OrdersPeer::CONTACTID)) $criteria->add(OrdersPeer::CONTACTID, $this->contactid);
		if ($this->isColumnModified(OrdersPeer::CONTACTSORDERID)) $criteria->add(OrdersPeer::CONTACTSORDERID, $this->contactsorderid);
		if ($this->isColumnModified(OrdersPeer::EMPLOYEEID)) $criteria->add(OrdersPeer::EMPLOYEEID, $this->employeeid);
		if ($this->isColumnModified(OrdersPeer::ORDERDATE)) $criteria->add(OrdersPeer::ORDERDATE, $this->orderdate);
		if ($this->isColumnModified(OrdersPeer::REQUIREDDATE)) $criteria->add(OrdersPeer::REQUIREDDATE, $this->requireddate);
		if ($this->isColumnModified(OrdersPeer::SHIPPEDDATE)) $criteria->add(OrdersPeer::SHIPPEDDATE, $this->shippeddate);
		if ($this->isColumnModified(OrdersPeer::XP_NO)) $criteria->add(OrdersPeer::XP_NO, $this->xp_no);
		if ($this->isColumnModified(OrdersPeer::MAILTABLE)) $criteria->add(OrdersPeer::MAILTABLE, $this->mailtable);
		if ($this->isColumnModified(OrdersPeer::SHIPVIA)) $criteria->add(OrdersPeer::SHIPVIA, $this->shipvia);
		if ($this->isColumnModified(OrdersPeer::SHIPID)) $criteria->add(OrdersPeer::SHIPID, $this->shipid);
		if ($this->isColumnModified(OrdersPeer::SHIPNAME)) $criteria->add(OrdersPeer::SHIPNAME, $this->shipname);
		if ($this->isColumnModified(OrdersPeer::SHIPADDRESS)) $criteria->add(OrdersPeer::SHIPADDRESS, $this->shipaddress);
		if ($this->isColumnModified(OrdersPeer::SHIPCITY)) $criteria->add(OrdersPeer::SHIPCITY, $this->shipcity);
		if ($this->isColumnModified(OrdersPeer::SHIPREGION)) $criteria->add(OrdersPeer::SHIPREGION, $this->shipregion);
		if ($this->isColumnModified(OrdersPeer::SHIPPOSTALCODE)) $criteria->add(OrdersPeer::SHIPPOSTALCODE, $this->shippostalcode);
		if ($this->isColumnModified(OrdersPeer::SHIPCOUNTRY)) $criteria->add(OrdersPeer::SHIPCOUNTRY, $this->shipcountry);
		if ($this->isColumnModified(OrdersPeer::LOCKED_YN)) $criteria->add(OrdersPeer::LOCKED_YN, $this->locked_yn);
		if ($this->isColumnModified(OrdersPeer::COMMENTS)) $criteria->add(OrdersPeer::COMMENTS, $this->comments);
		if ($this->isColumnModified(OrdersPeer::CONFIRMED_YN)) $criteria->add(OrdersPeer::CONFIRMED_YN, $this->confirmed_yn);
		if ($this->isColumnModified(OrdersPeer::BLOCKORDER)) $criteria->add(OrdersPeer::BLOCKORDER, $this->blockorder);
		if ($this->isColumnModified(OrdersPeer::CONFIRMED_HOW)) $criteria->add(OrdersPeer::CONFIRMED_HOW, $this->confirmed_how);
		if ($this->isColumnModified(OrdersPeer::ENDCUSTOMER_YN)) $criteria->add(OrdersPeer::ENDCUSTOMER_YN, $this->endcustomer_yn);
		if ($this->isColumnModified(OrdersPeer::PAYMENTTERM_YN)) $criteria->add(OrdersPeer::PAYMENTTERM_YN, $this->paymentterm_yn);
		if ($this->isColumnModified(OrdersPeer::TRACKINGNUMMER)) $criteria->add(OrdersPeer::TRACKINGNUMMER, $this->trackingnummer);
		if ($this->isColumnModified(OrdersPeer::BTW_YN)) $criteria->add(OrdersPeer::BTW_YN, $this->btw_yn);
		if ($this->isColumnModified(OrdersPeer::PRICE_LEVEL)) $criteria->add(OrdersPeer::PRICE_LEVEL, $this->price_level);
		if ($this->isColumnModified(OrdersPeer::COMPLETE_YN)) $criteria->add(OrdersPeer::COMPLETE_YN, $this->complete_yn);
		if ($this->isColumnModified(OrdersPeer::TRANSPORTCOSTS)) $criteria->add(OrdersPeer::TRANSPORTCOSTS, $this->transportcosts);
		if ($this->isColumnModified(OrdersPeer::MANUAL_TRANSPORTCOSTS)) $criteria->add(OrdersPeer::MANUAL_TRANSPORTCOSTS, $this->manual_transportcosts);
		if ($this->isColumnModified(OrdersPeer::ORDERCOSTS)) $criteria->add(OrdersPeer::ORDERCOSTS, $this->ordercosts);
		if ($this->isColumnModified(OrdersPeer::MANUAL_ORDERCOSTS)) $criteria->add(OrdersPeer::MANUAL_ORDERCOSTS, $this->manual_ordercosts);
		if ($this->isColumnModified(OrdersPeer::EMPLOYEE)) $criteria->add(OrdersPeer::EMPLOYEE, $this->employee);
		if ($this->isColumnModified(OrdersPeer::IN_ONE_DELIVERY_YN)) $criteria->add(OrdersPeer::IN_ONE_DELIVERY_YN, $this->in_one_delivery_yn);
		if ($this->isColumnModified(OrdersPeer::RMA_YN)) $criteria->add(OrdersPeer::RMA_YN, $this->rma_yn);
		if ($this->isColumnModified(OrdersPeer::CONSIGNMENT_ORDER)) $criteria->add(OrdersPeer::CONSIGNMENT_ORDER, $this->consignment_order);
		if ($this->isColumnModified(OrdersPeer::ADMINISTRATION_ORDER)) $criteria->add(OrdersPeer::ADMINISTRATION_ORDER, $this->administration_order);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(OrdersPeer::DATABASE_NAME);

		$criteria->add(OrdersPeer::ORDERID, $this->orderid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getOrderid();
	}

	/**
	 * Generic method to set the primary key (orderid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setOrderid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Orders (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setContactid($this->contactid);

		$copyObj->setContactsorderid($this->contactsorderid);

		$copyObj->setEmployeeid($this->employeeid);

		$copyObj->setOrderdate($this->orderdate);

		$copyObj->setRequireddate($this->requireddate);

		$copyObj->setShippeddate($this->shippeddate);

		$copyObj->setXpNo($this->xp_no);

		$copyObj->setMailtable($this->mailtable);

		$copyObj->setShipvia($this->shipvia);

		$copyObj->setShipid($this->shipid);

		$copyObj->setShipname($this->shipname);

		$copyObj->setShipaddress($this->shipaddress);

		$copyObj->setShipcity($this->shipcity);

		$copyObj->setShipregion($this->shipregion);

		$copyObj->setShippostalcode($this->shippostalcode);

		$copyObj->setShipcountry($this->shipcountry);

		$copyObj->setLockedYn($this->locked_yn);

		$copyObj->setComments($this->comments);

		$copyObj->setConfirmedYn($this->confirmed_yn);

		$copyObj->setBlockorder($this->blockorder);

		$copyObj->setConfirmedHow($this->confirmed_how);

		$copyObj->setEndcustomerYn($this->endcustomer_yn);

		$copyObj->setPaymenttermYn($this->paymentterm_yn);

		$copyObj->setTrackingnummer($this->trackingnummer);

		$copyObj->setBtwYn($this->btw_yn);

		$copyObj->setPriceLevel($this->price_level);

		$copyObj->setCompleteYn($this->complete_yn);

		$copyObj->setTransportcosts($this->transportcosts);

		$copyObj->setManualTransportcosts($this->manual_transportcosts);

		$copyObj->setOrdercosts($this->ordercosts);

		$copyObj->setManualOrdercosts($this->manual_ordercosts);

		$copyObj->setEmployee($this->employee);

		$copyObj->setInOneDeliveryYn($this->in_one_delivery_yn);

		$copyObj->setRmaYn($this->rma_yn);

		$copyObj->setConsignmentOrder($this->consignment_order);

		$copyObj->setAdministrationOrder($this->administration_order);


		$copyObj->setNew(true);

		$copyObj->setOrderid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Orders Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     OrdersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new OrdersPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseOrders:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseOrders::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseOrders
