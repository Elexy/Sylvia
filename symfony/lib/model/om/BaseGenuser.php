<?php

/**
 * Base class that represents a row from the 'genuser' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:37 2009
 *
 * @package    lib.model.om
 */
abstract class BaseGenuser extends BaseObject  implements Persistent {


  const PEER = 'GenuserPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        GenuserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        double
	 */
	protected $id;

	/**
	 * The value for the uid field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $uid;

	/**
	 * The value for the pwd field.
	 * @var        string
	 */
	protected $pwd;

	/**
	 * The value for the raccess_s field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $raccess_s;

	/**
	 * The value for the raccess_a field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $raccess_a;

	/**
	 * The value for the raccess_v field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $raccess_v;

	/**
	 * The value for the raccess_r field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $raccess_r;

	/**
	 * The value for the waccess_s field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $waccess_s;

	/**
	 * The value for the waccess_a field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $waccess_a;

	/**
	 * The value for the waccess_v field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $waccess_v;

	/**
	 * The value for the waccess_r field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $waccess_r;

	/**
	 * The value for the saccess_s field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $saccess_s;

	/**
	 * The value for the saccess_a field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $saccess_a;

	/**
	 * The value for the saccess_v field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $saccess_v;

	/**
	 * The value for the saccess_r field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $saccess_r;

	/**
	 * The value for the supervisor field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $supervisor;

	/**
	 * The value for the email field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the logon_attempts field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $logon_attempts;

	/**
	 * The value for the active field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $active;

	/**
	 * The value for the stylesheetid field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $stylesheetid;

	/**
	 * The value for the deflanguage field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $deflanguage;

	/**
	 * The value for the contactid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $contactid;

	/**
	 * The value for the employee_id field.
	 * @var        int
	 */
	protected $employee_id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseGenuser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->uid = '';
		$this->raccess_s = 0;
		$this->raccess_a = 0;
		$this->raccess_v = 0;
		$this->raccess_r = 0;
		$this->waccess_s = 0;
		$this->waccess_a = 0;
		$this->waccess_v = 0;
		$this->waccess_r = 0;
		$this->saccess_s = 0;
		$this->saccess_a = 0;
		$this->saccess_v = 0;
		$this->saccess_r = 0;
		$this->supervisor = 0;
		$this->email = '';
		$this->logon_attempts = 0;
		$this->active = 0;
		$this->stylesheetid = 1;
		$this->deflanguage = 1;
		$this->contactid = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     double
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     string
	 */
	public function getUid()
	{
		return $this->uid;
	}

	/**
	 * Get the [pwd] column value.
	 * 
	 * @return     string
	 */
	public function getPwd()
	{
		return $this->pwd;
	}

	/**
	 * Get the [raccess_s] column value.
	 * 
	 * @return     int
	 */
	public function getRaccessS()
	{
		return $this->raccess_s;
	}

	/**
	 * Get the [raccess_a] column value.
	 * 
	 * @return     int
	 */
	public function getRaccessA()
	{
		return $this->raccess_a;
	}

	/**
	 * Get the [raccess_v] column value.
	 * 
	 * @return     int
	 */
	public function getRaccessV()
	{
		return $this->raccess_v;
	}

	/**
	 * Get the [raccess_r] column value.
	 * 
	 * @return     int
	 */
	public function getRaccessR()
	{
		return $this->raccess_r;
	}

	/**
	 * Get the [waccess_s] column value.
	 * 
	 * @return     int
	 */
	public function getWaccessS()
	{
		return $this->waccess_s;
	}

	/**
	 * Get the [waccess_a] column value.
	 * 
	 * @return     int
	 */
	public function getWaccessA()
	{
		return $this->waccess_a;
	}

	/**
	 * Get the [waccess_v] column value.
	 * 
	 * @return     int
	 */
	public function getWaccessV()
	{
		return $this->waccess_v;
	}

	/**
	 * Get the [waccess_r] column value.
	 * 
	 * @return     int
	 */
	public function getWaccessR()
	{
		return $this->waccess_r;
	}

	/**
	 * Get the [saccess_s] column value.
	 * 
	 * @return     int
	 */
	public function getSaccessS()
	{
		return $this->saccess_s;
	}

	/**
	 * Get the [saccess_a] column value.
	 * 
	 * @return     int
	 */
	public function getSaccessA()
	{
		return $this->saccess_a;
	}

	/**
	 * Get the [saccess_v] column value.
	 * 
	 * @return     int
	 */
	public function getSaccessV()
	{
		return $this->saccess_v;
	}

	/**
	 * Get the [saccess_r] column value.
	 * 
	 * @return     int
	 */
	public function getSaccessR()
	{
		return $this->saccess_r;
	}

	/**
	 * Get the [supervisor] column value.
	 * 
	 * @return     int
	 */
	public function getSupervisor()
	{
		return $this->supervisor;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [logon_attempts] column value.
	 * 
	 * @return     int
	 */
	public function getLogonAttempts()
	{
		return $this->logon_attempts;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     int
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [stylesheetid] column value.
	 * 
	 * @return     int
	 */
	public function getStylesheetid()
	{
		return $this->stylesheetid;
	}

	/**
	 * Get the [deflanguage] column value.
	 * 
	 * @return     int
	 */
	public function getDeflanguage()
	{
		return $this->deflanguage;
	}

	/**
	 * Get the [contactid] column value.
	 * 
	 * @return     int
	 */
	public function getContactid()
	{
		return $this->contactid;
	}

	/**
	 * Get the [employee_id] column value.
	 * 
	 * @return     int
	 */
	public function getEmployeeId()
	{
		return $this->employee_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      double $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = GenuserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      string $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uid !== $v || $v === '') {
			$this->uid = $v;
			$this->modifiedColumns[] = GenuserPeer::UID;
		}

		return $this;
	} // setUid()

	/**
	 * Set the value of [pwd] column.
	 * 
	 * @param      string $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setPwd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pwd !== $v) {
			$this->pwd = $v;
			$this->modifiedColumns[] = GenuserPeer::PWD;
		}

		return $this;
	} // setPwd()

	/**
	 * Set the value of [raccess_s] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setRaccessS($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->raccess_s !== $v || $v === 0) {
			$this->raccess_s = $v;
			$this->modifiedColumns[] = GenuserPeer::RACCESS_S;
		}

		return $this;
	} // setRaccessS()

	/**
	 * Set the value of [raccess_a] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setRaccessA($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->raccess_a !== $v || $v === 0) {
			$this->raccess_a = $v;
			$this->modifiedColumns[] = GenuserPeer::RACCESS_A;
		}

		return $this;
	} // setRaccessA()

	/**
	 * Set the value of [raccess_v] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setRaccessV($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->raccess_v !== $v || $v === 0) {
			$this->raccess_v = $v;
			$this->modifiedColumns[] = GenuserPeer::RACCESS_V;
		}

		return $this;
	} // setRaccessV()

	/**
	 * Set the value of [raccess_r] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setRaccessR($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->raccess_r !== $v || $v === 0) {
			$this->raccess_r = $v;
			$this->modifiedColumns[] = GenuserPeer::RACCESS_R;
		}

		return $this;
	} // setRaccessR()

	/**
	 * Set the value of [waccess_s] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setWaccessS($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->waccess_s !== $v || $v === 0) {
			$this->waccess_s = $v;
			$this->modifiedColumns[] = GenuserPeer::WACCESS_S;
		}

		return $this;
	} // setWaccessS()

	/**
	 * Set the value of [waccess_a] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setWaccessA($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->waccess_a !== $v || $v === 0) {
			$this->waccess_a = $v;
			$this->modifiedColumns[] = GenuserPeer::WACCESS_A;
		}

		return $this;
	} // setWaccessA()

	/**
	 * Set the value of [waccess_v] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setWaccessV($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->waccess_v !== $v || $v === 0) {
			$this->waccess_v = $v;
			$this->modifiedColumns[] = GenuserPeer::WACCESS_V;
		}

		return $this;
	} // setWaccessV()

	/**
	 * Set the value of [waccess_r] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setWaccessR($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->waccess_r !== $v || $v === 0) {
			$this->waccess_r = $v;
			$this->modifiedColumns[] = GenuserPeer::WACCESS_R;
		}

		return $this;
	} // setWaccessR()

	/**
	 * Set the value of [saccess_s] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setSaccessS($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saccess_s !== $v || $v === 0) {
			$this->saccess_s = $v;
			$this->modifiedColumns[] = GenuserPeer::SACCESS_S;
		}

		return $this;
	} // setSaccessS()

	/**
	 * Set the value of [saccess_a] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setSaccessA($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saccess_a !== $v || $v === 0) {
			$this->saccess_a = $v;
			$this->modifiedColumns[] = GenuserPeer::SACCESS_A;
		}

		return $this;
	} // setSaccessA()

	/**
	 * Set the value of [saccess_v] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setSaccessV($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saccess_v !== $v || $v === 0) {
			$this->saccess_v = $v;
			$this->modifiedColumns[] = GenuserPeer::SACCESS_V;
		}

		return $this;
	} // setSaccessV()

	/**
	 * Set the value of [saccess_r] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setSaccessR($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saccess_r !== $v || $v === 0) {
			$this->saccess_r = $v;
			$this->modifiedColumns[] = GenuserPeer::SACCESS_R;
		}

		return $this;
	} // setSaccessR()

	/**
	 * Set the value of [supervisor] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setSupervisor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->supervisor !== $v || $v === 0) {
			$this->supervisor = $v;
			$this->modifiedColumns[] = GenuserPeer::SUPERVISOR;
		}

		return $this;
	} // setSupervisor()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v || $v === '') {
			$this->email = $v;
			$this->modifiedColumns[] = GenuserPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [logon_attempts] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setLogonAttempts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->logon_attempts !== $v || $v === 0) {
			$this->logon_attempts = $v;
			$this->modifiedColumns[] = GenuserPeer::LOGON_ATTEMPTS;
		}

		return $this;
	} // setLogonAttempts()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->active !== $v || $v === 0) {
			$this->active = $v;
			$this->modifiedColumns[] = GenuserPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [stylesheetid] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setStylesheetid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->stylesheetid !== $v || $v === 1) {
			$this->stylesheetid = $v;
			$this->modifiedColumns[] = GenuserPeer::STYLESHEETID;
		}

		return $this;
	} // setStylesheetid()

	/**
	 * Set the value of [deflanguage] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setDeflanguage($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->deflanguage !== $v || $v === 1) {
			$this->deflanguage = $v;
			$this->modifiedColumns[] = GenuserPeer::DEFLANGUAGE;
		}

		return $this;
	} // setDeflanguage()

	/**
	 * Set the value of [contactid] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setContactid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contactid !== $v || $v === 0) {
			$this->contactid = $v;
			$this->modifiedColumns[] = GenuserPeer::CONTACTID;
		}

		return $this;
	} // setContactid()

	/**
	 * Set the value of [employee_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Genuser The current object (for fluent API support)
	 */
	public function setEmployeeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employee_id !== $v) {
			$this->employee_id = $v;
			$this->modifiedColumns[] = GenuserPeer::EMPLOYEE_ID;
		}

		return $this;
	} // setEmployeeId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(GenuserPeer::UID,GenuserPeer::RACCESS_S,GenuserPeer::RACCESS_A,GenuserPeer::RACCESS_V,GenuserPeer::RACCESS_R,GenuserPeer::WACCESS_S,GenuserPeer::WACCESS_A,GenuserPeer::WACCESS_V,GenuserPeer::WACCESS_R,GenuserPeer::SACCESS_S,GenuserPeer::SACCESS_A,GenuserPeer::SACCESS_V,GenuserPeer::SACCESS_R,GenuserPeer::SUPERVISOR,GenuserPeer::EMAIL,GenuserPeer::LOGON_ATTEMPTS,GenuserPeer::ACTIVE,GenuserPeer::STYLESHEETID,GenuserPeer::DEFLANGUAGE,GenuserPeer::CONTACTID))) {
				return false;
			}

			if ($this->uid !== '') {
				return false;
			}

			if ($this->raccess_s !== 0) {
				return false;
			}

			if ($this->raccess_a !== 0) {
				return false;
			}

			if ($this->raccess_v !== 0) {
				return false;
			}

			if ($this->raccess_r !== 0) {
				return false;
			}

			if ($this->waccess_s !== 0) {
				return false;
			}

			if ($this->waccess_a !== 0) {
				return false;
			}

			if ($this->waccess_v !== 0) {
				return false;
			}

			if ($this->waccess_r !== 0) {
				return false;
			}

			if ($this->saccess_s !== 0) {
				return false;
			}

			if ($this->saccess_a !== 0) {
				return false;
			}

			if ($this->saccess_v !== 0) {
				return false;
			}

			if ($this->saccess_r !== 0) {
				return false;
			}

			if ($this->supervisor !== 0) {
				return false;
			}

			if ($this->email !== '') {
				return false;
			}

			if ($this->logon_attempts !== 0) {
				return false;
			}

			if ($this->active !== 0) {
				return false;
			}

			if ($this->stylesheetid !== 1) {
				return false;
			}

			if ($this->deflanguage !== 1) {
				return false;
			}

			if ($this->contactid !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (double) $row[$startcol + 0] : null;
			$this->uid = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->pwd = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->raccess_s = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->raccess_a = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->raccess_v = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->raccess_r = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->waccess_s = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->waccess_a = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->waccess_v = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->waccess_r = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->saccess_s = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->saccess_a = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->saccess_v = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->saccess_r = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->supervisor = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->email = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->logon_attempts = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->active = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->stylesheetid = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->deflanguage = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->contactid = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->employee_id = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = GenuserPeer::NUM_COLUMNS - GenuserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Genuser object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GenuserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = GenuserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGenuser:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GenuserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			GenuserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseGenuser:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseGenuser:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(GenuserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseGenuser:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			GenuserPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = GenuserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = GenuserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += GenuserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = GenuserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GenuserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUid();
				break;
			case 2:
				return $this->getPwd();
				break;
			case 3:
				return $this->getRaccessS();
				break;
			case 4:
				return $this->getRaccessA();
				break;
			case 5:
				return $this->getRaccessV();
				break;
			case 6:
				return $this->getRaccessR();
				break;
			case 7:
				return $this->getWaccessS();
				break;
			case 8:
				return $this->getWaccessA();
				break;
			case 9:
				return $this->getWaccessV();
				break;
			case 10:
				return $this->getWaccessR();
				break;
			case 11:
				return $this->getSaccessS();
				break;
			case 12:
				return $this->getSaccessA();
				break;
			case 13:
				return $this->getSaccessV();
				break;
			case 14:
				return $this->getSaccessR();
				break;
			case 15:
				return $this->getSupervisor();
				break;
			case 16:
				return $this->getEmail();
				break;
			case 17:
				return $this->getLogonAttempts();
				break;
			case 18:
				return $this->getActive();
				break;
			case 19:
				return $this->getStylesheetid();
				break;
			case 20:
				return $this->getDeflanguage();
				break;
			case 21:
				return $this->getContactid();
				break;
			case 22:
				return $this->getEmployeeId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = GenuserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUid(),
			$keys[2] => $this->getPwd(),
			$keys[3] => $this->getRaccessS(),
			$keys[4] => $this->getRaccessA(),
			$keys[5] => $this->getRaccessV(),
			$keys[6] => $this->getRaccessR(),
			$keys[7] => $this->getWaccessS(),
			$keys[8] => $this->getWaccessA(),
			$keys[9] => $this->getWaccessV(),
			$keys[10] => $this->getWaccessR(),
			$keys[11] => $this->getSaccessS(),
			$keys[12] => $this->getSaccessA(),
			$keys[13] => $this->getSaccessV(),
			$keys[14] => $this->getSaccessR(),
			$keys[15] => $this->getSupervisor(),
			$keys[16] => $this->getEmail(),
			$keys[17] => $this->getLogonAttempts(),
			$keys[18] => $this->getActive(),
			$keys[19] => $this->getStylesheetid(),
			$keys[20] => $this->getDeflanguage(),
			$keys[21] => $this->getContactid(),
			$keys[22] => $this->getEmployeeId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = GenuserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUid($value);
				break;
			case 2:
				$this->setPwd($value);
				break;
			case 3:
				$this->setRaccessS($value);
				break;
			case 4:
				$this->setRaccessA($value);
				break;
			case 5:
				$this->setRaccessV($value);
				break;
			case 6:
				$this->setRaccessR($value);
				break;
			case 7:
				$this->setWaccessS($value);
				break;
			case 8:
				$this->setWaccessA($value);
				break;
			case 9:
				$this->setWaccessV($value);
				break;
			case 10:
				$this->setWaccessR($value);
				break;
			case 11:
				$this->setSaccessS($value);
				break;
			case 12:
				$this->setSaccessA($value);
				break;
			case 13:
				$this->setSaccessV($value);
				break;
			case 14:
				$this->setSaccessR($value);
				break;
			case 15:
				$this->setSupervisor($value);
				break;
			case 16:
				$this->setEmail($value);
				break;
			case 17:
				$this->setLogonAttempts($value);
				break;
			case 18:
				$this->setActive($value);
				break;
			case 19:
				$this->setStylesheetid($value);
				break;
			case 20:
				$this->setDeflanguage($value);
				break;
			case 21:
				$this->setContactid($value);
				break;
			case 22:
				$this->setEmployeeId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = GenuserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPwd($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRaccessS($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRaccessA($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setRaccessV($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRaccessR($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setWaccessS($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setWaccessA($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setWaccessV($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setWaccessR($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setSaccessS($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSaccessA($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSaccessV($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSaccessR($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setSupervisor($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setEmail($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setLogonAttempts($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setActive($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setStylesheetid($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDeflanguage($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setContactid($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setEmployeeId($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(GenuserPeer::DATABASE_NAME);

		if ($this->isColumnModified(GenuserPeer::ID)) $criteria->add(GenuserPeer::ID, $this->id);
		if ($this->isColumnModified(GenuserPeer::UID)) $criteria->add(GenuserPeer::UID, $this->uid);
		if ($this->isColumnModified(GenuserPeer::PWD)) $criteria->add(GenuserPeer::PWD, $this->pwd);
		if ($this->isColumnModified(GenuserPeer::RACCESS_S)) $criteria->add(GenuserPeer::RACCESS_S, $this->raccess_s);
		if ($this->isColumnModified(GenuserPeer::RACCESS_A)) $criteria->add(GenuserPeer::RACCESS_A, $this->raccess_a);
		if ($this->isColumnModified(GenuserPeer::RACCESS_V)) $criteria->add(GenuserPeer::RACCESS_V, $this->raccess_v);
		if ($this->isColumnModified(GenuserPeer::RACCESS_R)) $criteria->add(GenuserPeer::RACCESS_R, $this->raccess_r);
		if ($this->isColumnModified(GenuserPeer::WACCESS_S)) $criteria->add(GenuserPeer::WACCESS_S, $this->waccess_s);
		if ($this->isColumnModified(GenuserPeer::WACCESS_A)) $criteria->add(GenuserPeer::WACCESS_A, $this->waccess_a);
		if ($this->isColumnModified(GenuserPeer::WACCESS_V)) $criteria->add(GenuserPeer::WACCESS_V, $this->waccess_v);
		if ($this->isColumnModified(GenuserPeer::WACCESS_R)) $criteria->add(GenuserPeer::WACCESS_R, $this->waccess_r);
		if ($this->isColumnModified(GenuserPeer::SACCESS_S)) $criteria->add(GenuserPeer::SACCESS_S, $this->saccess_s);
		if ($this->isColumnModified(GenuserPeer::SACCESS_A)) $criteria->add(GenuserPeer::SACCESS_A, $this->saccess_a);
		if ($this->isColumnModified(GenuserPeer::SACCESS_V)) $criteria->add(GenuserPeer::SACCESS_V, $this->saccess_v);
		if ($this->isColumnModified(GenuserPeer::SACCESS_R)) $criteria->add(GenuserPeer::SACCESS_R, $this->saccess_r);
		if ($this->isColumnModified(GenuserPeer::SUPERVISOR)) $criteria->add(GenuserPeer::SUPERVISOR, $this->supervisor);
		if ($this->isColumnModified(GenuserPeer::EMAIL)) $criteria->add(GenuserPeer::EMAIL, $this->email);
		if ($this->isColumnModified(GenuserPeer::LOGON_ATTEMPTS)) $criteria->add(GenuserPeer::LOGON_ATTEMPTS, $this->logon_attempts);
		if ($this->isColumnModified(GenuserPeer::ACTIVE)) $criteria->add(GenuserPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(GenuserPeer::STYLESHEETID)) $criteria->add(GenuserPeer::STYLESHEETID, $this->stylesheetid);
		if ($this->isColumnModified(GenuserPeer::DEFLANGUAGE)) $criteria->add(GenuserPeer::DEFLANGUAGE, $this->deflanguage);
		if ($this->isColumnModified(GenuserPeer::CONTACTID)) $criteria->add(GenuserPeer::CONTACTID, $this->contactid);
		if ($this->isColumnModified(GenuserPeer::EMPLOYEE_ID)) $criteria->add(GenuserPeer::EMPLOYEE_ID, $this->employee_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(GenuserPeer::DATABASE_NAME);

		$criteria->add(GenuserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     double
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      double $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Genuser (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUid($this->uid);

		$copyObj->setPwd($this->pwd);

		$copyObj->setRaccessS($this->raccess_s);

		$copyObj->setRaccessA($this->raccess_a);

		$copyObj->setRaccessV($this->raccess_v);

		$copyObj->setRaccessR($this->raccess_r);

		$copyObj->setWaccessS($this->waccess_s);

		$copyObj->setWaccessA($this->waccess_a);

		$copyObj->setWaccessV($this->waccess_v);

		$copyObj->setWaccessR($this->waccess_r);

		$copyObj->setSaccessS($this->saccess_s);

		$copyObj->setSaccessA($this->saccess_a);

		$copyObj->setSaccessV($this->saccess_v);

		$copyObj->setSaccessR($this->saccess_r);

		$copyObj->setSupervisor($this->supervisor);

		$copyObj->setEmail($this->email);

		$copyObj->setLogonAttempts($this->logon_attempts);

		$copyObj->setActive($this->active);

		$copyObj->setStylesheetid($this->stylesheetid);

		$copyObj->setDeflanguage($this->deflanguage);

		$copyObj->setContactid($this->contactid);

		$copyObj->setEmployeeId($this->employee_id);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Genuser Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     GenuserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new GenuserPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseGenuser:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseGenuser::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseGenuser
