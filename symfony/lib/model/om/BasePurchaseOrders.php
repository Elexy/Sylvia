<?php

/**
 * Base class that represents a row from the 'purchase_orders' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:40 2009
 *
 * @package    lib.model.om
 */
abstract class BasePurchaseOrders extends BaseObject  implements Persistent {


  const PEER = 'PurchaseOrdersPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PurchaseOrdersPeer
	 */
	protected static $peer;

	/**
	 * The value for the purchaseorderid field.
	 * @var        int
	 */
	protected $purchaseorderid;

	/**
	 * The value for the purchaseordernumber field.
	 * @var        string
	 */
	protected $purchaseordernumber;

	/**
	 * The value for the purchaseorderdescription field.
	 * @var        string
	 */
	protected $purchaseorderdescription;

	/**
	 * The value for the supplierid field.
	 * @var        int
	 */
	protected $supplierid;

	/**
	 * The value for the employeeid field.
	 * @var        int
	 */
	protected $employeeid;

	/**
	 * The value for the orderdate field.
	 * @var        string
	 */
	protected $orderdate;

	/**
	 * The value for the shipcontactid field.
	 * @var        int
	 */
	protected $shipcontactid;

	/**
	 * The value for the ship_adresid field.
	 * @var        int
	 */
	protected $ship_adresid;

	/**
	 * The value for the shipname field.
	 * @var        string
	 */
	protected $shipname;

	/**
	 * The value for the shipaddress field.
	 * @var        string
	 */
	protected $shipaddress;

	/**
	 * The value for the shippostalcode field.
	 * @var        string
	 */
	protected $shippostalcode;

	/**
	 * The value for the shipcity field.
	 * @var        string
	 */
	protected $shipcity;

	/**
	 * The value for the shipcountry field.
	 * @var        string
	 */
	protected $shipcountry;

	/**
	 * The value for the daterequired field.
	 * @var        string
	 */
	protected $daterequired;

	/**
	 * The value for the datepromised field.
	 * @var        string
	 */
	protected $datepromised;

	/**
	 * The value for the shipdate field.
	 * @var        string
	 */
	protected $shipdate;

	/**
	 * The value for the shippingmethodid field.
	 * @var        int
	 */
	protected $shippingmethodid;

	/**
	 * The value for the freightcharge field.
	 * @var        int
	 */
	protected $freightcharge;

	/**
	 * The value for the order_currency field.
	 * Note: this column has a database default value of: 2
	 * @var        int
	 */
	protected $order_currency;

	/**
	 * The value for the btw_yn field.
	 * @var        int
	 */
	protected $btw_yn;

	/**
	 * The value for the po_sent field.
	 * @var        string
	 */
	protected $po_sent;

	/**
	 * The value for the status field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the buyer_contactid field.
	 * @var        int
	 */
	protected $buyer_contactid;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePurchaseOrders object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->order_currency = 2;
		$this->status = 1;
	}

	/**
	 * Get the [purchaseorderid] column value.
	 * 
	 * @return     int
	 */
	public function getPurchaseorderid()
	{
		return $this->purchaseorderid;
	}

	/**
	 * Get the [purchaseordernumber] column value.
	 * 
	 * @return     string
	 */
	public function getPurchaseordernumber()
	{
		return $this->purchaseordernumber;
	}

	/**
	 * Get the [purchaseorderdescription] column value.
	 * 
	 * @return     string
	 */
	public function getPurchaseorderdescription()
	{
		return $this->purchaseorderdescription;
	}

	/**
	 * Get the [supplierid] column value.
	 * 
	 * @return     int
	 */
	public function getSupplierid()
	{
		return $this->supplierid;
	}

	/**
	 * Get the [employeeid] column value.
	 * 
	 * @return     int
	 */
	public function getEmployeeid()
	{
		return $this->employeeid;
	}

	/**
	 * Get the [optionally formatted] temporal [orderdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getOrderdate($format = 'Y-m-d H:i:s')
	{
		if ($this->orderdate === null) {
			return null;
		}


		if ($this->orderdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->orderdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->orderdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [shipcontactid] column value.
	 * 
	 * @return     int
	 */
	public function getShipcontactid()
	{
		return $this->shipcontactid;
	}

	/**
	 * Get the [ship_adresid] column value.
	 * 
	 * @return     int
	 */
	public function getShipAdresid()
	{
		return $this->ship_adresid;
	}

	/**
	 * Get the [shipname] column value.
	 * 
	 * @return     string
	 */
	public function getShipname()
	{
		return $this->shipname;
	}

	/**
	 * Get the [shipaddress] column value.
	 * 
	 * @return     string
	 */
	public function getShipaddress()
	{
		return $this->shipaddress;
	}

	/**
	 * Get the [shippostalcode] column value.
	 * 
	 * @return     string
	 */
	public function getShippostalcode()
	{
		return $this->shippostalcode;
	}

	/**
	 * Get the [shipcity] column value.
	 * 
	 * @return     string
	 */
	public function getShipcity()
	{
		return $this->shipcity;
	}

	/**
	 * Get the [shipcountry] column value.
	 * 
	 * @return     string
	 */
	public function getShipcountry()
	{
		return $this->shipcountry;
	}

	/**
	 * Get the [optionally formatted] temporal [daterequired] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDaterequired($format = 'Y-m-d H:i:s')
	{
		if ($this->daterequired === null) {
			return null;
		}


		if ($this->daterequired === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->daterequired);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->daterequired, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datepromised] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatepromised($format = 'Y-m-d H:i:s')
	{
		if ($this->datepromised === null) {
			return null;
		}


		if ($this->datepromised === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datepromised);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datepromised, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [shipdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getShipdate($format = 'Y-m-d H:i:s')
	{
		if ($this->shipdate === null) {
			return null;
		}


		if ($this->shipdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->shipdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->shipdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [shippingmethodid] column value.
	 * 
	 * @return     int
	 */
	public function getShippingmethodid()
	{
		return $this->shippingmethodid;
	}

	/**
	 * Get the [freightcharge] column value.
	 * 
	 * @return     int
	 */
	public function getFreightcharge()
	{
		return $this->freightcharge;
	}

	/**
	 * Get the [order_currency] column value.
	 * 
	 * @return     int
	 */
	public function getOrderCurrency()
	{
		return $this->order_currency;
	}

	/**
	 * Get the [btw_yn] column value.
	 * 
	 * @return     int
	 */
	public function getBtwYn()
	{
		return $this->btw_yn;
	}

	/**
	 * Get the [optionally formatted] temporal [po_sent] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPoSent($format = 'Y-m-d H:i:s')
	{
		if ($this->po_sent === null) {
			return null;
		}


		if ($this->po_sent === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->po_sent);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->po_sent, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [buyer_contactid] column value.
	 * 
	 * @return     int
	 */
	public function getBuyerContactid()
	{
		return $this->buyer_contactid;
	}

	/**
	 * Set the value of [purchaseorderid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setPurchaseorderid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->purchaseorderid !== $v) {
			$this->purchaseorderid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::PURCHASEORDERID;
		}

		return $this;
	} // setPurchaseorderid()

	/**
	 * Set the value of [purchaseordernumber] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setPurchaseordernumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->purchaseordernumber !== $v) {
			$this->purchaseordernumber = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::PURCHASEORDERNUMBER;
		}

		return $this;
	} // setPurchaseordernumber()

	/**
	 * Set the value of [purchaseorderdescription] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setPurchaseorderdescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->purchaseorderdescription !== $v) {
			$this->purchaseorderdescription = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::PURCHASEORDERDESCRIPTION;
		}

		return $this;
	} // setPurchaseorderdescription()

	/**
	 * Set the value of [supplierid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setSupplierid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->supplierid !== $v) {
			$this->supplierid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SUPPLIERID;
		}

		return $this;
	} // setSupplierid()

	/**
	 * Set the value of [employeeid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setEmployeeid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employeeid !== $v) {
			$this->employeeid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::EMPLOYEEID;
		}

		return $this;
	} // setEmployeeid()

	/**
	 * Sets the value of [orderdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setOrderdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->orderdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->orderdate !== null && $tmpDt = new DateTime($this->orderdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->orderdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PurchaseOrdersPeer::ORDERDATE;
			}
		} // if either are not null

		return $this;
	} // setOrderdate()

	/**
	 * Set the value of [shipcontactid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipcontactid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->shipcontactid !== $v) {
			$this->shipcontactid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPCONTACTID;
		}

		return $this;
	} // setShipcontactid()

	/**
	 * Set the value of [ship_adresid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipAdresid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ship_adresid !== $v) {
			$this->ship_adresid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIP_ADRESID;
		}

		return $this;
	} // setShipAdresid()

	/**
	 * Set the value of [shipname] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipname !== $v) {
			$this->shipname = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPNAME;
		}

		return $this;
	} // setShipname()

	/**
	 * Set the value of [shipaddress] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipaddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipaddress !== $v) {
			$this->shipaddress = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPADDRESS;
		}

		return $this;
	} // setShipaddress()

	/**
	 * Set the value of [shippostalcode] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShippostalcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shippostalcode !== $v) {
			$this->shippostalcode = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPPOSTALCODE;
		}

		return $this;
	} // setShippostalcode()

	/**
	 * Set the value of [shipcity] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipcity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipcity !== $v) {
			$this->shipcity = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPCITY;
		}

		return $this;
	} // setShipcity()

	/**
	 * Set the value of [shipcountry] column.
	 * 
	 * @param      string $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipcountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shipcountry !== $v) {
			$this->shipcountry = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPCOUNTRY;
		}

		return $this;
	} // setShipcountry()

	/**
	 * Sets the value of [daterequired] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setDaterequired($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->daterequired !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->daterequired !== null && $tmpDt = new DateTime($this->daterequired)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->daterequired = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PurchaseOrdersPeer::DATEREQUIRED;
			}
		} // if either are not null

		return $this;
	} // setDaterequired()

	/**
	 * Sets the value of [datepromised] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setDatepromised($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datepromised !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datepromised !== null && $tmpDt = new DateTime($this->datepromised)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datepromised = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PurchaseOrdersPeer::DATEPROMISED;
			}
		} // if either are not null

		return $this;
	} // setDatepromised()

	/**
	 * Sets the value of [shipdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShipdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->shipdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->shipdate !== null && $tmpDt = new DateTime($this->shipdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->shipdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPDATE;
			}
		} // if either are not null

		return $this;
	} // setShipdate()

	/**
	 * Set the value of [shippingmethodid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setShippingmethodid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->shippingmethodid !== $v) {
			$this->shippingmethodid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::SHIPPINGMETHODID;
		}

		return $this;
	} // setShippingmethodid()

	/**
	 * Set the value of [freightcharge] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setFreightcharge($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->freightcharge !== $v) {
			$this->freightcharge = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::FREIGHTCHARGE;
		}

		return $this;
	} // setFreightcharge()

	/**
	 * Set the value of [order_currency] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setOrderCurrency($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->order_currency !== $v || $v === 2) {
			$this->order_currency = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::ORDER_CURRENCY;
		}

		return $this;
	} // setOrderCurrency()

	/**
	 * Set the value of [btw_yn] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setBtwYn($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->btw_yn !== $v) {
			$this->btw_yn = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::BTW_YN;
		}

		return $this;
	} // setBtwYn()

	/**
	 * Sets the value of [po_sent] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setPoSent($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->po_sent !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->po_sent !== null && $tmpDt = new DateTime($this->po_sent)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->po_sent = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PurchaseOrdersPeer::PO_SENT;
			}
		} // if either are not null

		return $this;
	} // setPoSent()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v || $v === 1) {
			$this->status = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [buyer_contactid] column.
	 * 
	 * @param      int $v new value
	 * @return     PurchaseOrders The current object (for fluent API support)
	 */
	public function setBuyerContactid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->buyer_contactid !== $v) {
			$this->buyer_contactid = $v;
			$this->modifiedColumns[] = PurchaseOrdersPeer::BUYER_CONTACTID;
		}

		return $this;
	} // setBuyerContactid()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PurchaseOrdersPeer::ORDER_CURRENCY,PurchaseOrdersPeer::STATUS))) {
				return false;
			}

			if ($this->order_currency !== 2) {
				return false;
			}

			if ($this->status !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->purchaseorderid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->purchaseordernumber = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->purchaseorderdescription = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->supplierid = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->employeeid = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->orderdate = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->shipcontactid = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->ship_adresid = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->shipname = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->shipaddress = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->shippostalcode = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->shipcity = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->shipcountry = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->daterequired = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->datepromised = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->shipdate = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->shippingmethodid = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->freightcharge = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->order_currency = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->btw_yn = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->po_sent = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->status = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->buyer_contactid = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = PurchaseOrdersPeer::NUM_COLUMNS - PurchaseOrdersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PurchaseOrders object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PurchaseOrdersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PurchaseOrdersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePurchaseOrders:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PurchaseOrdersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PurchaseOrdersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePurchaseOrders:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePurchaseOrders:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PurchaseOrdersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePurchaseOrders:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PurchaseOrdersPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PurchaseOrdersPeer::PURCHASEORDERID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PurchaseOrdersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setPurchaseorderid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PurchaseOrdersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PurchaseOrdersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PurchaseOrdersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPurchaseorderid();
				break;
			case 1:
				return $this->getPurchaseordernumber();
				break;
			case 2:
				return $this->getPurchaseorderdescription();
				break;
			case 3:
				return $this->getSupplierid();
				break;
			case 4:
				return $this->getEmployeeid();
				break;
			case 5:
				return $this->getOrderdate();
				break;
			case 6:
				return $this->getShipcontactid();
				break;
			case 7:
				return $this->getShipAdresid();
				break;
			case 8:
				return $this->getShipname();
				break;
			case 9:
				return $this->getShipaddress();
				break;
			case 10:
				return $this->getShippostalcode();
				break;
			case 11:
				return $this->getShipcity();
				break;
			case 12:
				return $this->getShipcountry();
				break;
			case 13:
				return $this->getDaterequired();
				break;
			case 14:
				return $this->getDatepromised();
				break;
			case 15:
				return $this->getShipdate();
				break;
			case 16:
				return $this->getShippingmethodid();
				break;
			case 17:
				return $this->getFreightcharge();
				break;
			case 18:
				return $this->getOrderCurrency();
				break;
			case 19:
				return $this->getBtwYn();
				break;
			case 20:
				return $this->getPoSent();
				break;
			case 21:
				return $this->getStatus();
				break;
			case 22:
				return $this->getBuyerContactid();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PurchaseOrdersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPurchaseorderid(),
			$keys[1] => $this->getPurchaseordernumber(),
			$keys[2] => $this->getPurchaseorderdescription(),
			$keys[3] => $this->getSupplierid(),
			$keys[4] => $this->getEmployeeid(),
			$keys[5] => $this->getOrderdate(),
			$keys[6] => $this->getShipcontactid(),
			$keys[7] => $this->getShipAdresid(),
			$keys[8] => $this->getShipname(),
			$keys[9] => $this->getShipaddress(),
			$keys[10] => $this->getShippostalcode(),
			$keys[11] => $this->getShipcity(),
			$keys[12] => $this->getShipcountry(),
			$keys[13] => $this->getDaterequired(),
			$keys[14] => $this->getDatepromised(),
			$keys[15] => $this->getShipdate(),
			$keys[16] => $this->getShippingmethodid(),
			$keys[17] => $this->getFreightcharge(),
			$keys[18] => $this->getOrderCurrency(),
			$keys[19] => $this->getBtwYn(),
			$keys[20] => $this->getPoSent(),
			$keys[21] => $this->getStatus(),
			$keys[22] => $this->getBuyerContactid(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PurchaseOrdersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPurchaseorderid($value);
				break;
			case 1:
				$this->setPurchaseordernumber($value);
				break;
			case 2:
				$this->setPurchaseorderdescription($value);
				break;
			case 3:
				$this->setSupplierid($value);
				break;
			case 4:
				$this->setEmployeeid($value);
				break;
			case 5:
				$this->setOrderdate($value);
				break;
			case 6:
				$this->setShipcontactid($value);
				break;
			case 7:
				$this->setShipAdresid($value);
				break;
			case 8:
				$this->setShipname($value);
				break;
			case 9:
				$this->setShipaddress($value);
				break;
			case 10:
				$this->setShippostalcode($value);
				break;
			case 11:
				$this->setShipcity($value);
				break;
			case 12:
				$this->setShipcountry($value);
				break;
			case 13:
				$this->setDaterequired($value);
				break;
			case 14:
				$this->setDatepromised($value);
				break;
			case 15:
				$this->setShipdate($value);
				break;
			case 16:
				$this->setShippingmethodid($value);
				break;
			case 17:
				$this->setFreightcharge($value);
				break;
			case 18:
				$this->setOrderCurrency($value);
				break;
			case 19:
				$this->setBtwYn($value);
				break;
			case 20:
				$this->setPoSent($value);
				break;
			case 21:
				$this->setStatus($value);
				break;
			case 22:
				$this->setBuyerContactid($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PurchaseOrdersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPurchaseorderid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPurchaseordernumber($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPurchaseorderdescription($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSupplierid($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmployeeid($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setOrderdate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setShipcontactid($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setShipAdresid($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setShipname($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setShipaddress($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setShippostalcode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setShipcity($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setShipcountry($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDaterequired($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDatepromised($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setShipdate($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setShippingmethodid($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setFreightcharge($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setOrderCurrency($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setBtwYn($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPoSent($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setStatus($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBuyerContactid($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PurchaseOrdersPeer::DATABASE_NAME);

		if ($this->isColumnModified(PurchaseOrdersPeer::PURCHASEORDERID)) $criteria->add(PurchaseOrdersPeer::PURCHASEORDERID, $this->purchaseorderid);
		if ($this->isColumnModified(PurchaseOrdersPeer::PURCHASEORDERNUMBER)) $criteria->add(PurchaseOrdersPeer::PURCHASEORDERNUMBER, $this->purchaseordernumber);
		if ($this->isColumnModified(PurchaseOrdersPeer::PURCHASEORDERDESCRIPTION)) $criteria->add(PurchaseOrdersPeer::PURCHASEORDERDESCRIPTION, $this->purchaseorderdescription);
		if ($this->isColumnModified(PurchaseOrdersPeer::SUPPLIERID)) $criteria->add(PurchaseOrdersPeer::SUPPLIERID, $this->supplierid);
		if ($this->isColumnModified(PurchaseOrdersPeer::EMPLOYEEID)) $criteria->add(PurchaseOrdersPeer::EMPLOYEEID, $this->employeeid);
		if ($this->isColumnModified(PurchaseOrdersPeer::ORDERDATE)) $criteria->add(PurchaseOrdersPeer::ORDERDATE, $this->orderdate);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPCONTACTID)) $criteria->add(PurchaseOrdersPeer::SHIPCONTACTID, $this->shipcontactid);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIP_ADRESID)) $criteria->add(PurchaseOrdersPeer::SHIP_ADRESID, $this->ship_adresid);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPNAME)) $criteria->add(PurchaseOrdersPeer::SHIPNAME, $this->shipname);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPADDRESS)) $criteria->add(PurchaseOrdersPeer::SHIPADDRESS, $this->shipaddress);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPPOSTALCODE)) $criteria->add(PurchaseOrdersPeer::SHIPPOSTALCODE, $this->shippostalcode);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPCITY)) $criteria->add(PurchaseOrdersPeer::SHIPCITY, $this->shipcity);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPCOUNTRY)) $criteria->add(PurchaseOrdersPeer::SHIPCOUNTRY, $this->shipcountry);
		if ($this->isColumnModified(PurchaseOrdersPeer::DATEREQUIRED)) $criteria->add(PurchaseOrdersPeer::DATEREQUIRED, $this->daterequired);
		if ($this->isColumnModified(PurchaseOrdersPeer::DATEPROMISED)) $criteria->add(PurchaseOrdersPeer::DATEPROMISED, $this->datepromised);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPDATE)) $criteria->add(PurchaseOrdersPeer::SHIPDATE, $this->shipdate);
		if ($this->isColumnModified(PurchaseOrdersPeer::SHIPPINGMETHODID)) $criteria->add(PurchaseOrdersPeer::SHIPPINGMETHODID, $this->shippingmethodid);
		if ($this->isColumnModified(PurchaseOrdersPeer::FREIGHTCHARGE)) $criteria->add(PurchaseOrdersPeer::FREIGHTCHARGE, $this->freightcharge);
		if ($this->isColumnModified(PurchaseOrdersPeer::ORDER_CURRENCY)) $criteria->add(PurchaseOrdersPeer::ORDER_CURRENCY, $this->order_currency);
		if ($this->isColumnModified(PurchaseOrdersPeer::BTW_YN)) $criteria->add(PurchaseOrdersPeer::BTW_YN, $this->btw_yn);
		if ($this->isColumnModified(PurchaseOrdersPeer::PO_SENT)) $criteria->add(PurchaseOrdersPeer::PO_SENT, $this->po_sent);
		if ($this->isColumnModified(PurchaseOrdersPeer::STATUS)) $criteria->add(PurchaseOrdersPeer::STATUS, $this->status);
		if ($this->isColumnModified(PurchaseOrdersPeer::BUYER_CONTACTID)) $criteria->add(PurchaseOrdersPeer::BUYER_CONTACTID, $this->buyer_contactid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PurchaseOrdersPeer::DATABASE_NAME);

		$criteria->add(PurchaseOrdersPeer::PURCHASEORDERID, $this->purchaseorderid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getPurchaseorderid();
	}

	/**
	 * Generic method to set the primary key (purchaseorderid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setPurchaseorderid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PurchaseOrders (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPurchaseordernumber($this->purchaseordernumber);

		$copyObj->setPurchaseorderdescription($this->purchaseorderdescription);

		$copyObj->setSupplierid($this->supplierid);

		$copyObj->setEmployeeid($this->employeeid);

		$copyObj->setOrderdate($this->orderdate);

		$copyObj->setShipcontactid($this->shipcontactid);

		$copyObj->setShipAdresid($this->ship_adresid);

		$copyObj->setShipname($this->shipname);

		$copyObj->setShipaddress($this->shipaddress);

		$copyObj->setShippostalcode($this->shippostalcode);

		$copyObj->setShipcity($this->shipcity);

		$copyObj->setShipcountry($this->shipcountry);

		$copyObj->setDaterequired($this->daterequired);

		$copyObj->setDatepromised($this->datepromised);

		$copyObj->setShipdate($this->shipdate);

		$copyObj->setShippingmethodid($this->shippingmethodid);

		$copyObj->setFreightcharge($this->freightcharge);

		$copyObj->setOrderCurrency($this->order_currency);

		$copyObj->setBtwYn($this->btw_yn);

		$copyObj->setPoSent($this->po_sent);

		$copyObj->setStatus($this->status);

		$copyObj->setBuyerContactid($this->buyer_contactid);


		$copyObj->setNew(true);

		$copyObj->setPurchaseorderid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PurchaseOrders Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PurchaseOrdersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PurchaseOrdersPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePurchaseOrders:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePurchaseOrders::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePurchaseOrders
