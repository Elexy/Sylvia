<?php

/**
 * Base static class for performing query and update operations on the 'order_details' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:38 2009
 *
 * @package    lib.model.om
 */
abstract class BaseOrderDetailsPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'order_details';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.OrderDetails';

	/** The total number of columns. */
	const NUM_COLUMNS = 21;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ORDERDETAILSID field */
	const ORDERDETAILSID = 'order_details.ORDERDETAILSID';

	/** the column name for the ORDERID field */
	const ORDERID = 'order_details.ORDERID';

	/** the column name for the PRODUCTID field */
	const PRODUCTID = 'order_details.PRODUCTID';

	/** the column name for the PRODUCTNAME field */
	const PRODUCTNAME = 'order_details.PRODUCTNAME';

	/** the column name for the PRODUCTDESCRIPTION field */
	const PRODUCTDESCRIPTION = 'order_details.PRODUCTDESCRIPTION';

	/** the column name for the UNITPRICE field */
	const UNITPRICE = 'order_details.UNITPRICE';

	/** the column name for the UNITCOST field */
	const UNITCOST = 'order_details.UNITCOST';

	/** the column name for the UNITBTW field */
	const UNITBTW = 'order_details.UNITBTW';

	/** the column name for the QUANTITY field */
	const QUANTITY = 'order_details.QUANTITY';

	/** the column name for the TO_DELIVER field */
	const TO_DELIVER = 'order_details.TO_DELIVER';

	/** the column name for the EXTENDED_PRICE field */
	const EXTENDED_PRICE = 'order_details.EXTENDED_PRICE';

	/** the column name for the DISCOUNT field */
	const DISCOUNT = 'order_details.DISCOUNT';

	/** the column name for the SERIALNB field */
	const SERIALNB = 'order_details.SERIALNB';

	/** the column name for the CONTACTID field */
	const CONTACTID = 'order_details.CONTACTID';

	/** the column name for the ORDERDATE field */
	const ORDERDATE = 'order_details.ORDERDATE';

	/** the column name for the BTW_PERCENTAGE field */
	const BTW_PERCENTAGE = 'order_details.BTW_PERCENTAGE';

	/** the column name for the COST_PERCENTAGE field */
	const COST_PERCENTAGE = 'order_details.COST_PERCENTAGE';

	/** the column name for the MANUAL_PRICE field */
	const MANUAL_PRICE = 'order_details.MANUAL_PRICE';

	/** the column name for the RMA_ACTIONID field */
	const RMA_ACTIONID = 'order_details.RMA_ACTIONID';

	/** the column name for the CUSTORDERROWID field */
	const CUSTORDERROWID = 'order_details.CUSTORDERROWID';

	/** the column name for the STOCK_OWNER_ID field */
	const STOCK_OWNER_ID = 'order_details.STOCK_OWNER_ID';

	/**
	 * An identiy map to hold any loaded instances of OrderDetails objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array OrderDetails[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Orderdetailsid', 'Orderid', 'Productid', 'Productname', 'Productdescription', 'Unitprice', 'Unitcost', 'Unitbtw', 'Quantity', 'ToDeliver', 'ExtendedPrice', 'Discount', 'Serialnb', 'Contactid', 'Orderdate', 'BtwPercentage', 'CostPercentage', 'ManualPrice', 'RmaActionid', 'Custorderrowid', 'StockOwnerId', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('orderdetailsid', 'orderid', 'productid', 'productname', 'productdescription', 'unitprice', 'unitcost', 'unitbtw', 'quantity', 'toDeliver', 'extendedPrice', 'discount', 'serialnb', 'contactid', 'orderdate', 'btwPercentage', 'costPercentage', 'manualPrice', 'rmaActionid', 'custorderrowid', 'stockOwnerId', ),
		BasePeer::TYPE_COLNAME => array (self::ORDERDETAILSID, self::ORDERID, self::PRODUCTID, self::PRODUCTNAME, self::PRODUCTDESCRIPTION, self::UNITPRICE, self::UNITCOST, self::UNITBTW, self::QUANTITY, self::TO_DELIVER, self::EXTENDED_PRICE, self::DISCOUNT, self::SERIALNB, self::CONTACTID, self::ORDERDATE, self::BTW_PERCENTAGE, self::COST_PERCENTAGE, self::MANUAL_PRICE, self::RMA_ACTIONID, self::CUSTORDERROWID, self::STOCK_OWNER_ID, ),
		BasePeer::TYPE_FIELDNAME => array ('OrderDetailsID', 'OrderID', 'ProductID', 'ProductName', 'ProductDescription', 'UnitPrice', 'UnitCost', 'UnitBTW', 'Quantity', 'to_deliver', 'Extended_price', 'Discount', 'SerialNB', 'ContactID', 'Orderdate', 'btw_percentage', 'cost_percentage', 'manual_price', 'RMA_actionID', 'CustOrderRowID', 'stock_owner_id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Orderdetailsid' => 0, 'Orderid' => 1, 'Productid' => 2, 'Productname' => 3, 'Productdescription' => 4, 'Unitprice' => 5, 'Unitcost' => 6, 'Unitbtw' => 7, 'Quantity' => 8, 'ToDeliver' => 9, 'ExtendedPrice' => 10, 'Discount' => 11, 'Serialnb' => 12, 'Contactid' => 13, 'Orderdate' => 14, 'BtwPercentage' => 15, 'CostPercentage' => 16, 'ManualPrice' => 17, 'RmaActionid' => 18, 'Custorderrowid' => 19, 'StockOwnerId' => 20, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('orderdetailsid' => 0, 'orderid' => 1, 'productid' => 2, 'productname' => 3, 'productdescription' => 4, 'unitprice' => 5, 'unitcost' => 6, 'unitbtw' => 7, 'quantity' => 8, 'toDeliver' => 9, 'extendedPrice' => 10, 'discount' => 11, 'serialnb' => 12, 'contactid' => 13, 'orderdate' => 14, 'btwPercentage' => 15, 'costPercentage' => 16, 'manualPrice' => 17, 'rmaActionid' => 18, 'custorderrowid' => 19, 'stockOwnerId' => 20, ),
		BasePeer::TYPE_COLNAME => array (self::ORDERDETAILSID => 0, self::ORDERID => 1, self::PRODUCTID => 2, self::PRODUCTNAME => 3, self::PRODUCTDESCRIPTION => 4, self::UNITPRICE => 5, self::UNITCOST => 6, self::UNITBTW => 7, self::QUANTITY => 8, self::TO_DELIVER => 9, self::EXTENDED_PRICE => 10, self::DISCOUNT => 11, self::SERIALNB => 12, self::CONTACTID => 13, self::ORDERDATE => 14, self::BTW_PERCENTAGE => 15, self::COST_PERCENTAGE => 16, self::MANUAL_PRICE => 17, self::RMA_ACTIONID => 18, self::CUSTORDERROWID => 19, self::STOCK_OWNER_ID => 20, ),
		BasePeer::TYPE_FIELDNAME => array ('OrderDetailsID' => 0, 'OrderID' => 1, 'ProductID' => 2, 'ProductName' => 3, 'ProductDescription' => 4, 'UnitPrice' => 5, 'UnitCost' => 6, 'UnitBTW' => 7, 'Quantity' => 8, 'to_deliver' => 9, 'Extended_price' => 10, 'Discount' => 11, 'SerialNB' => 12, 'ContactID' => 13, 'Orderdate' => 14, 'btw_percentage' => 15, 'cost_percentage' => 16, 'manual_price' => 17, 'RMA_actionID' => 18, 'CustOrderRowID' => 19, 'stock_owner_id' => 20, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new OrderDetailsMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. OrderDetailsPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(OrderDetailsPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(OrderDetailsPeer::ORDERDETAILSID);

		$criteria->addSelectColumn(OrderDetailsPeer::ORDERID);

		$criteria->addSelectColumn(OrderDetailsPeer::PRODUCTID);

		$criteria->addSelectColumn(OrderDetailsPeer::PRODUCTNAME);

		$criteria->addSelectColumn(OrderDetailsPeer::PRODUCTDESCRIPTION);

		$criteria->addSelectColumn(OrderDetailsPeer::UNITPRICE);

		$criteria->addSelectColumn(OrderDetailsPeer::UNITCOST);

		$criteria->addSelectColumn(OrderDetailsPeer::UNITBTW);

		$criteria->addSelectColumn(OrderDetailsPeer::QUANTITY);

		$criteria->addSelectColumn(OrderDetailsPeer::TO_DELIVER);

		$criteria->addSelectColumn(OrderDetailsPeer::EXTENDED_PRICE);

		$criteria->addSelectColumn(OrderDetailsPeer::DISCOUNT);

		$criteria->addSelectColumn(OrderDetailsPeer::SERIALNB);

		$criteria->addSelectColumn(OrderDetailsPeer::CONTACTID);

		$criteria->addSelectColumn(OrderDetailsPeer::ORDERDATE);

		$criteria->addSelectColumn(OrderDetailsPeer::BTW_PERCENTAGE);

		$criteria->addSelectColumn(OrderDetailsPeer::COST_PERCENTAGE);

		$criteria->addSelectColumn(OrderDetailsPeer::MANUAL_PRICE);

		$criteria->addSelectColumn(OrderDetailsPeer::RMA_ACTIONID);

		$criteria->addSelectColumn(OrderDetailsPeer::CUSTORDERROWID);

		$criteria->addSelectColumn(OrderDetailsPeer::STOCK_OWNER_ID);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(OrderDetailsPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			OrderDetailsPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseOrderDetailsPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     OrderDetails
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = OrderDetailsPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return OrderDetailsPeer::populateObjects(OrderDetailsPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseOrderDetailsPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			OrderDetailsPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      OrderDetails $value A OrderDetails object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(OrderDetails $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getOrderdetailsid();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A OrderDetails object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof OrderDetails) {
				$key = (string) $value->getOrderdetailsid();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or OrderDetails object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     OrderDetails Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = OrderDetailsPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = OrderDetailsPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = OrderDetailsPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				OrderDetailsPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return OrderDetailsPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a OrderDetails or Criteria object.
	 *
	 * @param      mixed $values Criteria or OrderDetails object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseOrderDetailsPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from OrderDetails object
		}

		if ($criteria->containsKey(OrderDetailsPeer::ORDERDETAILSID) && $criteria->keyContainsValue(OrderDetailsPeer::ORDERDETAILSID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.OrderDetailsPeer::ORDERDETAILSID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseOrderDetailsPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a OrderDetails or Criteria object.
	 *
	 * @param      mixed $values Criteria or OrderDetails object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseOrderDetailsPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(OrderDetailsPeer::ORDERDETAILSID);
			$selectCriteria->add(OrderDetailsPeer::ORDERDETAILSID, $criteria->remove(OrderDetailsPeer::ORDERDETAILSID), $comparison);

		} else { // $values is OrderDetails object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseOrderDetailsPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseOrderDetailsPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the order_details table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(OrderDetailsPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a OrderDetails or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or OrderDetails object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			OrderDetailsPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof OrderDetails) {
			// invalidate the cache for this single object
			OrderDetailsPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(OrderDetailsPeer::ORDERDETAILSID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				OrderDetailsPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given OrderDetails object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      OrderDetails $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(OrderDetails $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(OrderDetailsPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(OrderDetailsPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(OrderDetailsPeer::DATABASE_NAME, OrderDetailsPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = OrderDetailsPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     OrderDetails
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = OrderDetailsPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(OrderDetailsPeer::DATABASE_NAME);
		$criteria->add(OrderDetailsPeer::ORDERDETAILSID, $pk);

		$v = OrderDetailsPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(OrderDetailsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(OrderDetailsPeer::DATABASE_NAME);
			$criteria->add(OrderDetailsPeer::ORDERDETAILSID, $pks, Criteria::IN);
			$objs = OrderDetailsPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseOrderDetailsPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the OrderDetailsPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the OrderDetailsPeer class:
//
// Propel::getDatabaseMap(OrderDetailsPeer::DATABASE_NAME)->addTableBuilder(OrderDetailsPeer::TABLE_NAME, OrderDetailsPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseOrderDetailsPeer::DATABASE_NAME)->addTableBuilder(BaseOrderDetailsPeer::TABLE_NAME, BaseOrderDetailsPeer::getMapBuilder());

