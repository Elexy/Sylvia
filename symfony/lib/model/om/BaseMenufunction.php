<?php

/**
 * Base class that represents a row from the 'menufunction' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jun  2 11:52:38 2009
 *
 * @package    lib.model.om
 */
abstract class BaseMenufunction extends BaseObject  implements Persistent {


  const PEER = 'MenufunctionPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MenufunctionPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the menucategoryid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $menucategoryid;

	/**
	 * The value for the name field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the imagename field.
	 * @var        string
	 */
	protected $imagename;

	/**
	 * The value for the link field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $link;

	/**
	 * The value for the orderflag field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $orderflag;

	/**
	 * The value for the access_s field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $access_s;

	/**
	 * The value for the access_a field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $access_a;

	/**
	 * The value for the access_v field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $access_v;

	/**
	 * The value for the access_r field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $access_r;

	/**
	 * The value for the setup_s field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $setup_s;

	/**
	 * The value for the setup_a field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $setup_a;

	/**
	 * The value for the setup_v field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $setup_v;

	/**
	 * The value for the setup_r field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $setup_r;

	/**
	 * The value for the supervisor field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $supervisor;

	/**
	 * The value for the nonsupervisor field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $nonsupervisor;

	/**
	 * The value for the extvend field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $extvend;

	/**
	 * The value for the extcust field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $extcust;

	/**
	 * The value for the nonext field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $nonext;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMenufunction object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->menucategoryid = 0;
		$this->name = '';
		$this->link = '';
		$this->orderflag = 0;
		$this->access_s = 0;
		$this->access_a = 0;
		$this->access_v = 0;
		$this->access_r = 0;
		$this->setup_s = 0;
		$this->setup_a = 0;
		$this->setup_v = 0;
		$this->setup_r = 0;
		$this->supervisor = 0;
		$this->nonsupervisor = 0;
		$this->extvend = 0;
		$this->extcust = 0;
		$this->nonext = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [menucategoryid] column value.
	 * 
	 * @return     int
	 */
	public function getMenucategoryid()
	{
		return $this->menucategoryid;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [imagename] column value.
	 * 
	 * @return     string
	 */
	public function getImagename()
	{
		return $this->imagename;
	}

	/**
	 * Get the [link] column value.
	 * 
	 * @return     string
	 */
	public function getLink()
	{
		return $this->link;
	}

	/**
	 * Get the [orderflag] column value.
	 * 
	 * @return     int
	 */
	public function getOrderflag()
	{
		return $this->orderflag;
	}

	/**
	 * Get the [access_s] column value.
	 * 
	 * @return     int
	 */
	public function getAccessS()
	{
		return $this->access_s;
	}

	/**
	 * Get the [access_a] column value.
	 * 
	 * @return     int
	 */
	public function getAccessA()
	{
		return $this->access_a;
	}

	/**
	 * Get the [access_v] column value.
	 * 
	 * @return     int
	 */
	public function getAccessV()
	{
		return $this->access_v;
	}

	/**
	 * Get the [access_r] column value.
	 * 
	 * @return     int
	 */
	public function getAccessR()
	{
		return $this->access_r;
	}

	/**
	 * Get the [setup_s] column value.
	 * 
	 * @return     int
	 */
	public function getSetupS()
	{
		return $this->setup_s;
	}

	/**
	 * Get the [setup_a] column value.
	 * 
	 * @return     int
	 */
	public function getSetupA()
	{
		return $this->setup_a;
	}

	/**
	 * Get the [setup_v] column value.
	 * 
	 * @return     int
	 */
	public function getSetupV()
	{
		return $this->setup_v;
	}

	/**
	 * Get the [setup_r] column value.
	 * 
	 * @return     int
	 */
	public function getSetupR()
	{
		return $this->setup_r;
	}

	/**
	 * Get the [supervisor] column value.
	 * 
	 * @return     int
	 */
	public function getSupervisor()
	{
		return $this->supervisor;
	}

	/**
	 * Get the [nonsupervisor] column value.
	 * 
	 * @return     int
	 */
	public function getNonsupervisor()
	{
		return $this->nonsupervisor;
	}

	/**
	 * Get the [extvend] column value.
	 * 
	 * @return     int
	 */
	public function getExtvend()
	{
		return $this->extvend;
	}

	/**
	 * Get the [extcust] column value.
	 * 
	 * @return     int
	 */
	public function getExtcust()
	{
		return $this->extcust;
	}

	/**
	 * Get the [nonext] column value.
	 * 
	 * @return     int
	 */
	public function getNonext()
	{
		return $this->nonext;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [menucategoryid] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setMenucategoryid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->menucategoryid !== $v || $v === 0) {
			$this->menucategoryid = $v;
			$this->modifiedColumns[] = MenufunctionPeer::MENUCATEGORYID;
		}

		return $this;
	} // setMenucategoryid()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v || $v === '') {
			$this->name = $v;
			$this->modifiedColumns[] = MenufunctionPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [imagename] column.
	 * 
	 * @param      string $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setImagename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->imagename !== $v) {
			$this->imagename = $v;
			$this->modifiedColumns[] = MenufunctionPeer::IMAGENAME;
		}

		return $this;
	} // setImagename()

	/**
	 * Set the value of [link] column.
	 * 
	 * @param      string $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setLink($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->link !== $v || $v === '') {
			$this->link = $v;
			$this->modifiedColumns[] = MenufunctionPeer::LINK;
		}

		return $this;
	} // setLink()

	/**
	 * Set the value of [orderflag] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setOrderflag($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orderflag !== $v || $v === 0) {
			$this->orderflag = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ORDERFLAG;
		}

		return $this;
	} // setOrderflag()

	/**
	 * Set the value of [access_s] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setAccessS($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->access_s !== $v || $v === 0) {
			$this->access_s = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ACCESS_S;
		}

		return $this;
	} // setAccessS()

	/**
	 * Set the value of [access_a] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setAccessA($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->access_a !== $v || $v === 0) {
			$this->access_a = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ACCESS_A;
		}

		return $this;
	} // setAccessA()

	/**
	 * Set the value of [access_v] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setAccessV($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->access_v !== $v || $v === 0) {
			$this->access_v = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ACCESS_V;
		}

		return $this;
	} // setAccessV()

	/**
	 * Set the value of [access_r] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setAccessR($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->access_r !== $v || $v === 0) {
			$this->access_r = $v;
			$this->modifiedColumns[] = MenufunctionPeer::ACCESS_R;
		}

		return $this;
	} // setAccessR()

	/**
	 * Set the value of [setup_s] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setSetupS($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->setup_s !== $v || $v === 0) {
			$this->setup_s = $v;
			$this->modifiedColumns[] = MenufunctionPeer::SETUP_S;
		}

		return $this;
	} // setSetupS()

	/**
	 * Set the value of [setup_a] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setSetupA($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->setup_a !== $v || $v === 0) {
			$this->setup_a = $v;
			$this->modifiedColumns[] = MenufunctionPeer::SETUP_A;
		}

		return $this;
	} // setSetupA()

	/**
	 * Set the value of [setup_v] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setSetupV($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->setup_v !== $v || $v === 0) {
			$this->setup_v = $v;
			$this->modifiedColumns[] = MenufunctionPeer::SETUP_V;
		}

		return $this;
	} // setSetupV()

	/**
	 * Set the value of [setup_r] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setSetupR($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->setup_r !== $v || $v === 0) {
			$this->setup_r = $v;
			$this->modifiedColumns[] = MenufunctionPeer::SETUP_R;
		}

		return $this;
	} // setSetupR()

	/**
	 * Set the value of [supervisor] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setSupervisor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->supervisor !== $v || $v === 0) {
			$this->supervisor = $v;
			$this->modifiedColumns[] = MenufunctionPeer::SUPERVISOR;
		}

		return $this;
	} // setSupervisor()

	/**
	 * Set the value of [nonsupervisor] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setNonsupervisor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nonsupervisor !== $v || $v === 0) {
			$this->nonsupervisor = $v;
			$this->modifiedColumns[] = MenufunctionPeer::NONSUPERVISOR;
		}

		return $this;
	} // setNonsupervisor()

	/**
	 * Set the value of [extvend] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setExtvend($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->extvend !== $v || $v === 0) {
			$this->extvend = $v;
			$this->modifiedColumns[] = MenufunctionPeer::EXTVEND;
		}

		return $this;
	} // setExtvend()

	/**
	 * Set the value of [extcust] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setExtcust($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->extcust !== $v || $v === 0) {
			$this->extcust = $v;
			$this->modifiedColumns[] = MenufunctionPeer::EXTCUST;
		}

		return $this;
	} // setExtcust()

	/**
	 * Set the value of [nonext] column.
	 * 
	 * @param      int $v new value
	 * @return     Menufunction The current object (for fluent API support)
	 */
	public function setNonext($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nonext !== $v || $v === 0) {
			$this->nonext = $v;
			$this->modifiedColumns[] = MenufunctionPeer::NONEXT;
		}

		return $this;
	} // setNonext()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(MenufunctionPeer::MENUCATEGORYID,MenufunctionPeer::NAME,MenufunctionPeer::LINK,MenufunctionPeer::ORDERFLAG,MenufunctionPeer::ACCESS_S,MenufunctionPeer::ACCESS_A,MenufunctionPeer::ACCESS_V,MenufunctionPeer::ACCESS_R,MenufunctionPeer::SETUP_S,MenufunctionPeer::SETUP_A,MenufunctionPeer::SETUP_V,MenufunctionPeer::SETUP_R,MenufunctionPeer::SUPERVISOR,MenufunctionPeer::NONSUPERVISOR,MenufunctionPeer::EXTVEND,MenufunctionPeer::EXTCUST,MenufunctionPeer::NONEXT))) {
				return false;
			}

			if ($this->menucategoryid !== 0) {
				return false;
			}

			if ($this->name !== '') {
				return false;
			}

			if ($this->link !== '') {
				return false;
			}

			if ($this->orderflag !== 0) {
				return false;
			}

			if ($this->access_s !== 0) {
				return false;
			}

			if ($this->access_a !== 0) {
				return false;
			}

			if ($this->access_v !== 0) {
				return false;
			}

			if ($this->access_r !== 0) {
				return false;
			}

			if ($this->setup_s !== 0) {
				return false;
			}

			if ($this->setup_a !== 0) {
				return false;
			}

			if ($this->setup_v !== 0) {
				return false;
			}

			if ($this->setup_r !== 0) {
				return false;
			}

			if ($this->supervisor !== 0) {
				return false;
			}

			if ($this->nonsupervisor !== 0) {
				return false;
			}

			if ($this->extvend !== 0) {
				return false;
			}

			if ($this->extcust !== 0) {
				return false;
			}

			if ($this->nonext !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->menucategoryid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->imagename = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->link = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->orderflag = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->access_s = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->access_a = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->access_v = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->access_r = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->setup_s = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->setup_a = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->setup_v = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->setup_r = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->supervisor = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->nonsupervisor = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->extvend = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->extcust = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->nonext = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = MenufunctionPeer::NUM_COLUMNS - MenufunctionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Menufunction object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MenufunctionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MenufunctionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMenufunction:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MenufunctionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MenufunctionPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMenufunction:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMenufunction:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MenufunctionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMenufunction:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MenufunctionPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MenufunctionPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MenufunctionPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MenufunctionPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = MenufunctionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MenufunctionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getMenucategoryid();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getImagename();
				break;
			case 4:
				return $this->getLink();
				break;
			case 5:
				return $this->getOrderflag();
				break;
			case 6:
				return $this->getAccessS();
				break;
			case 7:
				return $this->getAccessA();
				break;
			case 8:
				return $this->getAccessV();
				break;
			case 9:
				return $this->getAccessR();
				break;
			case 10:
				return $this->getSetupS();
				break;
			case 11:
				return $this->getSetupA();
				break;
			case 12:
				return $this->getSetupV();
				break;
			case 13:
				return $this->getSetupR();
				break;
			case 14:
				return $this->getSupervisor();
				break;
			case 15:
				return $this->getNonsupervisor();
				break;
			case 16:
				return $this->getExtvend();
				break;
			case 17:
				return $this->getExtcust();
				break;
			case 18:
				return $this->getNonext();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MenufunctionPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getMenucategoryid(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getImagename(),
			$keys[4] => $this->getLink(),
			$keys[5] => $this->getOrderflag(),
			$keys[6] => $this->getAccessS(),
			$keys[7] => $this->getAccessA(),
			$keys[8] => $this->getAccessV(),
			$keys[9] => $this->getAccessR(),
			$keys[10] => $this->getSetupS(),
			$keys[11] => $this->getSetupA(),
			$keys[12] => $this->getSetupV(),
			$keys[13] => $this->getSetupR(),
			$keys[14] => $this->getSupervisor(),
			$keys[15] => $this->getNonsupervisor(),
			$keys[16] => $this->getExtvend(),
			$keys[17] => $this->getExtcust(),
			$keys[18] => $this->getNonext(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MenufunctionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setMenucategoryid($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setImagename($value);
				break;
			case 4:
				$this->setLink($value);
				break;
			case 5:
				$this->setOrderflag($value);
				break;
			case 6:
				$this->setAccessS($value);
				break;
			case 7:
				$this->setAccessA($value);
				break;
			case 8:
				$this->setAccessV($value);
				break;
			case 9:
				$this->setAccessR($value);
				break;
			case 10:
				$this->setSetupS($value);
				break;
			case 11:
				$this->setSetupA($value);
				break;
			case 12:
				$this->setSetupV($value);
				break;
			case 13:
				$this->setSetupR($value);
				break;
			case 14:
				$this->setSupervisor($value);
				break;
			case 15:
				$this->setNonsupervisor($value);
				break;
			case 16:
				$this->setExtvend($value);
				break;
			case 17:
				$this->setExtcust($value);
				break;
			case 18:
				$this->setNonext($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MenufunctionPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMenucategoryid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setImagename($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLink($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setOrderflag($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAccessS($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAccessA($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAccessV($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAccessR($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSetupS($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setSetupA($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSetupV($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSetupR($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSupervisor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setNonsupervisor($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setExtvend($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setExtcust($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setNonext($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MenufunctionPeer::DATABASE_NAME);

		if ($this->isColumnModified(MenufunctionPeer::ID)) $criteria->add(MenufunctionPeer::ID, $this->id);
		if ($this->isColumnModified(MenufunctionPeer::MENUCATEGORYID)) $criteria->add(MenufunctionPeer::MENUCATEGORYID, $this->menucategoryid);
		if ($this->isColumnModified(MenufunctionPeer::NAME)) $criteria->add(MenufunctionPeer::NAME, $this->name);
		if ($this->isColumnModified(MenufunctionPeer::IMAGENAME)) $criteria->add(MenufunctionPeer::IMAGENAME, $this->imagename);
		if ($this->isColumnModified(MenufunctionPeer::LINK)) $criteria->add(MenufunctionPeer::LINK, $this->link);
		if ($this->isColumnModified(MenufunctionPeer::ORDERFLAG)) $criteria->add(MenufunctionPeer::ORDERFLAG, $this->orderflag);
		if ($this->isColumnModified(MenufunctionPeer::ACCESS_S)) $criteria->add(MenufunctionPeer::ACCESS_S, $this->access_s);
		if ($this->isColumnModified(MenufunctionPeer::ACCESS_A)) $criteria->add(MenufunctionPeer::ACCESS_A, $this->access_a);
		if ($this->isColumnModified(MenufunctionPeer::ACCESS_V)) $criteria->add(MenufunctionPeer::ACCESS_V, $this->access_v);
		if ($this->isColumnModified(MenufunctionPeer::ACCESS_R)) $criteria->add(MenufunctionPeer::ACCESS_R, $this->access_r);
		if ($this->isColumnModified(MenufunctionPeer::SETUP_S)) $criteria->add(MenufunctionPeer::SETUP_S, $this->setup_s);
		if ($this->isColumnModified(MenufunctionPeer::SETUP_A)) $criteria->add(MenufunctionPeer::SETUP_A, $this->setup_a);
		if ($this->isColumnModified(MenufunctionPeer::SETUP_V)) $criteria->add(MenufunctionPeer::SETUP_V, $this->setup_v);
		if ($this->isColumnModified(MenufunctionPeer::SETUP_R)) $criteria->add(MenufunctionPeer::SETUP_R, $this->setup_r);
		if ($this->isColumnModified(MenufunctionPeer::SUPERVISOR)) $criteria->add(MenufunctionPeer::SUPERVISOR, $this->supervisor);
		if ($this->isColumnModified(MenufunctionPeer::NONSUPERVISOR)) $criteria->add(MenufunctionPeer::NONSUPERVISOR, $this->nonsupervisor);
		if ($this->isColumnModified(MenufunctionPeer::EXTVEND)) $criteria->add(MenufunctionPeer::EXTVEND, $this->extvend);
		if ($this->isColumnModified(MenufunctionPeer::EXTCUST)) $criteria->add(MenufunctionPeer::EXTCUST, $this->extcust);
		if ($this->isColumnModified(MenufunctionPeer::NONEXT)) $criteria->add(MenufunctionPeer::NONEXT, $this->nonext);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MenufunctionPeer::DATABASE_NAME);

		$criteria->add(MenufunctionPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Menufunction (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMenucategoryid($this->menucategoryid);

		$copyObj->setName($this->name);

		$copyObj->setImagename($this->imagename);

		$copyObj->setLink($this->link);

		$copyObj->setOrderflag($this->orderflag);

		$copyObj->setAccessS($this->access_s);

		$copyObj->setAccessA($this->access_a);

		$copyObj->setAccessV($this->access_v);

		$copyObj->setAccessR($this->access_r);

		$copyObj->setSetupS($this->setup_s);

		$copyObj->setSetupA($this->setup_a);

		$copyObj->setSetupV($this->setup_v);

		$copyObj->setSetupR($this->setup_r);

		$copyObj->setSupervisor($this->supervisor);

		$copyObj->setNonsupervisor($this->nonsupervisor);

		$copyObj->setExtvend($this->extvend);

		$copyObj->setExtcust($this->extcust);

		$copyObj->setNonext($this->nonext);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Menufunction Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MenufunctionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MenufunctionPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMenufunction:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMenufunction::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMenufunction
